[
  {
    "task_id": "ClassEval_12",
    "skeleton": "\nimport random\nclass BlackjackGame:\n    \"\"\"\n    This is a class representing a game of blackjack, which includes creating a deck, calculating the value of a hand, and determine the winner based on the hand values of the player and dealer.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the Blackjack Game with the attribute deck, player_hand and dealer_hand.\n        While initializing deck attribute, call the create_deck method to generate.\n        The deck stores 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].\n        player_hand is a list which stores player's hand cards.\n        dealer_hand is is a list which stores dealer's hand cards.\n        \"\"\"\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n    def create_deck(self):\n        \"\"\"\n        Create a deck of 52 cards, which stores 52 rondom order poker with the Jokers removed.\n        :return: a list of 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].\n        >>> black_jack_game = BlackjackGame()\n        >>> black_jack_game.create_deck()\n        ['QD', '9D', 'JC', 'QH', '2S', 'JH', '7D', '6H', '9S', '5C', '7H', 'QS', '5H',\n        '6C', '7C', '3D', '10C', 'AD', '4C', '5D', 'AH', '2D', 'QC', 'KH', '9C', '9H',\n        '4H', 'JS', '6S', '8H', '8C', '4S', '3H', '10H', '7S', '6D', '3C', 'KC', '3S',\n        '2H', '10D', 'KS', '4D', 'AC', '10S', '2C', 'KD', '5S', 'JD', '8S', 'AS', '8D']\n        \"\"\"\n\n    def calculate_hand_value(self, hand):\n        \"\"\"\n        Calculate the value of the poker cards stored in hand list according to the rules of the Blackjack Game.\n        If the card is a digit, its value is added to the total hand value.\n        Value of J, Q, or K is 10, while Aces are worth 11.\n        If the total hand value exceeds 21 and there are Aces present, one Ace is treated as having a value of 1 instead of 11,\n        until the hand value is less than or equal to 21, or all Aces have been counted as value of 1.\n        :param hand: list\n        :return: the value of the poker cards stored in hand list, a number.\n        >>> black_jack_game.calculate_hand_value(['QD', '9D', 'JC', 'QH', 'AS'])\n        40\n        \"\"\"\n\n    def check_winner(self, player_hand, dealer_hand):\n        \"\"\"\n        Determines the winner of a game by comparing the hand values of the player and dealer.\n        rule:\n        If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21.\n        Otherwise, the winner is the one with the lower hand value.\n        :param player_hand: list\n        :param dealer_hand: list\n        :return: the result of the game, only two certain str: 'Dealer wins' or 'Player wins'\n        >>> black_jack_game.check_winner(['QD', '9D', 'JC', 'QH', 'AS'], ['QD', '9D', 'JC', 'QH', '2S'])\n        'Player wins'\n        \"\"\"",
    "test": "import unittest\n\nclass BlackjackGameTestCreateDeck(unittest.TestCase):\n    def setUp(self):\n        self.blackjackGame = BlackjackGame()\n        self.deck = self.blackjackGame.deck\n\n    def test_create_deck_1(self):\n        self.assertEqual(len(self.deck), 52)\n\n    def test_create_deck_2(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\n    def test_create_deck_3(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\n    def test_create_deck_4(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\n    def test_create_deck_5(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\nclass BlackjackGameTestCalculateHandValue(unittest.TestCase):\n    def test_calculate_hand_value_1(self):\n        blackjackGame = BlackjackGame()\n        hand = ['2S', '3S', '4S', '5S']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 14)\n\n    def test_calculate_hand_value_2(self):\n        blackjackGame = BlackjackGame()\n        hand = ['2S', '3S', 'JS', 'QS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 25)\n\n    def test_calculate_hand_value_3(self):\n        blackjackGame = BlackjackGame()\n        hand = ['2S', '3S', '4S', 'AS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 20)\n\n    def test_calculate_hand_value_4(self):\n        blackjackGame = BlackjackGame()\n        hand = ['JS', 'QS', '4S', 'AS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 25)\n\n    def test_calculate_hand_value_5(self):\n        blackjackGame = BlackjackGame()\n        hand = ['JS', 'QS', 'AS', 'AS', 'AS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 23)\n\n    def test_calculate_hand_value_6(self):\n        blackjackGame = BlackjackGame()\n        hand = ['JS', 'QS', 'BS', 'CS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 20)\n\n\nclass BlackjackGameTestCheckWinner(unittest.TestCase):\n    def setUp(self):\n        self.blackjackGame = BlackjackGame()\n\n    # player > 21 but dealer not, dealer wins.\n    def test_check_winner_1(self):\n        player_hand = ['2S', 'JS', 'QS']\n        dealer_hand = ['7S', '9S']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')\n\n    # dealer > 21 but player not, player wins.\n    def test_check_winner_2(self):\n        player_hand = ['2S', '4S', '5S']\n        dealer_hand = ['2S', 'JS', 'QS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Player wins')\n\n    # both > 21 but dealer smaller, dealer wins.\n    def test_check_winner_3(self):\n        player_hand = ['3S', 'JS', 'QS']\n        dealer_hand = ['2S', 'JS', 'QS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')\n\n    # both > 21 but player smaller, player wins.\n    def test_check_winner_4(self):\n        player_hand = ['2S', 'JS', 'QS']\n        dealer_hand = ['3S', 'JS', 'QS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Player wins')\n\n    # both < 21 but dealer is bigger, dealer wins.\n    def test_check_winner_5(self):\n        player_hand = ['2S', '3S', '5S']\n        dealer_hand = ['AS', 'JS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')\n\n    # both < 21 but player is bigger, player wins.\n    def test_check_winner_6(self):\n        player_hand = ['AS', 'JS']\n        dealer_hand = ['2S', '3S', '5S']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Player wins')\n\n\nclass BlackjackGameTestMain(unittest.TestCase):\n    # calculate_hand_value method will be invoked in check_winner\n    def test_main_1(self):\n        blackjackGame = BlackjackGame()\n        deck = blackjackGame.deck\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, deck)\n        player_hand = ['2S', 'JS', 'QS']\n        dealer_hand = ['7S', '9S']\n        self.assertEqual(blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')",
    "solution_code": "import random\n\n\nclass BlackjackGame:\n    def __init__(self):\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n    def create_deck(self):\n        deck = []\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                deck.append(rank + suit)\n        random.shuffle(deck)\n        return deck\n\n    def calculate_hand_value(self, hand):\n        value = 0\n        num_aces = 0\n        for card in hand:\n            rank = card[:-1]\n            if rank.isdigit():\n                value += int(rank)\n            elif rank in ['J', 'Q', 'K']:\n                value += 10\n            elif rank == 'A':\n                value += 11\n                num_aces += 1\n        while value > 21 and num_aces > 0:\n            value -= 10\n            num_aces -= 1\n        return value\n\n    def check_winner(self, player_hand, dealer_hand):\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n        if player_value > 21 and dealer_value > 21:\n            if player_value <= dealer_value:\n                return 'Player wins'\n            else:\n                return 'Dealer wins'\n        elif player_value > 21:\n            return 'Dealer wins'\n        elif dealer_value > 21:\n            return 'Player wins'\n        else:\n            if player_value <= dealer_value:\n                return 'Dealer wins'\n            else:\n                return 'Player wins'",
    "import_statement": [
      "import random"
    ],
    "class_description": "    \"\"\"\n    This is a class representing a game of blackjack, which includes creating a deck, calculating the value of a hand, and determine the winner based on the hand values of the player and dealer.\n    \"\"\"\n",
    "class_name": "BlackjackGame",
    "test_classes": [
      "BlackjackGameTestCreateDeck",
      "BlackjackGameTestCalculateHandValue",
      "BlackjackGameTestCheckWinner",
      "BlackjackGameTestMain"
    ],
    "class_constructor": "class BlackjackGame: \n    def __init__(self):\n        \"\"\"\n        Initialize the Blackjack Game with the attribute deck, player_hand and dealer_hand.\n        While initializing deck attribute, call the create_deck method to generate.\n        The deck stores 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].\n        player_hand is a list which stores player's hand cards.\n        dealer_hand is is a list which stores dealer's hand cards.\n        \"\"\"\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n",
    "fields": [
      "self.dealer_hand",
      "self.deck",
      "self.player_hand"
    ],
    "methods_info": [
      {
        "method_name": "create_deck",
        "method_description": "def create_deck(self):\n        \"\"\"\n        Create a deck of 52 cards, which stores 52 rondom order poker with the Jokers removed.\n        :return: a list of 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].\n        >>> black_jack_game = BlackjackGame()\n        >>> black_jack_game.create_deck()\n        ['QD', '9D', 'JC', 'QH', '2S', 'JH', '7D', '6H', '9S', '5C', '7H', 'QS', '5H',\n        '6C', '7C', '3D', '10C', 'AD', '4C', '5D', 'AH', '2D', 'QC', 'KH', '9C', '9H',\n        '4H', 'JS', '6S', '8H', '8C', '4S', '3H', '10H', '7S', '6D', '3C', 'KC', '3S',\n        '2H', '10D', 'KS', '4D', 'AC', '10S', '2C', 'KD', '5S', 'JD', '8S', 'AS', '8D']\n        \"\"\"",
        "test_class": "BlackjackGameTestCreateDeck",
        "test_code": "class BlackjackGameTestCreateDeck(unittest.TestCase):\n    def setUp(self):\n        self.blackjackGame = BlackjackGame()\n        self.deck = self.blackjackGame.deck\n\n    def test_create_deck_1(self):\n        self.assertEqual(len(self.deck), 52)\n\n    def test_create_deck_2(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\n    def test_create_deck_3(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\n    def test_create_deck_4(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)\n\n    def test_create_deck_5(self):\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9']\n        for suit in suits:\n            for rank in ranks:\n                self.assertIn(rank + suit, self.deck)",
        "solution_code": "def create_deck(self):\n        deck = []\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                deck.append(rank + suit)\n        random.shuffle(deck)\n        return deck",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "random"
          ],
          "field_dependencies": [],
          "method_dependencies": []
        }
      },
      {
        "method_name": "calculate_hand_value",
        "method_description": "def calculate_hand_value(self, hand):\n        \"\"\"\n        Calculate the value of the poker cards stored in hand list according to the rules of the Blackjack Game.\n        If the card is a digit, its value is added to the total hand value.\n        Value of J, Q, or K is 10, while Aces are worth 11.\n        If the total hand value exceeds 21 and there are Aces present, one Ace is treated as having a value of 1 instead of 11,\n        until the hand value is less than or equal to 21, or all Aces have been counted as value of 1.\n        :param hand: list\n        :return: the value of the poker cards stored in hand list, a number.\n        >>> black_jack_game.calculate_hand_value(['QD', '9D', 'JC', 'QH', 'AS'])\n        40\n        \"\"\"",
        "test_class": "BlackjackGameTestCalculateHandValue",
        "test_code": "class BlackjackGameTestCalculateHandValue(unittest.TestCase):\n    def test_calculate_hand_value_1(self):\n        blackjackGame = BlackjackGame()\n        hand = ['2S', '3S', '4S', '5S']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 14)\n\n    def test_calculate_hand_value_2(self):\n        blackjackGame = BlackjackGame()\n        hand = ['2S', '3S', 'JS', 'QS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 25)\n\n    def test_calculate_hand_value_3(self):\n        blackjackGame = BlackjackGame()\n        hand = ['2S', '3S', '4S', 'AS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 20)\n\n    def test_calculate_hand_value_4(self):\n        blackjackGame = BlackjackGame()\n        hand = ['JS', 'QS', '4S', 'AS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 25)\n\n    def test_calculate_hand_value_5(self):\n        blackjackGame = BlackjackGame()\n        hand = ['JS', 'QS', 'AS', 'AS', 'AS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 23)\n\n    def test_calculate_hand_value_6(self):\n        blackjackGame = BlackjackGame()\n        hand = ['JS', 'QS', 'BS', 'CS']\n        self.assertEqual(blackjackGame.calculate_hand_value(hand), 20)",
        "solution_code": "def calculate_hand_value(self, hand):\n        value = 0\n        num_aces = 0\n        for card in hand:\n            rank = card[:-1]\n            if rank.isdigit():\n                value += int(rank)\n            elif rank in ['J', 'Q', 'K']:\n                value += 10\n            elif rank == 'A':\n                value += 11\n                num_aces += 1\n        while value > 21 and num_aces > 0:\n            value -= 10\n            num_aces -= 1\n        return value",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      },
      {
        "method_name": "check_winner",
        "method_description": "def check_winner(self, player_hand, dealer_hand):\n        \"\"\"\n        Determines the winner of a game by comparing the hand values of the player and dealer.\n        rule:\n        If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21.\n        Otherwise, the winner is the one with the lower hand value.\n        :param player_hand: list\n        :param dealer_hand: list\n        :return: the result of the game, only two certain str: 'Dealer wins' or 'Player wins'\n        >>> black_jack_game.check_winner(['QD', '9D', 'JC', 'QH', 'AS'], ['QD', '9D', 'JC', 'QH', '2S'])\n        'Player wins'\n        \"\"\"",
        "test_class": "BlackjackGameTestCheckWinner",
        "test_code": "class BlackjackGameTestCheckWinner(unittest.TestCase):\n    def setUp(self):\n        self.blackjackGame = BlackjackGame()\n\n    # player > 21 but dealer not, dealer wins.\n    def test_check_winner_1(self):\n        player_hand = ['2S', 'JS', 'QS']\n        dealer_hand = ['7S', '9S']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')\n\n    # dealer > 21 but player not, player wins.\n    def test_check_winner_2(self):\n        player_hand = ['2S', '4S', '5S']\n        dealer_hand = ['2S', 'JS', 'QS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Player wins')\n\n    # both > 21 but dealer smaller, dealer wins.\n    def test_check_winner_3(self):\n        player_hand = ['3S', 'JS', 'QS']\n        dealer_hand = ['2S', 'JS', 'QS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')\n\n    # both > 21 but player smaller, player wins.\n    def test_check_winner_4(self):\n        player_hand = ['2S', 'JS', 'QS']\n        dealer_hand = ['3S', 'JS', 'QS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Player wins')\n\n    # both < 21 but dealer is bigger, dealer wins.\n    def test_check_winner_5(self):\n        player_hand = ['2S', '3S', '5S']\n        dealer_hand = ['AS', 'JS']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Dealer wins')\n\n    # both < 21 but player is bigger, player wins.\n    def test_check_winner_6(self):\n        player_hand = ['AS', 'JS']\n        dealer_hand = ['2S', '3S', '5S']\n        self.assertEqual(self.blackjackGame.check_winner(player_hand, dealer_hand), 'Player wins')",
        "solution_code": "def check_winner(self, player_hand, dealer_hand):\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n        if player_value > 21 and dealer_value > 21:\n            if player_value <= dealer_value:\n                return 'Player wins'\n            else:\n                return 'Dealer wins'\n        elif player_value > 21:\n            return 'Dealer wins'\n        elif dealer_value > 21:\n            return 'Player wins'\n        else:\n            if player_value <= dealer_value:\n                return 'Dealer wins'\n            else:\n                return 'Player wins'",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": [
            "calculate_hand_value"
          ]
        }
      }
    ],
    "predict": [
      "```python\nimport random\nclass BlackjackGame:\n    def __init__(self):\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n    def create_deck(self):\n        suits = ['S', 'H', 'D', 'C']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        deck = [rank + suit for suit in suits for rank in ranks]\n        random.shuffle(deck)\n        return deck\n\n    def calculate_hand_value(self, hand):\n        values = {'A': 11, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10}\n        value = 0\n        aces = 0\n        for card in hand:\n            rank = card[:-1]\n            value += values[rank]\n            if rank == 'A':\n                aces += 1\n        while value > 21 and aces:\n            value -= 10\n            aces -= 1\n        return value\n\n    def check_winner(self, player_hand, dealer_hand):\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n        if player_value > 21:\n            if dealer_value > 21:\n                return 'Dealer wins'\n            else:\n                return 'Player wins'\n        else:\n            if dealer_value > 21 or dealer_value < player_value:\n                return 'Player wins'\n            else:\n                return 'Dealer wins'\n```"
    ]
  },
  {
    "task_id": "ClassEval_35",
    "skeleton": "\nclass EightPuzzle:\n    \"\"\"\n    This class is an implementation of the classic 8-puzzle game, including methods for finding the blank tile, making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.\n    \"\"\"\n\n    def __init__(self, initial_state):\n        \"\"\"\n        Initializing the initial state of Eight Puzzle Game, stores in attribute self.initial_state.\n        And set the goal state of this game, stores in self.goal_state. In this case, set the size as 3*3\n        :param initial_state: a 3*3 size list of Integer, stores the initial state\n        \"\"\"\n        self.initial_state = initial_state\n        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n\n    def find_blank(self, state):\n        \"\"\"\n        Find the blank position of current state, which is the 0 element.\n        :param state: a 3*3 size list of Integer, stores the current state.\n        :return i, j: two Integers, represent the coordinate of the blank block.\n        >>> eightPuzzle = EightPuzzle([[2, 3, 4], [5, 8, 1], [6, 0, 7]])\n        >>> eightPuzzle.find_blank([[2, 3, 4], [5, 8, 1], [6, 0, 7]])\n        (2, 1)\n        \"\"\"\n\n    def move(self, state, direction):\n        \"\"\"\n        Find the blank block, then makes the board moves forward the given direction.\n        :param state: a 3*3 size list of Integer, stores the state before moving.\n        :param direction: str, only has 4 direction 'up', 'down', 'left', 'right'\n        :return new_state: a 3*3 size list of Integer, stores the state after moving.\n        >>> eightPuzzle.move([[2, 3, 4], [5, 8, 1], [6, 0, 7]], 'left')\n        [[2, 3, 4], [5, 8, 1], [0, 6, 7]]\n        \"\"\"\n\n    def get_possible_moves(self, state):\n        \"\"\"\n        According the current state, find all the possible moving directions. Only has 4 direction 'up', 'down', 'left', 'right'.\n        :param state: a 3*3 size list of Integer, stores the current state.\n        :return moves: a list of str, store all the possible moving directions according to the current state.\n        >>> eightPuzzle.get_possible_moves([[2, 3, 4], [5, 8, 1], [6, 0, 7]])\n        ['up', 'left', 'right']\n        \"\"\"\n\n    def solve(self):\n        \"\"\"\n        Use BFS algorithm to find the path solution which makes the initial state to the goal method.\n        Maintain a list as a queue, named as open_list, append the initial state.\n        Always visit and pop the 0 index element, invoke get_possible_moves method find all the possible directions.\n        Traversal the possible_moves list and invoke move method to get several new states.Then append them.\n        redo the above steps until the open_list is empty or the state has changed to the goal state.\n        :return path: list of str, the solution to the goal state.\n        >>> eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 0, 8]])\n        >>> eightPuzzle.solve()\n        ['right']\n        \"\"\"",
    "test": "import unittest\n\nclass EightPuzzleTestFindBlank(unittest.TestCase):\n    def test_find_blank_1(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 0, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), (2, 1))\n\n    def test_find_blank_2(self):\n        state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), (1, 1))\n\n    def test_find_blank_3(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), None)\n\n    def test_find_blank_4(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), None)\n\n    def test_find_blank_5(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), None)\n\n\nclass EightPuzzleTestMove(unittest.TestCase):\n    def setUp(self):\n        self.initial_state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        self.eightPuzzle = EightPuzzle(self.initial_state)\n\n    def test_move_1(self):\n        result = self.eightPuzzle.move(self.initial_state, 'up')\n        expected = [[2, 0, 4], [5, 3, 1], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_2(self):\n        result = self.eightPuzzle.move(self.initial_state, 'down')\n        expected = [[2, 3, 4], [5, 8, 1], [6, 0, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_3(self):\n        result = self.eightPuzzle.move(self.initial_state, 'left')\n        expected = [[2, 3, 4], [0, 5, 1], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_4(self):\n        result = self.eightPuzzle.move(self.initial_state, 'right')\n        expected = [[2, 3, 4], [5, 1, 0], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_5(self):\n        result = self.eightPuzzle.move(self.initial_state, '???')\n        expected = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n\nclass EightPuzzleTestGetPossibleMoves(unittest.TestCase):\n    def test_get_possible_moves_1(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'down', 'left', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_2(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [5, 8, 1], [6, 0, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'left', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_3(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 0, 4], [5, 3, 1], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['down', 'left', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_4(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [5, 1, 0], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'down', 'left']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_5(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [0, 5, 1], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'down', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n\nclass EightPuzzleTestSolve(unittest.TestCase):\n    def test_solve_1(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 0, 8]])\n        result = eightPuzzle.solve()\n        expected = ['right']\n        self.assertEqual(result, expected)\n\n    def test_solve_2(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 0, 6], [7, 5, 8]])\n        result = eightPuzzle.solve()\n        expected = ['down', 'right']\n        self.assertEqual(result, expected)\n\n    def test_solve_3(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [0, 4, 5], [6, 7, 8]])\n        result = eightPuzzle.solve()\n        expected = ['right', 'right', 'down', 'left', 'left', 'up', 'right', 'down', 'right', 'up', 'left', 'left', 'down', 'right', 'right']\n        self.assertEqual(result, expected)\n\n    def test_solve_4(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 8, 0]])\n        result = eightPuzzle.solve()\n        expected = []\n        self.assertEqual(result, expected)\n\n    def test_solve_5(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [0, 7, 8]])\n        result = eightPuzzle.solve()\n        expected = ['right', 'right']\n        self.assertEqual(result, expected)\n\n    def test_solve_6(self):\n        eightPuzzle = EightPuzzle([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n        result = eightPuzzle.solve()\n        expected = None\n        self.assertEqual(result, expected)",
    "solution_code": "class EightPuzzle:\n    def __init__(self, initial_state):\n        self.initial_state = initial_state\n        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n\n    def find_blank(self, state):\n        for i in range(3):\n            for j in range(3):\n                if state[i][j] == 0:\n                    return i, j\n\n    def move(self, state, direction):\n        i, j = self.find_blank(state)\n        new_state = [row[:] for row in state]\n\n        if direction == 'up':\n            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]\n        elif direction == 'down':\n            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]\n        elif direction == 'left':\n            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]\n        elif direction == 'right':\n            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]\n\n        return new_state\n\n    def get_possible_moves(self, state):\n        moves = []\n        i, j = self.find_blank(state)\n\n        if i > 0:\n            moves.append('up')\n        if i < 2:\n            moves.append('down')\n        if j > 0:\n            moves.append('left')\n        if j < 2:\n            moves.append('right')\n\n        return moves\n\n    def solve(self):\n        open_list = [(self.initial_state, [])]\n        closed_list = []\n\n        while open_list:\n            current_state, path = open_list.pop(0)\n            closed_list.append(current_state)\n\n            if current_state == self.goal_state:\n                return path\n\n            for move in self.get_possible_moves(current_state):\n                new_state = self.move(current_state, move)\n                if new_state not in closed_list:\n                    open_list.append((new_state, path + [move]))\n\n        return None",
    "import_statement": [],
    "class_description": "    \"\"\"\n    This class is an implementation of the classic 8-puzzle game, including methods for finding the blank tile, making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.\n    \"\"\"\n",
    "class_name": "EightPuzzle",
    "test_classes": [
      "EightPuzzleTestFindBlank",
      "EightPuzzleTestMove",
      "EightPuzzleTestGetPossibleMoves",
      "EightPuzzleTestSolve"
    ],
    "class_constructor": "class EightPuzzle: \n    def __init__(self, initial_state):\n        \"\"\"\n        Initializing the initial state of Eight Puzzle Game, stores in attribute self.initial_state.\n        And set the goal state of this game, stores in self.goal_state. In this case, set the size as 3*3\n        :param initial_state: a 3*3 size list of Integer, stores the initial state\n        \"\"\"\n        self.initial_state = initial_state\n        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n\n",
    "fields": [
      "self.goal_state",
      "self.initial_state"
    ],
    "methods_info": [
      {
        "method_name": "find_blank",
        "method_description": "def find_blank(self, state):\n        \"\"\"\n        Find the blank position of current state, which is the 0 element.\n        :param state: a 3*3 size list of Integer, stores the current state.\n        :return i, j: two Integers, represent the coordinate of the blank block.\n        >>> eightPuzzle = EightPuzzle([[2, 3, 4], [5, 8, 1], [6, 0, 7]])\n        >>> eightPuzzle.find_blank([[2, 3, 4], [5, 8, 1], [6, 0, 7]])\n        (2, 1)\n        \"\"\"",
        "test_class": "EightPuzzleTestFindBlank",
        "test_code": "class EightPuzzleTestFindBlank(unittest.TestCase):\n    def test_find_blank_1(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 0, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), (2, 1))\n\n    def test_find_blank_2(self):\n        state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), (1, 1))\n\n    def test_find_blank_3(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), None)\n\n    def test_find_blank_4(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), None)\n\n    def test_find_blank_5(self):\n        state = [[2, 3, 4], [5, 8, 1], [6, 8, 7]]\n        eightPuzzle = EightPuzzle(state)\n        self.assertEqual(eightPuzzle.find_blank(state), None)",
        "solution_code": "def find_blank(self, state):\n        for i in range(3):\n            for j in range(3):\n                if state[i][j] == 0:\n                    return i, j",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      },
      {
        "method_name": "move",
        "method_description": "def move(self, state, direction):\n        \"\"\"\n        Find the blank block, then makes the board moves forward the given direction.\n        :param state: a 3*3 size list of Integer, stores the state before moving.\n        :param direction: str, only has 4 direction 'up', 'down', 'left', 'right'\n        :return new_state: a 3*3 size list of Integer, stores the state after moving.\n        >>> eightPuzzle.move([[2, 3, 4], [5, 8, 1], [6, 0, 7]], 'left')\n        [[2, 3, 4], [5, 8, 1], [0, 6, 7]]\n        \"\"\"",
        "test_class": "EightPuzzleTestMove",
        "test_code": "class EightPuzzleTestMove(unittest.TestCase):\n    def setUp(self):\n        self.initial_state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        self.eightPuzzle = EightPuzzle(self.initial_state)\n\n    def test_move_1(self):\n        result = self.eightPuzzle.move(self.initial_state, 'up')\n        expected = [[2, 0, 4], [5, 3, 1], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_2(self):\n        result = self.eightPuzzle.move(self.initial_state, 'down')\n        expected = [[2, 3, 4], [5, 8, 1], [6, 0, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_3(self):\n        result = self.eightPuzzle.move(self.initial_state, 'left')\n        expected = [[2, 3, 4], [0, 5, 1], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_4(self):\n        result = self.eightPuzzle.move(self.initial_state, 'right')\n        expected = [[2, 3, 4], [5, 1, 0], [6, 8, 7]]\n        self.assertEqual(result, expected)\n\n    def test_move_5(self):\n        result = self.eightPuzzle.move(self.initial_state, '???')\n        expected = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        self.assertEqual(result, expected)",
        "solution_code": "def move(self, state, direction):\n        i, j = self.find_blank(state)\n        new_state = [row[:] for row in state]\n\n        if direction == 'up':\n            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]\n        elif direction == 'down':\n            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]\n        elif direction == 'left':\n            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]\n        elif direction == 'right':\n            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]\n\n        return new_state",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": [
            "find_blank"
          ]
        }
      },
      {
        "method_name": "get_possible_moves",
        "method_description": "def get_possible_moves(self, state):\n        \"\"\"\n        According the current state, find all the possible moving directions. Only has 4 direction 'up', 'down', 'left', 'right'.\n        :param state: a 3*3 size list of Integer, stores the current state.\n        :return moves: a list of str, store all the possible moving directions according to the current state.\n        >>> eightPuzzle.get_possible_moves([[2, 3, 4], [5, 8, 1], [6, 0, 7]])\n        ['up', 'left', 'right']\n        \"\"\"",
        "test_class": "EightPuzzleTestGetPossibleMoves",
        "test_code": "class EightPuzzleTestGetPossibleMoves(unittest.TestCase):\n    def test_get_possible_moves_1(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'down', 'left', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_2(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [5, 8, 1], [6, 0, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'left', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_3(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 0, 4], [5, 3, 1], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['down', 'left', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_4(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [5, 1, 0], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'down', 'left']\n        for direction in result:\n            self.assertIn(direction, expected)\n\n    def test_get_possible_moves_5(self):\n        eightPuzzle = EightPuzzle(None)\n        state = [[2, 3, 4], [0, 5, 1], [6, 8, 7]]\n        result = eightPuzzle.get_possible_moves(state)\n        expected = ['up', 'down', 'right']\n        for direction in result:\n            self.assertIn(direction, expected)",
        "solution_code": "def get_possible_moves(self, state):\n        moves = []\n        i, j = self.find_blank(state)\n\n        if i > 0:\n            moves.append('up')\n        if i < 2:\n            moves.append('down')\n        if j > 0:\n            moves.append('left')\n        if j < 2:\n            moves.append('right')\n\n        return moves",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": [
            "find_blank",
            "move"
          ]
        }
      },
      {
        "method_name": "solve",
        "method_description": "def solve(self):\n        \"\"\"\n        Use BFS algorithm to find the path solution which makes the initial state to the goal method.\n        Maintain a list as a queue, named as open_list, append the initial state.\n        Always visit and pop the 0 index element, invoke get_possible_moves method find all the possible directions.\n        Traversal the possible_moves list and invoke move method to get several new states.Then append them.\n        redo the above steps until the open_list is empty or the state has changed to the goal state.\n        :return path: list of str, the solution to the goal state.\n        >>> eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 0, 8]])\n        >>> eightPuzzle.solve()\n        ['right']\n        \"\"\"",
        "test_class": "EightPuzzleTestSolve",
        "test_code": "class EightPuzzleTestSolve(unittest.TestCase):\n    def test_solve_1(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 0, 8]])\n        result = eightPuzzle.solve()\n        expected = ['right']\n        self.assertEqual(result, expected)\n\n    def test_solve_2(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 0, 6], [7, 5, 8]])\n        result = eightPuzzle.solve()\n        expected = ['down', 'right']\n        self.assertEqual(result, expected)\n\n    def test_solve_3(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [0, 4, 5], [6, 7, 8]])\n        result = eightPuzzle.solve()\n        expected = ['right', 'right', 'down', 'left', 'left', 'up', 'right', 'down', 'right', 'up', 'left', 'left', 'down', 'right', 'right']\n        self.assertEqual(result, expected)\n\n    def test_solve_4(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 8, 0]])\n        result = eightPuzzle.solve()\n        expected = []\n        self.assertEqual(result, expected)\n\n    def test_solve_5(self):\n        eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [0, 7, 8]])\n        result = eightPuzzle.solve()\n        expected = ['right', 'right']\n        self.assertEqual(result, expected)\n\n    def test_solve_6(self):\n        eightPuzzle = EightPuzzle([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n        result = eightPuzzle.solve()\n        expected = None\n        self.assertEqual(result, expected)",
        "solution_code": "def solve(self):\n        open_list = [(self.initial_state, [])]\n        closed_list = []\n\n        while open_list:\n            current_state, path = open_list.pop(0)\n            closed_list.append(current_state)\n\n            if current_state == self.goal_state:\n                return path\n\n            for move in self.get_possible_moves(current_state):\n                new_state = self.move(current_state, move)\n                if new_state not in closed_list:\n                    open_list.append((new_state, path + [move]))\n\n        return None",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.goal_state",
            "self.initial_state"
          ],
          "method_dependencies": [
            "move",
            "get_possible_moves"
          ]
        }
      }
    ],
    "predict": [
      "```python\nclass EightPuzzle:\n    def __init__(self, initial_state):\n        self.initial_state = initial_state\n        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n\n    def find_blank(self, state):\n        for i in range(3):\n            for j in range(3):\n                if state[i][j] == 0:\n                    return i, j\n\n    def move(self, state, direction):\n        i, j = self.find_blank(state)\n        new_state = [row.copy() for row in state]\n        if direction == 'up':\n            new_state[i][j], new_state[i-1][j] = new_state[i-1][j], new_state[i][j]\n        elif direction == 'down':\n            new_state[i][j], new_state[i+1][j] = new_state[i+1][j], new_state[i][j]\n        elif direction == 'left':\n            new_state[i][j], new_state[i][j-1] = new_state[i][j-1], new_state[i][j]\n        elif direction == 'right':\n            new_state[i][j], new_state[i][j+1] = new_state[i][j+1], new_state[i][j]\n        return new_state\n\n    def get_possible_moves(self, state):\n        i, j = self.find_blank(state)\n        moves = []\n        if i > 0:\n            moves.append('up')\n        if i < 2:\n            moves.append('down')\n        if j > 0:\n            moves.append('left')\n        if j < 2:\n            moves.append('right')\n        return moves\n\n    def solve(self):\n        open_list = [(self.initial_state, [])]\n        visited_states = []\n        while open_list:\n            state, path = open_list.pop(0)\n            if state == self.goal_state:\n                return path\n            for move in self.get_possible_moves(state):\n                new_state = self.move(state, move)\n                if new_state not in visited_states:\n                    open_list.append((new_state, path + [move]))\n                    visited_states.append(new_state)\n        return None\n```"
    ]
  },
  {
    "task_id": "ClassEval_41",
    "skeleton": "\nclass GomokuGame:\n    \"\"\"\n    This class is an implementation of a Gomoku game, supporting for making moves, checking for a winner, and checking if there are five consecutive symbols on the game board.\n    \"\"\"\n\n    def __init__(self, board_size):\n        \"\"\"\n        Initializes the game with a given board size.\n        It initializes the board with empty spaces and sets the current player symble as 'X'.\n        \"\"\"\n        self.board_size = board_size\n        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        \"\"\"\n        Makes a move at the given row and column.\n        If the move is valid, it places the current player's symbol on the board\n        and changes the current player to the other player (if the current player is 'X', then it becomes 'O' and vice versa).\n        :param row: int, the row index of this move\n        :param col: int, the column index\n        return: True if the move is valid, or False otherwise.\n        >>> gomokuGame = GomokuGame(10)\n        >>> gomokuGame.make_move(5, 5)\n        True\n        >>> gomokuGame.make_move(5, 5)\n        False\n        \"\"\"\n\n    def check_winner(self):\n        \"\"\"\n        Checks if there is a winner by looking for five in a row in all directions (horizontal, vertical, diagonal).\n        return: the symbol of the winning player (either 'X' or 'O') if there is a winner, or None otherwise.\n        >>> gomokuGame = GomokuGame(10)\n        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        >>> for move in moves:\n        ...     gomokuGame.make_move(move[0], move[1])\n        >>> gomokuGame.check_winner()\n        'X'\n        \"\"\"\n\n    def _check_five_in_a_row(self, row, col, direction):\n        \"\"\"\n        checks if there are five consecutive symbols of the same player in a row starting from a given cell in a given direction (horizontal, vertical, diagonal).\n        Counts the number of consecutive symbols in that direction starting from the given cell,\n        :param row: int, row of the given cell\n        :param col: int, column of the given cell\n        :param direction: tuple, (int, int), named as (dx, dy). Row and col will plus several dx and dy repectively.\n        :return: True if there are five consecutive symbols of the same player, and False otherwise.\n        >>> gomokuGame = GomokuGame(10)\n        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        >>> for move in moves:\n        ...     gomokuGame.make_move(move[0], move[1])\n        >>> gomokuGame._check_five_in_a_row(5, 1, (0, 1))\n        True\n        >>> gomokuGame._check_five_in_a_row(5, 1, (1, 1))\n        False\n        \"\"\"",
    "test": "import unittest\n\nclass GomokuGameTestMakeMove(unittest.TestCase):\n    def setUp(self) -> None:\n        self.board_size = 10\n        self.gomokuGame = GomokuGame(self.board_size)\n\n    def test_make_move_1(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        board[0][0] = 'X'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    # same position\n    def test_make_move_2(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(False, self.gomokuGame.make_move(0, 0))\n        board[0][0] = 'X'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    def test_make_move_3(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(True, self.gomokuGame.make_move(0, 1))\n        board[0][0] = 'X'\n        board[0][1] = 'O'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    def test_make_move_4(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(True, self.gomokuGame.make_move(0, 1))\n        self.assertEqual(False, self.gomokuGame.make_move(0, 0))\n        board[0][0] = 'X'\n        board[0][1] = 'O'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    def test_make_move_5(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(True, self.gomokuGame.make_move(0, 1))\n        self.assertEqual(False, self.gomokuGame.make_move(0, 1))\n        board[0][0] = 'X'\n        board[0][1] = 'O'\n        self.assertEqual(board, self.gomokuGame.board)\n\n\nclass GomokuGameTestCheckWinner(unittest.TestCase):\n    def test_check_winner_1(self):\n        gomokuGame = GomokuGame(10)\n        self.assertEqual(None, gomokuGame.check_winner())\n\n    def test_check_winner_2(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual('X', gomokuGame.check_winner())\n\n    def test_check_winner_3(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 0), (0, 4)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual('O', gomokuGame.check_winner())\n\n    def test_check_winner_4(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1), (0, 4)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual(gomokuGame.check_winner(), 'O')\n\n    def test_check_winner_5(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1), (0, 4), (5, 0)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual('O', gomokuGame.check_winner())\n\n\nclass GomokuGameTestCheckFiveInARow(unittest.TestCase):\n    def setUp(self) -> None:\n        self.gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        for move in moves:\n            self.gomokuGame.make_move(move[0], move[1])\n\n    def test_check_five_in_a_row_1(self):\n        self.assertEqual(True, self.gomokuGame._check_five_in_a_row(5, 5, (0, -1)))\n\n    def test_check_five_in_a_row_2(self):\n        self.assertEqual(True, self.gomokuGame._check_five_in_a_row(5, 1, (0, 1)))\n\n    def test_check_five_in_a_row_3(self):\n        self.assertEqual(False, self.gomokuGame._check_five_in_a_row(0, 0, (0, 1)))\n\n    def test_check_five_in_a_row_4(self):\n        self.assertEqual(False, self.gomokuGame._check_five_in_a_row(0, 0, (1, 0)))\n\n    def test_check_five_in_a_row_5(self):\n        self.assertEqual(False, self.gomokuGame._check_five_in_a_row(5, 5, (1, 0)))\n\nclass GomokuGameTestMain(unittest.TestCase):\n    def test_main(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        self.assertEqual(None, gomokuGame.check_winner())\n        for move in moves:\n            self.assertEqual(True, gomokuGame.make_move(move[0], move[1]))\n        self.assertEqual(False, gomokuGame.make_move(0, 0))\n        self.assertEqual(True, gomokuGame._check_five_in_a_row(5, 5, (0, -1)))\n        self.assertEqual('X', gomokuGame.check_winner())",
    "solution_code": "class GomokuGame:\n    def __init__(self, board_size):\n        self.board_size = board_size\n        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False\n\n    def check_winner(self):\n        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n        for row in range(self.board_size):\n            for col in range(self.board_size):\n                if self.board[row][col] != ' ':\n                    for direction in directions:\n                        if self._check_five_in_a_row(row, col, direction):\n                            return self.board[row][col]\n        return None\n\n    def _check_five_in_a_row(self, row, col, direction):\n        dx, dy = direction\n        count = 1\n        symbol = self.board[row][col]\n        for i in range(1, 5):\n            new_row = row + dx * i\n            new_col = col + dy * i\n            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):\n                return False\n            if self.board[new_row][new_col] != symbol:\n                return False\n            count += 1\n        return count == 5",
    "import_statement": [],
    "class_description": "    \"\"\"\n    This class is an implementation of a Gomoku game, supporting for making moves, checking for a winner, and checking if there are five consecutive symbols on the game board.\n    \"\"\"\n",
    "class_name": "GomokuGame",
    "test_classes": [
      "GomokuGameTestMakeMove",
      "GomokuGameTestCheckWinner",
      "GomokuGameTestCheckFiveInARow",
      "GomokuGameTestMain"
    ],
    "class_constructor": "class GomokuGame: \n    def __init__(self, board_size):\n        \"\"\"\n        Initializes the game with a given board size.\n        It initializes the board with empty spaces and sets the current player symble as 'X'.\n        \"\"\"\n        self.board_size = board_size\n        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]\n        self.current_player = 'X'\n\n",
    "fields": [
      "self.board",
      "self.board_size",
      "self.current_player"
    ],
    "methods_info": [
      {
        "method_name": "make_move",
        "method_description": "def make_move(self, row, col):\n        \"\"\"\n        Makes a move at the given row and column.\n        If the move is valid, it places the current player's symbol on the board\n        and changes the current player to the other player (if the current player is 'X', then it becomes 'O' and vice versa).\n        :param row: int, the row index of this move\n        :param col: int, the column index\n        return: True if the move is valid, or False otherwise.\n        >>> gomokuGame = GomokuGame(10)\n        >>> gomokuGame.make_move(5, 5)\n        True\n        >>> gomokuGame.make_move(5, 5)\n        False\n        \"\"\"",
        "test_class": "GomokuGameTestMakeMove",
        "test_code": "class GomokuGameTestMakeMove(unittest.TestCase):\n    def setUp(self) -> None:\n        self.board_size = 10\n        self.gomokuGame = GomokuGame(self.board_size)\n\n    def test_make_move_1(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        board[0][0] = 'X'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    # same position\n    def test_make_move_2(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(False, self.gomokuGame.make_move(0, 0))\n        board[0][0] = 'X'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    def test_make_move_3(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(True, self.gomokuGame.make_move(0, 1))\n        board[0][0] = 'X'\n        board[0][1] = 'O'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    def test_make_move_4(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(True, self.gomokuGame.make_move(0, 1))\n        self.assertEqual(False, self.gomokuGame.make_move(0, 0))\n        board[0][0] = 'X'\n        board[0][1] = 'O'\n        self.assertEqual(board, self.gomokuGame.board)\n\n    def test_make_move_5(self):\n        board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]\n        self.assertEqual(True, self.gomokuGame.make_move(0, 0))\n        self.assertEqual(True, self.gomokuGame.make_move(0, 1))\n        self.assertEqual(False, self.gomokuGame.make_move(0, 1))\n        board[0][0] = 'X'\n        board[0][1] = 'O'\n        self.assertEqual(board, self.gomokuGame.board)",
        "solution_code": "def make_move(self, row, col):\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board",
            "self.current_player"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "check_winner",
        "method_description": "def check_winner(self):\n        \"\"\"\n        Checks if there is a winner by looking for five in a row in all directions (horizontal, vertical, diagonal).\n        return: the symbol of the winning player (either 'X' or 'O') if there is a winner, or None otherwise.\n        >>> gomokuGame = GomokuGame(10)\n        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        >>> for move in moves:\n        ...     gomokuGame.make_move(move[0], move[1])\n        >>> gomokuGame.check_winner()\n        'X'\n        \"\"\"",
        "test_class": "GomokuGameTestCheckWinner",
        "test_code": "class GomokuGameTestCheckWinner(unittest.TestCase):\n    def test_check_winner_1(self):\n        gomokuGame = GomokuGame(10)\n        self.assertEqual(None, gomokuGame.check_winner())\n\n    def test_check_winner_2(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual('X', gomokuGame.check_winner())\n\n    def test_check_winner_3(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 0), (0, 4)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual('O', gomokuGame.check_winner())\n\n    def test_check_winner_4(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1), (0, 4)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual(gomokuGame.check_winner(), 'O')\n\n    def test_check_winner_5(self):\n        gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1), (0, 4), (5, 0)]\n        for move in moves:\n            gomokuGame.make_move(move[0], move[1])\n        self.assertEqual('O', gomokuGame.check_winner())",
        "solution_code": "def check_winner(self):\n        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n        for row in range(self.board_size):\n            for col in range(self.board_size):\n                if self.board[row][col] != ' ':\n                    for direction in directions:\n                        if self._check_five_in_a_row(row, col, direction):\n                            return self.board[row][col]\n        return None",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board",
            "self.board_size"
          ],
          "method_dependencies": [
            "_check_five_in_a_row"
          ]
        }
      },
      {
        "method_name": "_check_five_in_a_row",
        "method_description": "def _check_five_in_a_row(self, row, col, direction):\n        \"\"\"\n        checks if there are five consecutive symbols of the same player in a row starting from a given cell in a given direction (horizontal, vertical, diagonal).\n        Counts the number of consecutive symbols in that direction starting from the given cell,\n        :param row: int, row of the given cell\n        :param col: int, column of the given cell\n        :param direction: tuple, (int, int), named as (dx, dy). Row and col will plus several dx and dy repectively.\n        :return: True if there are five consecutive symbols of the same player, and False otherwise.\n        >>> gomokuGame = GomokuGame(10)\n        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        >>> for move in moves:\n        ...     gomokuGame.make_move(move[0], move[1])\n        >>> gomokuGame._check_five_in_a_row(5, 1, (0, 1))\n        True\n        >>> gomokuGame._check_five_in_a_row(5, 1, (1, 1))\n        False\n        \"\"\"",
        "test_class": "GomokuGameTestCheckFiveInARow",
        "test_code": "class GomokuGameTestCheckFiveInARow(unittest.TestCase):\n    def setUp(self) -> None:\n        self.gomokuGame = GomokuGame(10)\n        moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]\n        for move in moves:\n            self.gomokuGame.make_move(move[0], move[1])\n\n    def test_check_five_in_a_row_1(self):\n        self.assertEqual(True, self.gomokuGame._check_five_in_a_row(5, 5, (0, -1)))\n\n    def test_check_five_in_a_row_2(self):\n        self.assertEqual(True, self.gomokuGame._check_five_in_a_row(5, 1, (0, 1)))\n\n    def test_check_five_in_a_row_3(self):\n        self.assertEqual(False, self.gomokuGame._check_five_in_a_row(0, 0, (0, 1)))\n\n    def test_check_five_in_a_row_4(self):\n        self.assertEqual(False, self.gomokuGame._check_five_in_a_row(0, 0, (1, 0)))\n\n    def test_check_five_in_a_row_5(self):\n        self.assertEqual(False, self.gomokuGame._check_five_in_a_row(5, 5, (1, 0)))",
        "solution_code": "def _check_five_in_a_row(self, row, col, direction):\n        dx, dy = direction\n        count = 1\n        symbol = self.board[row][col]\n        for i in range(1, 5):\n            new_row = row + dx * i\n            new_col = col + dy * i\n            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):\n                return False\n            if self.board[new_row][new_col] != symbol:\n                return False\n            count += 1\n        return count == 5",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board",
            "self.board_size"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\ndef make_move(self, row, col):\n    if self.board[row][col] == ' ':\n        self.board[row][col] = self.current_player\n        self.current_player = 'O' if self.current_player == 'X' else 'X'\n        return True\n    else:\n        return False\n\ndef check_winner(self):\n    for row in range(self.board_size):\n        for col in range(self.board_size):\n            if self.board[row][col] != ' ':\n                for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n                    if self._check_five_in_a_row(row, col, direction):\n                        return self.board[row][col]\n    return None\n\ndef _check_five_in_a_row(self, row, col, direction):\n    dx, dy = direction\n    for _ in range(5):\n        if row < 0 or row >= self.board_size or col < 0 or col >= self.board_size:\n            return False\n        if self.board[row][col] != self.board[row - dx][col - dy]:\n            return False\n        row += dx\n        col += dy\n    return True\n```\nThis code completes the GomokuGame class. The `make_move` method places the current player's symbol on the board at the given row and column if the cell is empty and then switches the current player. The `check_winner` method checks all cells on the board for a winner by looking for five in a row in all directions. The `_check_five_in_a_row` method checks if there are five consecutive symbols of the same player in a row starting from a given cell in a given direction."
    ]
  },
  {
    "task_id": "ClassEval_54",
    "skeleton": "\nimport random\n\nclass MahjongConnect:\n    \"\"\"\n    MahjongConnect is a class representing a game board for Mahjong Connect with features like creating the board, checking valid moves, finding paths, removing icons, and checking if the game is over.\n    \"\"\"\n\n    def __init__(self, BOARD_SIZE, ICONS):\n        \"\"\"\n        initialize the board size and the icon list, create the game board\n        :param BOARD_SIZE: list of two integer numbers, representing the number of rows and columns of the game board\n        :param ICONS: list of string, representing the icons\n        >>>mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.BOARD_SIZE = [4, 4]\n        mc.ICONS = ['a', 'b', 'c']\n        mc.board = mc.create_board()\n        \"\"\"\n        self.BOARD_SIZE = BOARD_SIZE\n        self.ICONS = ICONS\n        self.board = self.create_board()\n\n    def create_board(self):\n        \"\"\"\n        create the game board with the given board size and icons\n        :return: 2-dimensional list, the game board\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        >>> mc.create_board()\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        \"\"\"\n\n    def is_valid_move(self, pos1, pos2):\n        \"\"\"\n        check if the move of two icons is valid (i.e. positions are within the game board range, the two positions are not the same, the two positions have the same icon, and there is a valid path between the two positions)\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return:True or False ,representing whether the move of two icons is valid\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.is_valid_move((0, 0), (1, 0))\n        True\n        \"\"\"\n\n\n    def has_path(self, pos1, pos2):\n        \"\"\"\n        check if there is a path between two icons\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return: True or False ,representing whether there is a path between two icons\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.is_valid_move((0, 0), (1, 0))\n        True\n        \"\"\"\n\n\n    def remove_icons(self, pos1, pos2):\n        \"\"\"\n        remove the connected icons on the game board\n        :param pos1: position tuple(x, y) of the first icon to be removed\n        :param pos2: position tuple(x, y) of the second icon to be removed\n        :return: None\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.remove_icons((0, 0), (1, 0))\n        mc.board = [[' ', 'b', 'c', 'a'],\n                    [' ', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        \"\"\"\n\n\n    def is_game_over(self):\n        \"\"\"\n        Check if the game is over (i.e., if there are no more icons on the game board)\n        :return: True or False ,representing whether the game is over\n        >>> mc = MahjongConnect([4, 4] ['a', 'b', 'c'])\n        >>> mc.board = [[' ', ' ', ' ', ' '],\n        >>>         [' ', ' ', ' ', ' '],\n        >>>         [' ', ' ', ' ', ' '],\n        >>>         [' ', ' ', ' ', ' ']]\n        >>> mc.is_game_over()\n        True\n        \"\"\"",
    "test": "import unittest\n\n\nclass MahjongConnectTestCreateBoard(unittest.TestCase):\n    def test_create_board_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [4, 4])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_2(self):\n        mc = MahjongConnect([2, 2], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [2, 2])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_3(self):\n        mc = MahjongConnect([3, 3], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [3, 3])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_4(self):\n        mc = MahjongConnect([1, 1], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [1, 1])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_5(self):\n        mc = MahjongConnect([5, 5], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [5, 5])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n\nclass MahjongConnectTestIsValidMove(unittest.TestCase):\n    def test_is_valid_move_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (1, 0))\n        self.assertEqual(res, True)\n\n    def test_is_valid_move_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (0, 1))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((-1, 0), (0, 1))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (0, 0))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((300, 0), (0, 0))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_6(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'a', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 2), (0, 0))\n        self.assertEqual(res, False)\n\n\nclass MahjongConnectTestHasPath(unittest.TestCase):\n    def test_has_path_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (1, 0))\n        self.assertEqual(res, True)\n\n    def test_has_path_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (0, 0))\n        self.assertEqual(res, True)\n\n    def test_has_path_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (3, 0))\n        self.assertEqual(res, True)\n\n    def test_has_path_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (1, 1))\n        self.assertEqual(res, False)\n\n    def test_has_path_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((300, 0), (1, 1))\n        self.assertEqual(res, False)\n\n    def test_has_path_6(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'a', 'a', 'a'],\n                    ['a', 'a', 'a', 'a'],\n                    ['a', 'a', 'a', 'a'],\n                    ['a', 'a', 'a', 'a']]\n        res = mc.has_path((0, 0), (3, 3))\n        self.assertEqual(res, True)\n\n\nclass MahjongConnectTestRemoveIcons(unittest.TestCase):\n    def test_remove_icons_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((0, 0), (1, 0))\n        self.assertEqual(mc.board, [[' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n    def test_remove_icons_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((2, 0), (1, 0))\n        self.assertEqual(mc.board, [['a', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n    def test_remove_icons_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((1, 1), (0, 1))\n        self.assertEqual(mc.board, [['a', ' ', 'c', 'a'],\n                                    ['a', ' ', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n    def test_remove_icons_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((3, 0), (2, 0))\n        self.assertEqual(mc.board, [['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a']])\n\n    def test_remove_icons_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((3, 3), (2, 3))\n        self.assertEqual(mc.board, [['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', ' '],\n                                    ['a', 'b', 'c', ' ']])\n\n\nclass MahjongConnectTestIsGameOver(unittest.TestCase):\n    def test_is_game_over_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [[' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, True)\n\n    def test_is_game_over_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', ' ', ' ', ' '],\n                    ['a', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n    def test_is_game_over_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [[' ', ' ', ' ', ' '],\n                    ['a', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n    def test_is_game_over_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['1', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n    def test_is_game_over_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n\nclass MahjongConnectTest(unittest.TestCase):\n    def test_mahjongconnect(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [4, 4])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (1, 0))\n        self.assertEqual(res, True)\n\n        res = mc.has_path((0, 0), (1, 0))\n        self.assertEqual(res, True)\n\n        mc.remove_icons((0, 0), (1, 0))\n        self.assertEqual(mc.board, [[' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n        mc.board = [[' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, True)",
    "solution_code": "import random\n\n\nclass MahjongConnect:\n    def __init__(self, BOARD_SIZE, ICONS):\n        self.BOARD_SIZE = BOARD_SIZE\n        self.ICONS = ICONS\n        self.board = self.create_board()\n\n    def create_board(self):\n        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]\n        return board\n\n    def is_valid_move(self, pos1, pos2):\n        x1, y1 = pos1\n        x2, y2 = pos2\n\n        # Check if positions are within the game board range\n        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[\n            0] and 0 <= y2 <\n                self.BOARD_SIZE[1]):\n            return False\n\n        # Check if the two positions are the same\n        if pos1 == pos2:\n            return False\n\n        # Check if the two positions have the same icon\n        if self.board[x1][y1] != self.board[x2][y2]:\n            return False\n\n        # Check if there is a valid path between the two positions\n        if not self.has_path(pos1, pos2):\n            return False\n\n        return True\n\n    def has_path(self, pos1, pos2):\n        visited = set()\n        stack = [pos1]\n\n        while stack:\n            current_pos = stack.pop()\n            if current_pos == pos2:\n                return True\n\n            if current_pos in visited:\n                continue\n\n            visited.add(current_pos)\n            x, y = current_pos\n\n            # Check adjacent positions (up, down, left, right)\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:\n                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:\n                        stack.append((new_x, new_y))\n\n        return False\n\n    def remove_icons(self, pos1, pos2):\n        x1, y1 = pos1\n        x2, y2 = pos2\n        self.board[x1][y1] = ' '\n        self.board[x2][y2] = ' '\n\n    def is_game_over(self):\n        for row in self.board:\n            if any(icon != ' ' for icon in row):\n                return False\n        return True",
    "import_statement": [
      "import random"
    ],
    "class_description": "    \"\"\"\n    MahjongConnect is a class representing a game board for Mahjong Connect with features like creating the board, checking valid moves, finding paths, removing icons, and checking if the game is over.\n    \"\"\"\n",
    "class_name": "MahjongConnect",
    "test_classes": [
      "MahjongConnectTestCreateBoard",
      "MahjongConnectTestIsValidMove",
      "MahjongConnectTestHasPath",
      "MahjongConnectTestRemoveIcons",
      "MahjongConnectTestIsGameOver",
      "MahjongConnectTest"
    ],
    "class_constructor": "class MahjongConnect: \n    def __init__(self, BOARD_SIZE, ICONS):\n        \"\"\"\n        initialize the board size and the icon list, create the game board\n        :param BOARD_SIZE: list of two integer numbers, representing the number of rows and columns of the game board\n        :param ICONS: list of string, representing the icons\n        >>>mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.BOARD_SIZE = [4, 4]\n        mc.ICONS = ['a', 'b', 'c']\n        mc.board = mc.create_board()\n        \"\"\"\n        self.BOARD_SIZE = BOARD_SIZE\n        self.ICONS = ICONS\n        self.board = self.create_board()\n\n",
    "fields": [
      "self.BOARD_SIZE",
      "self.ICONS",
      "self.board"
    ],
    "methods_info": [
      {
        "method_name": "create_board",
        "method_description": "def create_board(self):\n        \"\"\"\n        create the game board with the given board size and icons\n        :return: 2-dimensional list, the game board\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        >>> mc.create_board()\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        \"\"\"",
        "test_class": "MahjongConnectTestCreateBoard",
        "test_code": "class MahjongConnectTestCreateBoard(unittest.TestCase):\n    def test_create_board_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [4, 4])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_2(self):\n        mc = MahjongConnect([2, 2], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [2, 2])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_3(self):\n        mc = MahjongConnect([3, 3], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [3, 3])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_4(self):\n        mc = MahjongConnect([1, 1], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [1, 1])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)\n\n    def test_create_board_5(self):\n        mc = MahjongConnect([5, 5], ['a', 'b', 'c'])\n        self.assertEqual(mc.BOARD_SIZE, [5, 5])\n        self.assertEqual(mc.ICONS, ['a', 'b', 'c'])\n        for row in mc.board:\n            for icon in row:\n                self.assertIn(icon, mc.ICONS)",
        "solution_code": "def create_board(self):\n        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]\n        return board",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "random"
          ],
          "field_dependencies": [
            "self.BOARD_SIZE",
            "self.ICONS"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "is_valid_move",
        "method_description": "def is_valid_move(self, pos1, pos2):\n        \"\"\"\n        check if the move of two icons is valid (i.e. positions are within the game board range, the two positions are not the same, the two positions have the same icon, and there is a valid path between the two positions)\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return:True or False ,representing whether the move of two icons is valid\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.is_valid_move((0, 0), (1, 0))\n        True\n        \"\"\"",
        "test_class": "MahjongConnectTestIsValidMove",
        "test_code": "class MahjongConnectTestIsValidMove(unittest.TestCase):\n    def test_is_valid_move_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (1, 0))\n        self.assertEqual(res, True)\n\n    def test_is_valid_move_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (0, 1))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((-1, 0), (0, 1))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 0), (0, 0))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((300, 0), (0, 0))\n        self.assertEqual(res, False)\n\n    def test_is_valid_move_6(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'a', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.is_valid_move((0, 2), (0, 0))\n        self.assertEqual(res, False)",
        "solution_code": "def is_valid_move(self, pos1, pos2):\n        x1, y1 = pos1\n        x2, y2 = pos2\n\n        # Check if positions are within the game board range\n        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[\n            0] and 0 <= y2 <\n                self.BOARD_SIZE[1]):\n            return False\n\n        # Check if the two positions are the same\n        if pos1 == pos2:\n            return False\n\n        # Check if the two positions have the same icon\n        if self.board[x1][y1] != self.board[x2][y2]:\n            return False\n\n        # Check if there is a valid path between the two positions\n        if not self.has_path(pos1, pos2):\n            return False\n\n        return True",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.BOARD_SIZE",
            "self.board"
          ],
          "method_dependencies": [
            "has_path"
          ]
        }
      },
      {
        "method_name": "has_path",
        "method_description": "def has_path(self, pos1, pos2):\n        \"\"\"\n        check if there is a path between two icons\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return: True or False ,representing whether there is a path between two icons\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.is_valid_move((0, 0), (1, 0))\n        True\n        \"\"\"",
        "test_class": "MahjongConnectTestHasPath",
        "test_code": "class MahjongConnectTestHasPath(unittest.TestCase):\n    def test_has_path_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (1, 0))\n        self.assertEqual(res, True)\n\n    def test_has_path_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (0, 0))\n        self.assertEqual(res, True)\n\n    def test_has_path_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (3, 0))\n        self.assertEqual(res, True)\n\n    def test_has_path_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((0, 0), (1, 1))\n        self.assertEqual(res, False)\n\n    def test_has_path_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        res = mc.has_path((300, 0), (1, 1))\n        self.assertEqual(res, False)\n\n    def test_has_path_6(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'a', 'a', 'a'],\n                    ['a', 'a', 'a', 'a'],\n                    ['a', 'a', 'a', 'a'],\n                    ['a', 'a', 'a', 'a']]\n        res = mc.has_path((0, 0), (3, 3))\n        self.assertEqual(res, True)",
        "solution_code": "def has_path(self, pos1, pos2):\n        visited = set()\n        stack = [pos1]\n\n        while stack:\n            current_pos = stack.pop()\n            if current_pos == pos2:\n                return True\n\n            if current_pos in visited:\n                continue\n\n            visited.add(current_pos)\n            x, y = current_pos\n\n            # Check adjacent positions (up, down, left, right)\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:\n                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:\n                        stack.append((new_x, new_y))\n\n        return False",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.BOARD_SIZE",
            "self.board"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "remove_icons",
        "method_description": "def remove_icons(self, pos1, pos2):\n        \"\"\"\n        remove the connected icons on the game board\n        :param pos1: position tuple(x, y) of the first icon to be removed\n        :param pos2: position tuple(x, y) of the second icon to be removed\n        :return: None\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.remove_icons((0, 0), (1, 0))\n        mc.board = [[' ', 'b', 'c', 'a'],\n                    [' ', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        \"\"\"",
        "test_class": "MahjongConnectTestRemoveIcons",
        "test_code": "class MahjongConnectTestRemoveIcons(unittest.TestCase):\n    def test_remove_icons_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((0, 0), (1, 0))\n        self.assertEqual(mc.board, [[' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n    def test_remove_icons_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((2, 0), (1, 0))\n        self.assertEqual(mc.board, [['a', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n    def test_remove_icons_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((1, 1), (0, 1))\n        self.assertEqual(mc.board, [['a', ' ', 'c', 'a'],\n                                    ['a', ' ', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a']])\n\n    def test_remove_icons_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((3, 0), (2, 0))\n        self.assertEqual(mc.board, [['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a'],\n                                    [' ', 'b', 'c', 'a']])\n\n    def test_remove_icons_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        mc.remove_icons((3, 3), (2, 3))\n        self.assertEqual(mc.board, [['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', 'a'],\n                                    ['a', 'b', 'c', ' '],\n                                    ['a', 'b', 'c', ' ']])",
        "solution_code": "def remove_icons(self, pos1, pos2):\n        x1, y1 = pos1\n        x2, y2 = pos2\n        self.board[x1][y1] = ' '\n        self.board[x2][y2] = ' '",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "is_game_over",
        "method_description": "def is_game_over(self):\n        \"\"\"\n        Check if the game is over (i.e., if there are no more icons on the game board)\n        :return: True or False ,representing whether the game is over\n        >>> mc = MahjongConnect([4, 4] ['a', 'b', 'c'])\n        >>> mc.board = [[' ', ' ', ' ', ' '],\n        >>>         [' ', ' ', ' ', ' '],\n        >>>         [' ', ' ', ' ', ' '],\n        >>>         [' ', ' ', ' ', ' ']]\n        >>> mc.is_game_over()\n        True\n        \"\"\"",
        "test_class": "MahjongConnectTestIsGameOver",
        "test_code": "class MahjongConnectTestIsGameOver(unittest.TestCase):\n    def test_is_game_over_1(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [[' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, True)\n\n    def test_is_game_over_2(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', ' ', ' ', ' '],\n                    ['a', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n    def test_is_game_over_3(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [[' ', ' ', ' ', ' '],\n                    ['a', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n    def test_is_game_over_4(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['1', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)\n\n    def test_is_game_over_5(self):\n        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' '],\n                    [' ', ' ', ' ', ' ']]\n        res = mc.is_game_over()\n        self.assertEqual(res, False)",
        "solution_code": "def is_game_over(self):\n        for row in self.board:\n            if any(icon != ' ' for icon in row):\n                return False\n        return True",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nimport random\n\nclass MahjongConnect:\n    def __init__(self, BOARD_SIZE, ICONS):\n        self.BOARD_SIZE = BOARD_SIZE\n        self.ICONS = ICONS\n        self.board = self.create_board()\n\n    def create_board(self):\n        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]\n        return board\n\n    def print_board(self):\n        for row in self.board:\n            print(' '.join(row))\n\n    def is_valid_move(self, pos1, pos2):\n        if pos1 == pos2:\n            return False\n        if not (0 <= pos1[0] < self.BOARD_SIZE[0] and 0 <= pos1[1] < self.BOARD_SIZE[1]):\n            return False\n        if not (0 <= pos2[0] < self.BOARD_SIZE[0] and 0 <= pos2[1] < self.BOARD_SIZE[1]):\n            return False\n        if self.board[pos1[0]][pos1[1]] != self.board[pos2[0]][pos2[1]]:\n            return False\n        return self.has_path(pos1, pos2)\n\n    def has_path(self, pos1, pos2):\n        # This is a placeholder. In a real game, you would need to implement a pathfinding algorithm here.\n        return True\n\n    def remove_icons(self, pos1, pos2):\n        if self.is_valid_move(pos1, pos2):\n            self.board[pos1[0]][pos1[1]] = ' '\n            self.board[pos2[0]][pos2[1]] = ' '\n\n    def is_game_over(self):\n        for row in self.board:\n            for icon in row:\n                if icon != ' ':\n                    return False\n        return True\n```"
    ]
  },
  {
    "task_id": "ClassEval_58",
    "skeleton": "\nimport random\n\nclass MinesweeperGame:\n    \"\"\"\n    This is a class that implements mine sweeping games including minesweeping and winning judgment.\n    \"\"\"\n\n    def __init__(self, n, k) -> None:\n        \"\"\"\n        Initializes the MinesweeperGame class with the size of the board and the number of mines.\n        :param n: The size of the board, int.\n        :param k: The number of mines, int.\n        \"\"\"\n        self.n = n\n        self.k = k\n        self.minesweeper_map = self.generate_mine_sweeper_map()\n        self.player_map = self.generate_playerMap()\n        self.score = 0\n\n    def generate_mine_sweeper_map(self):\n        \"\"\"\n        Generates a minesweeper map with the given size of the board and the number of mines,the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'X' represents the mine,other numbers represent the number of mines around the position.\n        :return: The minesweeper map, list.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.generate_mine_sweeper_map()\n        [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n\n        \"\"\"\n\n    def generate_playerMap(self):\n        \"\"\"\n        Generates a player map with the given size of the board, the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'-' represents the unknown position.\n        :return: The player map, list.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.generate_playerMap()\n        [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n\n        \"\"\"\n\n    def check_won(self,map):\n        \"\"\"\n        Checks whether the player has won the game,if there are just mines in the player map,return True,otherwise return False.\n        :return: True if the player has won the game, False otherwise.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        >>> minesweeper_game.check_won(minesweeper_game.player_map)\n        False\n\n        \"\"\"\n\n    def sweep(self, x, y):\n        \"\"\"\n        Sweeps the given position.\n        :param x: The x coordinate of the position, int.\n        :param y: The y coordinate of the position, int.\n        :return: True if the player has won the game, False otherwise,if the game still continues, return the player map, list.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        >>> minesweeper_game.sweep(1, 1)\n        [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]\n\n        \"\"\"",
    "test": "import unittest\n\nclass MinesweeperGameTestGenerateMineSweeperMap(unittest.TestCase):\n    def test_generate_mine_sweeper_map(self):\n        minesweeper_game = MinesweeperGame(3, 2)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(2, mine_num)\n\n    def test_generate_mine_sweeper_map_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(1, mine_num)\n\n    def test_generate_mine_sweeper_map_3(self):\n        minesweeper_game = MinesweeperGame(3, 0)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(0, mine_num)\n\n    def test_generate_mine_sweeper_map_4(self):\n        minesweeper_game = MinesweeperGame(5, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(length,5)\n        self.assertEqual(mine_num, 1)\n\n    def test_generate_mine_sweeper_map_5(self):\n        minesweeper_game = MinesweeperGame(4, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(length, 4)\n        self.assertEqual(mine_num, 1)\n\nclass MinesweeperGameTestGeneratePlayerMap(unittest.TestCase):\n    def test_generate_playerMap(self):\n        minesweeper_game = MinesweeperGame(3, 2)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])\n\n    def test_generate_playerMap_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])\n\n    def test_generate_playerMap_3(self):\n        minesweeper_game = MinesweeperGame(4, 2)\n        self.assertEqual(minesweeper_game.generate_playerMap(),[['-', '-', '-', '-'],['-', '-', '-', '-'],['-', '-', '-', '-'],['-', '-', '-', '-']])\n\n    def test_generate_playerMap_4(self):\n        minesweeper_game = MinesweeperGame(1, 4)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-']])\n\n    def test_generate_playerMap_5(self):\n        minesweeper_game = MinesweeperGame(2, 5)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-'], ['-', '-']])\n\nclass MinesweeperGameTestCheckWon(unittest.TestCase):\n    def test_check_won(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\n    def test_check_won_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\n    def test_check_won_3(self):\n        minesweeper_game = MinesweeperGame(3, 0)\n        minesweeper_game.minesweeper_map = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\n    def test_check_won_4(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '1', '0'], ['1', 1, '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), True)\n\n    def test_check_won_5(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['X', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\nclass MinesweeperGameTestSweep(unittest.TestCase):\n    def test_sweep(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.sweep(1,1), [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']])\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_sweep_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.sweep(0,0), False)\n        self.assertEqual(minesweeper_game.score, 0)\n\n    def test_sweep_3(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '0'], ['1', '1', '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.sweep(0,1), True)\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_sweep_4(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.sweep(0,2), [['-', '-', 0], ['-', '-', '0'], ['0', '0', '0']])\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_sweep_5(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '0'], ['-', '1', '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.sweep(1,0), [['-', '-', '0'], [1, '1', '0'], ['0', '0', '0']])\n        self.assertEqual(minesweeper_game.score, 1)\n\nclass MinesweeperGameTestMain(unittest.TestCase):\n    def test_minesweeper_main(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(1, mine_num)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n        self.assertEqual(minesweeper_game.sweep(1,1), [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']])\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_minesweeper_main_2(self):\n        minesweeper_game = MinesweeperGame(3, 2)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(2, mine_num)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])\n        minesweeper_game.minesweeper_map = [['X', 1, 1], [1, 'X', 1], [1, 1, 1]]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n        self.assertEqual(minesweeper_game.sweep(0, 1), [['-', 1, '-'], ['-','-', '-'], ['-', '-', '-']])\n        self.assertEqual(minesweeper_game.score, 1)\n        self.assertEqual(minesweeper_game.sweep(0, 2), [['-', 1, 1], ['-', '-', '-'], ['-', '-', '-']])\n        self.assertEqual(minesweeper_game.score, 2)",
    "solution_code": "import random\n\nclass MinesweeperGame:\n    def __init__(self, n, k) -> None:\n        self.n = n\n        self.k = k\n        self.minesweeper_map = self.generate_mine_sweeper_map()\n        self.player_map = self.generate_playerMap()\n        self.score = 0\n\n    def generate_mine_sweeper_map(self):\n        arr = [[0 for row in range(self.n)] for column in range(self.n)]\n        for num in range(self.k):\n            x = random.randint(0, self.n-1)\n            y = random.randint(0, self.n-1)\n            arr[y][x] = 'X'\n            if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-1):\n                if arr[y][x+1] != 'X':\n                    arr[y][x+1] += 1\n            if (x >=1 and x <= self.n-1) and (y >= 0 and y <= self.n-1):\n                if arr[y][x-1] != 'X':\n                    arr[y][x-1] += 1\n            if (x >= 1 and x <= self.n-1) and (y >= 1 and y <= self.n-1):\n                if arr[y-1][x-1] != 'X':\n                    arr[y-1][x-1] += 1\n    \n            if (x >= 0 and x <= self.n-2) and (y >= 1 and y <= self.n-1):\n                if arr[y-1][x+1] != 'X':\n                    arr[y-1][x+1] += 1 \n            if (x >= 0 and x <= self.n-1) and (y >= 1 and y <= self.n-1):\n                if arr[y-1][x] != 'X':\n                    arr[y-1][x] += 1\n    \n            if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-2):\n                if arr[y+1][x+1] != 'X':\n                    arr[y+1][x+1] += 1\n            if (x >= 1 and x <= self.n-1) and (y >= 0 and y <= self.n-2):\n                if arr[y+1][x-1] != 'X':\n                    arr[y+1][x-1] += 1\n            if (x >= 0 and x <= self.n-1) and (y >= 0 and y <= self.n-2):\n                if arr[y+1][x] != 'X':\n                    arr[y+1][x] += 1\n        return arr\n    \n    def generate_playerMap(self):\n        arr = [['-' for row in range(self.n)] for column in range(self.n)]\n        return arr\n\n    def check_won(self, map):\n        for i in range(self.n):\n            for j in range(self.n):\n                if map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':\n                    return False\n        return True\n    \n    def sweep(self, x, y):\n\n        if (self.minesweeper_map[x][y] == 'X'):\n            return False\n        else:\n            self.player_map[x][y] = self.minesweeper_map[x][y]\n            self.score += 1\n            if self.check_won(self.player_map) == True:\n                return True\n            return self.player_map",
    "import_statement": [
      "import random"
    ],
    "class_description": "    \"\"\"\n    This is a class that implements mine sweeping games including minesweeping and winning judgment.\n    \"\"\"\n",
    "class_name": "MinesweeperGame",
    "test_classes": [
      "MinesweeperGameTestGenerateMineSweeperMap",
      "MinesweeperGameTestGeneratePlayerMap",
      "MinesweeperGameTestCheckWon",
      "MinesweeperGameTestSweep",
      "MinesweeperGameTestMain"
    ],
    "class_constructor": "class MinesweeperGame: \n    def __init__(self, n, k) -> None:\n        \"\"\"\n        Initializes the MinesweeperGame class with the size of the board and the number of mines.\n        :param n: The size of the board, int.\n        :param k: The number of mines, int.\n        \"\"\"\n        self.n = n\n        self.k = k\n        self.minesweeper_map = self.generate_mine_sweeper_map()\n        self.player_map = self.generate_playerMap()\n        self.score = 0\n\n",
    "fields": [
      "self.k",
      "self.minesweeper_map",
      "self.n",
      "self.player_map",
      "self.score"
    ],
    "methods_info": [
      {
        "method_name": "generate_mine_sweeper_map",
        "method_description": "def generate_mine_sweeper_map(self):\n        \"\"\"\n        Generates a minesweeper map with the given size of the board and the number of mines,the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'X' represents the mine,other numbers represent the number of mines around the position.\n        :return: The minesweeper map, list.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.generate_mine_sweeper_map()\n        [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n\n        \"\"\"",
        "test_class": "MinesweeperGameTestGenerateMineSweeperMap",
        "test_code": "class MinesweeperGameTestGenerateMineSweeperMap(unittest.TestCase):\n    def test_generate_mine_sweeper_map(self):\n        minesweeper_game = MinesweeperGame(3, 2)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(2, mine_num)\n\n    def test_generate_mine_sweeper_map_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(1, mine_num)\n\n    def test_generate_mine_sweeper_map_3(self):\n        minesweeper_game = MinesweeperGame(3, 0)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(3, length)\n        self.assertEqual(0, mine_num)\n\n    def test_generate_mine_sweeper_map_4(self):\n        minesweeper_game = MinesweeperGame(5, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(length,5)\n        self.assertEqual(mine_num, 1)\n\n    def test_generate_mine_sweeper_map_5(self):\n        minesweeper_game = MinesweeperGame(4, 1)\n        length = len(minesweeper_game.minesweeper_map)\n        mine_num = 0\n        for row in minesweeper_game.minesweeper_map:\n            for cell in row:\n                if cell == 'X':\n                    mine_num += 1\n        self.assertEqual(length, 4)\n        self.assertEqual(mine_num, 1)",
        "solution_code": "def generate_mine_sweeper_map(self):\n        arr = [[0 for row in range(self.n)] for column in range(self.n)]\n        for num in range(self.k):\n            x = random.randint(0, self.n-1)\n            y = random.randint(0, self.n-1)\n            arr[y][x] = 'X'\n            if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-1):\n                if arr[y][x+1] != 'X':\n                    arr[y][x+1] += 1\n            if (x >=1 and x <= self.n-1) and (y >= 0 and y <= self.n-1):\n                if arr[y][x-1] != 'X':\n                    arr[y][x-1] += 1\n            if (x >= 1 and x <= self.n-1) and (y >= 1 and y <= self.n-1):\n                if arr[y-1][x-1] != 'X':\n                    arr[y-1][x-1] += 1\n    \n            if (x >= 0 and x <= self.n-2) and (y >= 1 and y <= self.n-1):\n                if arr[y-1][x+1] != 'X':\n                    arr[y-1][x+1] += 1 \n            if (x >= 0 and x <= self.n-1) and (y >= 1 and y <= self.n-1):\n                if arr[y-1][x] != 'X':\n                    arr[y-1][x] += 1\n    \n            if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-2):\n                if arr[y+1][x+1] != 'X':\n                    arr[y+1][x+1] += 1\n            if (x >= 1 and x <= self.n-1) and (y >= 0 and y <= self.n-2):\n                if arr[y+1][x-1] != 'X':\n                    arr[y+1][x-1] += 1\n            if (x >= 0 and x <= self.n-1) and (y >= 0 and y <= self.n-2):\n                if arr[y+1][x] != 'X':\n                    arr[y+1][x] += 1\n        return arr",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "random"
          ],
          "field_dependencies": [
            "self.k",
            "self.n"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "generate_playerMap",
        "method_description": "def generate_playerMap(self):\n        \"\"\"\n        Generates a player map with the given size of the board, the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'-' represents the unknown position.\n        :return: The player map, list.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.generate_playerMap()\n        [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n\n        \"\"\"",
        "test_class": "MinesweeperGameTestGeneratePlayerMap",
        "test_code": "class MinesweeperGameTestGeneratePlayerMap(unittest.TestCase):\n    def test_generate_playerMap(self):\n        minesweeper_game = MinesweeperGame(3, 2)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])\n\n    def test_generate_playerMap_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])\n\n    def test_generate_playerMap_3(self):\n        minesweeper_game = MinesweeperGame(4, 2)\n        self.assertEqual(minesweeper_game.generate_playerMap(),[['-', '-', '-', '-'],['-', '-', '-', '-'],['-', '-', '-', '-'],['-', '-', '-', '-']])\n\n    def test_generate_playerMap_4(self):\n        minesweeper_game = MinesweeperGame(1, 4)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-']])\n\n    def test_generate_playerMap_5(self):\n        minesweeper_game = MinesweeperGame(2, 5)\n        self.assertEqual(minesweeper_game.generate_playerMap(), [['-', '-'], ['-', '-']])",
        "solution_code": "def generate_playerMap(self):\n        arr = [['-' for row in range(self.n)] for column in range(self.n)]\n        return arr",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.n"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "check_won",
        "method_description": "def check_won(self,map):\n        \"\"\"\n        Checks whether the player has won the game,if there are just mines in the player map,return True,otherwise return False.\n        :return: True if the player has won the game, False otherwise.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        >>> minesweeper_game.check_won(minesweeper_game.player_map)\n        False\n\n        \"\"\"",
        "test_class": "MinesweeperGameTestCheckWon",
        "test_code": "class MinesweeperGameTestCheckWon(unittest.TestCase):\n    def test_check_won(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\n    def test_check_won_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\n    def test_check_won_3(self):\n        minesweeper_game = MinesweeperGame(3, 0)\n        minesweeper_game.minesweeper_map = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)\n\n    def test_check_won_4(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '1', '0'], ['1', 1, '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), True)\n\n    def test_check_won_5(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['X', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.check_won(minesweeper_game.player_map), False)",
        "solution_code": "def check_won(self, map):\n        for i in range(self.n):\n            for j in range(self.n):\n                if map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':\n                    return False\n        return True",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.minesweeper_map",
            "self.n"
          ],
          "method_dependencies": [
            "sweep"
          ]
        }
      },
      {
        "method_name": "sweep",
        "method_description": "def sweep(self, x, y):\n        \"\"\"\n        Sweeps the given position.\n        :param x: The x coordinate of the position, int.\n        :param y: The y coordinate of the position, int.\n        :return: True if the player has won the game, False otherwise,if the game still continues, return the player map, list.\n        >>> minesweeper_game = MinesweeperGame(3, 1)\n        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        >>> minesweeper_game.sweep(1, 1)\n        [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]\n\n        \"\"\"",
        "test_class": "MinesweeperGameTestSweep",
        "test_code": "class MinesweeperGameTestSweep(unittest.TestCase):\n    def test_sweep(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.sweep(1,1), [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']])\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_sweep_2(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]\n        self.assertEqual(minesweeper_game.sweep(0,0), False)\n        self.assertEqual(minesweeper_game.score, 0)\n\n    def test_sweep_3(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '0'], ['1', '1', '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.sweep(0,1), True)\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_sweep_4(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.sweep(0,2), [['-', '-', 0], ['-', '-', '0'], ['0', '0', '0']])\n        self.assertEqual(minesweeper_game.score, 1)\n\n    def test_sweep_5(self):\n        minesweeper_game = MinesweeperGame(3, 1)\n        minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]\n        minesweeper_game.player_map = [['-', '-', '0'], ['-', '1', '0'], ['0', '0', '0']]\n        self.assertEqual(minesweeper_game.sweep(1,0), [['-', '-', '0'], [1, '1', '0'], ['0', '0', '0']])\n        self.assertEqual(minesweeper_game.score, 1)",
        "solution_code": "def sweep(self, x, y):\n\n        if (self.minesweeper_map[x][y] == 'X'):\n            return False\n        else:\n            self.player_map[x][y] = self.minesweeper_map[x][y]\n            self.score += 1\n            if self.check_won(self.player_map) == True:\n                return True\n            return self.player_map",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.minesweeper_map",
            "self.player_map",
            "self.score"
          ],
          "method_dependencies": [
            "check_won"
          ]
        }
      }
    ],
    "predict": [
      "```python\nimport random\n\nclass MinesweeperGame:\n    def __init__(self, n, k) -> None:\n        self.n = n\n        self.k = k\n        self.minesweeper_map = self.generate_mine_sweeper_map()\n        self.player_map = self.generate_playerMap()\n        self.score = 0\n\n    def generate_mine_sweeper_map(self):\n        map = [['0' for _ in range(self.n)] for _ in range(self.n)]\n        mines = random.sample(range(self.n*self.n), self.k)\n        for mine in mines:\n            x, y = divmod(mine, self.n)\n            map[x][y] = 'X'\n            for dx in [-1, 0, 1]:\n                for dy in [-1, 0, 1]:\n                    nx, ny = x + dx, y + dy\n                    if (0 <= nx < self.n and 0 <= ny < self.n and map[nx][ny] != 'X'):\n                        map[nx][ny] = str(int(map[nx][ny]) + 1)\n        return map\n\n    def generate_playerMap(self):\n        return [['-' for _ in range(self.n)] for _ in range(self.n)]\n\n    def check_won(self):\n        for i in range(self.n):\n            for j in range(self.n):\n                if self.player_map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':\n                    return False\n        return True\n\n    def sweep(self, x, y):\n        if self.minesweeper_map[x][y] == 'X':\n            return False\n        else:\n            self.player_map[x][y] = self.minesweeper_map[x][y]\n            if self.check_won():\n                return True\n            else:\n                return self.player_map\n```"
    ]
  },
  {
    "task_id": "ClassEval_71",
    "skeleton": "\nclass PushBoxGame:\n    \"\"\"\n    This class implements a functionality of a sokoban game, where the player needs to move boxes to designated targets in order to win.\n    \"\"\"\n\n    def __init__(self, map):\n        \"\"\"\n        Initialize the push box game with the map and various attributes.\n        :param map: list[str], the map of the push box game, represented as a list of strings. \n            Each character on the map represents a different element, including the following:\n            - '#' represents a wall that neither the player nor the box can pass through;\n            - 'O' represents the initial position of the player;\n            - 'G' represents the target position;\n            - 'X' represents the initial position of the box.\n        >>> map = [\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]   \n        >>> game = PushBoxGame(map)                \n        \"\"\"\n        self.map = map\n        self.player_row = 0\n        self.player_col = 0\n        self.targets = []\n        self.boxes = []\n        self.target_count = 0\n        self.is_game_over = False\n        self.init_game()\n\n    def init_game(self):\n        \"\"\"\n        Initialize the game by setting the positions of the player, targets, and boxes based on the map.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]) \n        >>> game.targets\n        [(3, 3)]\n        >>> game.boxes\n        [(2, 2)]\n        >>> game.player_row\n        1\n        >>> game.player_col\n        1\n        \"\"\"\n\n    def check_win(self):\n        \"\"\"\n        Check if the game is won. The game is won when all the boxes are placed on target positions.\n        And update the value of self.is_game_over.\n        :return self.is_game_over: True if all the boxes are placed on target positions, or False otherwise.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]) \n        >>> game.check_win()\n        \"\"\"\n\n\n    def move(self, direction):\n        \"\"\"\n        Move the player based on the specified direction and check if the game is won.\n        :param direction: str, the direction of the player's movement. \n            It can be 'w', 's', 'a', or 'd' representing up, down, left, or right respectively.\n\n        :return: True if the game is won, False otherwise.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"])       \n        >>> game.print_map()\n        # # # # # \n        # O     #\n        #   X   #\n        #     G #\n        # # # # #\n        >>> game.move('d')\n        False\n        >>> game.move('s')   \n        False\n        >>> game.move('a')   \n        False\n        >>> game.move('s') \n        False\n        >>> game.move('d') \n        True\n        \"\"\"",
    "test": "import unittest\n\n\nclass PushBoxGameTestInitGame(unittest.TestCase):\n    def setUp(self) -> None:\n        self.game_map = [\n            \"#####\",\n            \"#O  #\",\n            \"# X #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n\n    def test_init_game_1(self):\n        self.assertEqual(self.game.map, self.game_map)\n\n    def test_init_game_2(self):\n        self.assertEqual(self.game.is_game_over, False)\n\n    def test_init_game_3(self):\n        self.assertEqual(self.game.player_col, 1)\n\n    def test_init_game_4(self):\n        self.assertEqual(self.game.player_row, 1)\n\n    def test_init_game_5(self):\n        self.assertEqual(self.game.targets, [(3, 3)])\n\n    def test_init_game_6(self):\n        self.assertEqual(self.game.boxes, [(2, 2)])\n\n    def test_init_game_7(self):\n        self.assertEqual(self.game.target_count, 1)\n\n\nclass PushBoxGameTestCheckWin(unittest.TestCase):\n    def setUp(self) -> None:\n        self.game_map = [\n            \"#####\",\n            \"#O  #\",\n            \"# X #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n\n    def test_check_win_1(self):\n        self.assertFalse(self.game.check_win())\n\n    def test_check_win_2(self):\n        moves = ['d', 's', 'a', 's', 'd']\n        for move in moves:\n            self.game.move(move)\n        self.assertTrue(self.game.check_win())\n\nclass PushBoxGameTestMove(unittest.TestCase):\n    def setUp(self) -> None:\n        self.game_map = [\n            \"#####\",\n            \"#O  #\",\n            \"# X #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n\n    def test_move_1(self):\n        moves = ['d', 's', 'a', 's']\n        for move in moves:\n            self.assertFalse(self.game.move(move))\n        self.assertTrue(self.game.move('d'))\n\n    def test_move_2(self):\n        self.game.move('a')\n        self.assertEqual(self.game.player_col, 1)\n        self.assertEqual(self.game.player_row, 1)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_3(self):\n        self.game.move('d')\n        self.assertEqual(self.game.player_col, 2)\n        self.assertEqual(self.game.player_row, 1)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_4(self):\n        self.game.move('s')\n        self.assertEqual(self.game.player_col, 1)\n        self.assertEqual(self.game.player_row, 2)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_5(self):\n        self.game.move('w')\n        self.assertEqual(self.game.player_col, 1)\n        self.assertEqual(self.game.player_row, 1)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_6(self):\n        self.game.move('?')\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_7(self):\n        self.game_map = [\n            \"#####\",\n            \"# X #\",\n            \"# O #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n        self.game.move('w')\n        self.assertEqual(self.game.player_col, 2)\n        self.assertEqual(self.game.player_row, 2)\n        self.assertFalse(self.game.is_game_over)",
    "solution_code": "class PushBoxGame:\n    def __init__(self, map):\n        self.map = map\n        self.player_row = 0\n        self.player_col = 0\n        self.targets = []\n        self.boxes = []\n        self.target_count = 0\n        self.is_game_over = False\n\n        self.init_game()\n\n    def init_game(self):\n        for row in range(len(self.map)):\n            for col in range(len(self.map[row])):\n                if self.map[row][col] == \"O\":\n                    self.player_row = row\n                    self.player_col = col\n                elif self.map[row][col] == \"G\":\n                    self.targets.append((row, col))\n                    self.target_count += 1\n                elif self.map[row][col] == \"X\":\n                    self.boxes.append((row, col))\n\n    def check_win(self):\n        box_on_target_count = 0\n        for box in self.boxes:\n            if box in self.targets:\n                box_on_target_count += 1\n        if box_on_target_count == self.target_count:\n            self.is_game_over = True\n        return self.is_game_over\n\n    def move(self, direction):\n        new_player_row = self.player_row\n        new_player_col = self.player_col\n\n        if direction == \"w\":\n            new_player_row -= 1\n        elif direction == \"s\":\n            new_player_row += 1\n        elif direction == \"a\":\n            new_player_col -= 1\n        elif direction == \"d\":\n            new_player_col += 1\n\n        if self.map[new_player_row][new_player_col] != \"#\":\n            if (new_player_row, new_player_col) in self.boxes:\n                new_box_row = new_player_row + (new_player_row - self.player_row)\n                new_box_col = new_player_col + (new_player_col - self.player_col)\n\n                if self.map[new_box_row][new_box_col] != \"#\":\n                    self.boxes.remove((new_player_row, new_player_col))\n                    self.boxes.append((new_box_row, new_box_col))\n                    self.player_row = new_player_row\n                    self.player_col = new_player_col\n            else:\n                self.player_row = new_player_row\n                self.player_col = new_player_col\n\n        return self.check_win()",
    "import_statement": [],
    "class_description": "    \"\"\"\n    This class implements a functionality of a sokoban game, where the player needs to move boxes to designated targets in order to win.\n    \"\"\"\n",
    "class_name": "PushBoxGame",
    "test_classes": [
      "PushBoxGameTestInitGame",
      "PushBoxGameTestCheckWin",
      "PushBoxGameTestMove"
    ],
    "class_constructor": "class PushBoxGame: \n    def __init__(self, map):\n        \"\"\"\n        Initialize the push box game with the map and various attributes.\n        :param map: list[str], the map of the push box game, represented as a list of strings. \n            Each character on the map represents a different element, including the following:\n            - '#' represents a wall that neither the player nor the box can pass through;\n            - 'O' represents the initial position of the player;\n            - 'G' represents the target position;\n            - 'X' represents the initial position of the box.\n        >>> map = [\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]   \n        >>> game = PushBoxGame(map)                \n        \"\"\"\n        self.map = map\n        self.player_row = 0\n        self.player_col = 0\n        self.targets = []\n        self.boxes = []\n        self.target_count = 0\n        self.is_game_over = False\n        self.init_game()\n\n",
    "fields": [
      "self.boxes",
      "self.is_game_over",
      "self.map",
      "self.player_col",
      "self.player_row",
      "self.target_count",
      "self.targets"
    ],
    "methods_info": [
      {
        "method_name": "init_game",
        "method_description": "def init_game(self):\n        \"\"\"\n        Initialize the game by setting the positions of the player, targets, and boxes based on the map.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]) \n        >>> game.targets\n        [(3, 3)]\n        >>> game.boxes\n        [(2, 2)]\n        >>> game.player_row\n        1\n        >>> game.player_col\n        1\n        \"\"\"",
        "test_class": "PushBoxGameTestInitGame",
        "test_code": "class PushBoxGameTestInitGame(unittest.TestCase):\n    def setUp(self) -> None:\n        self.game_map = [\n            \"#####\",\n            \"#O  #\",\n            \"# X #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n\n    def test_init_game_1(self):\n        self.assertEqual(self.game.map, self.game_map)\n\n    def test_init_game_2(self):\n        self.assertEqual(self.game.is_game_over, False)\n\n    def test_init_game_3(self):\n        self.assertEqual(self.game.player_col, 1)\n\n    def test_init_game_4(self):\n        self.assertEqual(self.game.player_row, 1)\n\n    def test_init_game_5(self):\n        self.assertEqual(self.game.targets, [(3, 3)])\n\n    def test_init_game_6(self):\n        self.assertEqual(self.game.boxes, [(2, 2)])\n\n    def test_init_game_7(self):\n        self.assertEqual(self.game.target_count, 1)",
        "solution_code": "def init_game(self):\n        for row in range(len(self.map)):\n            for col in range(len(self.map[row])):\n                if self.map[row][col] == \"O\":\n                    self.player_row = row\n                    self.player_col = col\n                elif self.map[row][col] == \"G\":\n                    self.targets.append((row, col))\n                    self.target_count += 1\n                elif self.map[row][col] == \"X\":\n                    self.boxes.append((row, col))",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.boxes",
            "self.map",
            "self.player_col",
            "self.player_row",
            "self.target_count",
            "self.targets"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "check_win",
        "method_description": "def check_win(self):\n        \"\"\"\n        Check if the game is won. The game is won when all the boxes are placed on target positions.\n        And update the value of self.is_game_over.\n        :return self.is_game_over: True if all the boxes are placed on target positions, or False otherwise.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"]) \n        >>> game.check_win()\n        \"\"\"",
        "test_class": "PushBoxGameTestCheckWin",
        "test_code": "class PushBoxGameTestCheckWin(unittest.TestCase):\n    def setUp(self) -> None:\n        self.game_map = [\n            \"#####\",\n            \"#O  #\",\n            \"# X #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n\n    def test_check_win_1(self):\n        self.assertFalse(self.game.check_win())\n\n    def test_check_win_2(self):\n        moves = ['d', 's', 'a', 's', 'd']\n        for move in moves:\n            self.game.move(move)\n        self.assertTrue(self.game.check_win())",
        "solution_code": "def check_win(self):\n        box_on_target_count = 0\n        for box in self.boxes:\n            if box in self.targets:\n                box_on_target_count += 1\n        if box_on_target_count == self.target_count:\n            self.is_game_over = True\n        return self.is_game_over",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.boxes",
            "self.is_game_over",
            "self.target_count",
            "self.targets"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "move",
        "method_description": "def move(self, direction):\n        \"\"\"\n        Move the player based on the specified direction and check if the game is won.\n        :param direction: str, the direction of the player's movement. \n            It can be 'w', 's', 'a', or 'd' representing up, down, left, or right respectively.\n\n        :return: True if the game is won, False otherwise.\n        >>> game = PushBoxGame([\"#####\", \"#O  #\", \"# X #\", \"#  G#\", \"#####\"])       \n        >>> game.print_map()\n        # # # # # \n        # O     #\n        #   X   #\n        #     G #\n        # # # # #\n        >>> game.move('d')\n        False\n        >>> game.move('s')   \n        False\n        >>> game.move('a')   \n        False\n        >>> game.move('s') \n        False\n        >>> game.move('d') \n        True\n        \"\"\"",
        "test_class": "PushBoxGameTestMove",
        "test_code": "class PushBoxGameTestMove(unittest.TestCase):\n    def setUp(self) -> None:\n        self.game_map = [\n            \"#####\",\n            \"#O  #\",\n            \"# X #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n\n    def test_move_1(self):\n        moves = ['d', 's', 'a', 's']\n        for move in moves:\n            self.assertFalse(self.game.move(move))\n        self.assertTrue(self.game.move('d'))\n\n    def test_move_2(self):\n        self.game.move('a')\n        self.assertEqual(self.game.player_col, 1)\n        self.assertEqual(self.game.player_row, 1)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_3(self):\n        self.game.move('d')\n        self.assertEqual(self.game.player_col, 2)\n        self.assertEqual(self.game.player_row, 1)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_4(self):\n        self.game.move('s')\n        self.assertEqual(self.game.player_col, 1)\n        self.assertEqual(self.game.player_row, 2)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_5(self):\n        self.game.move('w')\n        self.assertEqual(self.game.player_col, 1)\n        self.assertEqual(self.game.player_row, 1)\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_6(self):\n        self.game.move('?')\n        self.assertFalse(self.game.is_game_over)\n\n    def test_move_7(self):\n        self.game_map = [\n            \"#####\",\n            \"# X #\",\n            \"# O #\",\n            \"#  G#\",\n            \"#####\"\n        ]\n        self.game = PushBoxGame(self.game_map)\n        self.game.move('w')\n        self.assertEqual(self.game.player_col, 2)\n        self.assertEqual(self.game.player_row, 2)\n        self.assertFalse(self.game.is_game_over)",
        "solution_code": "def move(self, direction):\n        new_player_row = self.player_row\n        new_player_col = self.player_col\n\n        if direction == \"w\":\n            new_player_row -= 1\n        elif direction == \"s\":\n            new_player_row += 1\n        elif direction == \"a\":\n            new_player_col -= 1\n        elif direction == \"d\":\n            new_player_col += 1\n\n        if self.map[new_player_row][new_player_col] != \"#\":\n            if (new_player_row, new_player_col) in self.boxes:\n                new_box_row = new_player_row + (new_player_row - self.player_row)\n                new_box_col = new_player_col + (new_player_col - self.player_col)\n\n                if self.map[new_box_row][new_box_col] != \"#\":\n                    self.boxes.remove((new_player_row, new_player_col))\n                    self.boxes.append((new_box_row, new_box_col))\n                    self.player_row = new_player_row\n                    self.player_col = new_player_col\n            else:\n                self.player_row = new_player_row\n                self.player_col = new_player_col\n\n        return self.check_win()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.boxes",
            "self.map",
            "self.player_col",
            "self.player_row"
          ],
          "method_dependencies": [
            "check_win"
          ]
        }
      }
    ],
    "predict": [
      "```python\n    def init_game(self):\n        for i in range(len(self.map)):\n            for j in range(len(self.map[i])):\n                if self.map[i][j] == 'O':\n                    self.player_row, self.player_col = i, j\n                elif self.map[i][j] == 'G':\n                    self.targets.append((i, j))\n                    self.target_count += 1\n                elif self.map[i][j] == 'X':\n                    self.boxes.append((i, j))\n\n    def check_win(self):\n        for box in self.boxes:\n            if box not in self.targets:\n                return False\n        self.is_game_over = True\n        return True\n\n    def move(self, direction):\n        dx, dy = 0, 0\n        if direction == 'w':\n            dx, dy = -1, 0\n        elif direction == 's':\n            dx, dy = 1, 0\n        elif direction == 'a':\n            dx, dy = 0, -1\n        elif direction == 'd':\n            dx, dy = 0, 1\n\n        next_row, next_col = self.player_row + dx, self.player_col + dy\n        if self.map[next_row][next_col] == '#':\n            return False\n        elif (next_row, next_col) in self.boxes:\n            next_box_row, next_box_col = next_row + dx, next_col + dy\n            if self.map[next_box_row][next_box_col] == '#' or (next_box_row, next_box_col) in self.boxes:\n                return False\n            else:\n                self.boxes.remove((next_row, next_col))\n                self.boxes.append((next_box_row, next_box_col))\n\n        self.player_row, self.player_col = next_row, next_col\n        return self.check_win()\n```"
    ]
  },
  {
    "task_id": "ClassEval_73",
    "skeleton": "\nclass RPGCharacter:\n    \"\"\"\n    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.\n    \"\"\"\n\n    def __init__(self, name, hp, attack_power, defense, level=1):\n        \"\"\"\n        Initialize an RPG character object.\n        :param name: strm, the name of the character.\n        :param hp: int, The health points of the character.\n        :param attack_power: int, the attack power of the character.\n        :param defense: int, the defense points of the character.\n        :param level: int, the level of the character. Default is 1.\n        \"\"\"\n        self.name = name\n        self.hp = hp\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = level\n        self.exp = 0\n\n    def attack(self, other_character):\n        \"\"\"\n        Attack another character. The damage caused needs to offset the defense value.\n        :param other_character: str, The character being attacked.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_2 = RPGCharacter('player 2', 100, 7, 2)\n        >>> player_1.attack(player_2)\n        >>> player_2.hp\n        92\n        \"\"\"\n\n    def heal(self):\n        \"\"\"\n        Heal the character with 10 hp and the max hp is 100.\n        :return: int, the current health points after healing.\n        >>> player_1 = RPGCharacter('player 1', 93, 10, 3)\n        >>> player_1.heal()\n        100\n        \"\"\"\n\n    def gain_exp(self, amount):\n        \"\"\"\n        Gain experience points for the character and level_up when the exp has reached the values that is 100 times the current level\n        The experience that overflows should be used to calculate the next leve up untill exhausts\n        :param amount: int, the amount of experience points to gain.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_1.gain_exp(1100)\n        >>> player_1.exp\n        100\n        >>> player_1.level\n        5\n        \"\"\"\n\n    def level_up(self):\n         \"\"\"\n        Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points.\n        max level is 100\n        :return: tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_1.level_up()\n        (2, 120, 15, 8)\n        \"\"\"\n\n    def is_alive(self):\n        \"\"\"\n        Check if player is alive.\n        :return: True if the hp is larger than 0, or False otherwise.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_1.is_alive()\n        True\n        \"\"\"",
    "test": "import unittest\n\nclass RPGCharacterTestAttack(unittest.TestCase):\n    def test_attack(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 85)\n\n    def test_attack_2(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character2.attack(character1)\n        self.assertEqual(character1.hp, 95)\n\n    def test_attack_3(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        character2.attack(character1)\n        self.assertEqual(character1.hp, 95)\n        self.assertEqual(character2.hp, 85)\n\n    def test_attack_4(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 70)\n\n    def test_attack_5(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        character1.attack(character2)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 55)\n\nclass RPGCharacterTestHeal(unittest.TestCase):\n    def test_heal_1(self):\n        character = RPGCharacter(\"John\", 90, 20, 10)\n        character.heal()\n        self.assertEqual(character.hp, 100)\n\n    # overflow healing \n    def test_heal_2(self):\n        character = RPGCharacter(\"John\", 97, 20, 10)\n        character.heal()\n        self.assertEqual(character.hp, 100)\n\n    def test_heal_3(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.heal()\n        self.assertEqual(character.hp, 100)\n\n    def test_heal_4(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.hp = 50\n        character.heal()\n        self.assertEqual(character.hp, 60)\n\n    def test_heal_5(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.hp = 10\n        character.heal()\n        self.assertEqual(character.hp, 20)\n\n\nclass RPGCharacterTestGainExp(unittest.TestCase):\n\n    # exp not overflow\n    def test_gain_exp_1(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(100)\n        self.assertEqual(character.level, 2)\n        self.assertEqual(character.exp, 0)\n\n    # exp overflow\n    def test_gain_exp_2(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(1100)\n        self.assertEqual(character.level, 5)\n        self.assertEqual(character.exp, 100)\n\n    def test_gain_exp_3(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(200)\n        self.assertEqual(character.level, 2)\n        self.assertEqual(character.exp, 100)\n\n    def test_gain_exp_4(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(300)\n        self.assertEqual(character.level, 3)\n        self.assertEqual(character.exp, 0)\n\n    def test_gain_exp_5(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(400)\n        self.assertEqual(character.level, 3)\n        self.assertEqual(character.exp, 100)\n\n\nclass RPGCharacterTestLevelUp(unittest.TestCase):\n    def test_level_up_1(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.level_up()\n        self.assertEqual(character.level, 2)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n    # full level\n    def test_level_up_2(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 100)\n        character.level_up()\n        self.assertEqual(character.level, 100)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 100)\n        self.assertEqual(character.attack_power, 20)\n        self.assertEqual(character.defense, 10)\n\n    def test_level_up_3(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 2)\n        character.level_up()\n        self.assertEqual(character.level, 3)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n    def test_level_up_4(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 3)\n        character.level_up()\n        self.assertEqual(character.level, 4)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n    def test_level_up_5(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 4)\n        character.level_up()\n        self.assertEqual(character.level, 5)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n\nclass RPGCharacterTestIsAlive(unittest.TestCase):\n    def test_is_alive_1(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        self.assertTrue(character.is_alive())\n\n    def test_is_alive_2(self):\n        character = RPGCharacter(\"John\", 0, 20, 10)\n        self.assertFalse(character.is_alive())\n\n    def test_is_alive_3(self):\n        character = RPGCharacter(\"John\", -10, 20, 10)\n        self.assertFalse(character.is_alive())\n\n    def test_is_alive_4(self):\n        character = RPGCharacter(\"John\", 1, 20, 10)\n        self.assertTrue(character.is_alive())\n\n    def test_is_alive_5(self):\n        character = RPGCharacter(\"John\", 10, 20, 10)\n        self.assertTrue(character.is_alive())\n\nclass RPGCharacterTestMain(unittest.TestCase):\n    def test_main(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 85)\n        character2.heal()\n        self.assertEqual(character2.hp, 95)\n        character1.gain_exp(200)\n        self.assertEqual(character1.exp, 100)\n        self.assertEqual(character1.hp, 120)\n        self.assertEqual(character1.attack_power, 25)\n        self.assertEqual(character1.defense, 15)\n        self.assertTrue(character1.is_alive())",
    "solution_code": "class RPGCharacter:\n    def __init__(self, name, hp, attack_power, defense, level=1):\n        self.name = name\n        self.hp = hp\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = level\n        self.exp = 0\n\n    def attack(self, other_character):\n        damage = max(self.attack_power - other_character.defense, 1)\n        other_character.hp -= damage\n\n    def heal(self):\n        self.hp += 10\n        if self.hp > 100:\n            self.hp = 100\n        return self.hp\n\n    def gain_exp(self, amount):\n        while amount != 0:\n            if self.exp + amount >= self.level * 100:\n                amount -= (self.level * 100 - self.exp)\n                self.level_up()\n            else:\n                self.exp += amount\n                amount = 0\n\n    def level_up(self):\n        if self.level < 100:\n            self.level += 1\n            self.exp = 0\n            self.hp += 20\n            self.attack_power += 5\n            self.defense += 5\n        return self.level, self.hp, self.attack_power, self.defense\n\n    def is_alive(self):\n        return self.hp > 0",
    "import_statement": [],
    "class_description": "    \"\"\"\n    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.\n    \"\"\"\n",
    "class_name": "RPGCharacter",
    "test_classes": [
      "RPGCharacterTestAttack",
      "RPGCharacterTestHeal",
      "RPGCharacterTestGainExp",
      "RPGCharacterTestLevelUp",
      "RPGCharacterTestIsAlive",
      "RPGCharacterTestMain"
    ],
    "class_constructor": "class RPGCharacter: \n    def __init__(self, name, hp, attack_power, defense, level=1):\n        \"\"\"\n        Initialize an RPG character object.\n        :param name: strm, the name of the character.\n        :param hp: int, The health points of the character.\n        :param attack_power: int, the attack power of the character.\n        :param defense: int, the defense points of the character.\n        :param level: int, the level of the character. Default is 1.\n        \"\"\"\n        self.name = name\n        self.hp = hp\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = level\n        self.exp = 0\n\n",
    "fields": [
      "self.attack_power",
      "self.defense",
      "self.exp",
      "self.hp",
      "self.level",
      "self.name"
    ],
    "methods_info": [
      {
        "method_name": "attack",
        "method_description": "def attack(self, other_character):\n        \"\"\"\n        Attack another character. The damage caused needs to offset the defense value.\n        :param other_character: str, The character being attacked.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_2 = RPGCharacter('player 2', 100, 7, 2)\n        >>> player_1.attack(player_2)\n        >>> player_2.hp\n        92\n        \"\"\"",
        "test_class": "RPGCharacterTestAttack",
        "test_code": "class RPGCharacterTestAttack(unittest.TestCase):\n    def test_attack(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 85)\n\n    def test_attack_2(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character2.attack(character1)\n        self.assertEqual(character1.hp, 95)\n\n    def test_attack_3(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        character2.attack(character1)\n        self.assertEqual(character1.hp, 95)\n        self.assertEqual(character2.hp, 85)\n\n    def test_attack_4(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 70)\n\n    def test_attack_5(self):\n        character1 = RPGCharacter(\"John\", 100, 20, 10)\n        character2 = RPGCharacter(\"Enemy\", 100, 15, 5)\n        character1.attack(character2)\n        character1.attack(character2)\n        character1.attack(character2)\n        self.assertEqual(character2.hp, 55)",
        "solution_code": "def attack(self, other_character):\n        damage = max(self.attack_power - other_character.defense, 1)\n        other_character.hp -= damage",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.attack_power"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "heal",
        "method_description": "def heal(self):\n        \"\"\"\n        Heal the character with 10 hp and the max hp is 100.\n        :return: int, the current health points after healing.\n        >>> player_1 = RPGCharacter('player 1', 93, 10, 3)\n        >>> player_1.heal()\n        100\n        \"\"\"",
        "test_class": "RPGCharacterTestHeal",
        "test_code": "class RPGCharacterTestHeal(unittest.TestCase):\n    def test_heal_1(self):\n        character = RPGCharacter(\"John\", 90, 20, 10)\n        character.heal()\n        self.assertEqual(character.hp, 100)\n\n    # overflow healing \n    def test_heal_2(self):\n        character = RPGCharacter(\"John\", 97, 20, 10)\n        character.heal()\n        self.assertEqual(character.hp, 100)\n\n    def test_heal_3(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.heal()\n        self.assertEqual(character.hp, 100)\n\n    def test_heal_4(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.hp = 50\n        character.heal()\n        self.assertEqual(character.hp, 60)\n\n    def test_heal_5(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.hp = 10\n        character.heal()\n        self.assertEqual(character.hp, 20)",
        "solution_code": "def heal(self):\n        self.hp += 10\n        if self.hp > 100:\n            self.hp = 100\n        return self.hp",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.hp"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "gain_exp",
        "method_description": "def gain_exp(self, amount):\n        \"\"\"\n        Gain experience points for the character and level_up when the exp has reached the values that is 100 times the current level\n        The experience that overflows should be used to calculate the next leve up untill exhausts\n        :param amount: int, the amount of experience points to gain.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_1.gain_exp(1100)\n        >>> player_1.exp\n        100\n        >>> player_1.level\n        5\n        \"\"\"",
        "test_class": "RPGCharacterTestGainExp",
        "test_code": "class RPGCharacterTestGainExp(unittest.TestCase):\n\n    # exp not overflow\n    def test_gain_exp_1(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(100)\n        self.assertEqual(character.level, 2)\n        self.assertEqual(character.exp, 0)\n\n    # exp overflow\n    def test_gain_exp_2(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(1100)\n        self.assertEqual(character.level, 5)\n        self.assertEqual(character.exp, 100)\n\n    def test_gain_exp_3(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(200)\n        self.assertEqual(character.level, 2)\n        self.assertEqual(character.exp, 100)\n\n    def test_gain_exp_4(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(300)\n        self.assertEqual(character.level, 3)\n        self.assertEqual(character.exp, 0)\n\n    def test_gain_exp_5(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.gain_exp(400)\n        self.assertEqual(character.level, 3)\n        self.assertEqual(character.exp, 100)",
        "solution_code": "def gain_exp(self, amount):\n        while amount != 0:\n            if self.exp + amount >= self.level * 100:\n                amount -= (self.level * 100 - self.exp)\n                self.level_up()\n            else:\n                self.exp += amount\n                amount = 0",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.exp",
            "self.level"
          ],
          "method_dependencies": [
            "level_up"
          ]
        }
      },
      {
        "method_name": "level_up",
        "method_description": "def level_up(self):\n         \"\"\"\n        Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points.\n        max level is 100\n        :return: tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_1.level_up()\n        (2, 120, 15, 8)\n        \"\"\"",
        "test_class": "RPGCharacterTestLevelUp",
        "test_code": "class RPGCharacterTestLevelUp(unittest.TestCase):\n    def test_level_up_1(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        character.level_up()\n        self.assertEqual(character.level, 2)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n    # full level\n    def test_level_up_2(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 100)\n        character.level_up()\n        self.assertEqual(character.level, 100)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 100)\n        self.assertEqual(character.attack_power, 20)\n        self.assertEqual(character.defense, 10)\n\n    def test_level_up_3(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 2)\n        character.level_up()\n        self.assertEqual(character.level, 3)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n    def test_level_up_4(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 3)\n        character.level_up()\n        self.assertEqual(character.level, 4)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)\n\n    def test_level_up_5(self):\n        character = RPGCharacter(\"John\", 100, 20, 10, 4)\n        character.level_up()\n        self.assertEqual(character.level, 5)\n        self.assertEqual(character.exp, 0)\n        self.assertEqual(character.hp, 120)\n        self.assertEqual(character.attack_power, 25)\n        self.assertEqual(character.defense, 15)",
        "solution_code": "def level_up(self):\n        if self.level < 100:\n            self.level += 1\n            self.exp = 0\n            self.hp += 20\n            self.attack_power += 5\n            self.defense += 5\n        return self.level, self.hp, self.attack_power, self.defense",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.attack_power",
            "self.defense",
            "self.exp",
            "self.hp",
            "self.level"
          ],
          "method_dependencies": [
            "attack"
          ]
        }
      },
      {
        "method_name": "is_alive",
        "method_description": "def is_alive(self):\n        \"\"\"\n        Check if player is alive.\n        :return: True if the hp is larger than 0, or False otherwise.\n        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)\n        >>> player_1.is_alive()\n        True\n        \"\"\"",
        "test_class": "RPGCharacterTestIsAlive",
        "test_code": "class RPGCharacterTestIsAlive(unittest.TestCase):\n    def test_is_alive_1(self):\n        character = RPGCharacter(\"John\", 100, 20, 10)\n        self.assertTrue(character.is_alive())\n\n    def test_is_alive_2(self):\n        character = RPGCharacter(\"John\", 0, 20, 10)\n        self.assertFalse(character.is_alive())\n\n    def test_is_alive_3(self):\n        character = RPGCharacter(\"John\", -10, 20, 10)\n        self.assertFalse(character.is_alive())\n\n    def test_is_alive_4(self):\n        character = RPGCharacter(\"John\", 1, 20, 10)\n        self.assertTrue(character.is_alive())\n\n    def test_is_alive_5(self):\n        character = RPGCharacter(\"John\", 10, 20, 10)\n        self.assertTrue(character.is_alive())",
        "solution_code": "def is_alive(self):\n        return self.hp > 0",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.hp"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nclass RPGCharacter:\n    \"\"\"\n    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.\n    \"\"\"\n\n    def __init__(self, name, hp, attack_power, defense, level=1):\n        self.name = name\n        self.hp = hp\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = level\n        self.exp = 0\n\n    def attack(self, other_character):\n        damage = self.attack_power - other_character.defense\n        other_character.hp -= damage if damage > 0 else 0\n\n    def heal(self):\n        self.hp += 10\n        if self.hp > 100:\n            self.hp = 100\n        return self.hp\n\n    def gain_exp(self, amount):\n        self.exp += amount\n        while self.exp >= self.level * 100:\n            self.exp -= self.level * 100\n            self.level_up()\n\n    def level_up(self):\n        if self.level < 100:\n            self.level += 1\n            self.hp += 20\n            self.attack_power += 5\n            self.defense += 5\n        return self.level, self.hp, self.attack_power, self.defense\n\n    def is_alive(self):\n        return self.hp > 0\n```"
    ]
  },
  {
    "task_id": "ClassEval_77",
    "skeleton": "\nimport random\n\nclass Snake:\n    \"\"\"\n    The class is a snake game, with allows snake to move and eat food, and also enables to reset, and generat a random food position.\n    \"\"\"\n\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\n        \"\"\"\n        Initialize the length of the snake, screen width, screen height, block size, snake head position, score, and food position.\n        :param SCREEN_WIDTH: int\n        :param SCREEN_HEIGHT: int\n        :param BLOCK_SIZE: int, Size of moving units\n        :param food_position: tuple, representing the position(x, y) of food.\n        \"\"\"\n        self.length = 1\n        self.SCREEN_WIDTH = SCREEN_WIDTH\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\n        self.BLOCK_SIZE = BLOCK_SIZE\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.food_position = food_position\n\n\n    def move(self, direction):\n        \"\"\"\n        Move the snake in the specified direction. If the new position of the snake's head is equal to the position of the food, then eat the food; If the position of the snake's head is equal to the position of its body, then start over, otherwise its own length plus one.\n        :param direction: tuple, representing the direction of movement (x, y).\n        :return: None\n        >>> snake.move((1,1))\n        self.length = 1\n        self.positions = [(51, 51), (50, 50)]\n        self.score = 10\n        \"\"\"\n\n\n    def random_food_position(self):\n        \"\"\"\n        Randomly generate a new food position, but don't place it on the snake.\n        :return: None, Change the food position\n        \"\"\"\n\n\n    def reset(self):\n        \"\"\"\n        Reset the snake to its initial state. Set the length to 1, the snake head position to ((SCREEN_WIDTH/2), (SCREEN_HEIGHT/2)), the score to 0, and randomly generate new food position.\n        :return: None\n        >>> snake = Snake(100, 100, 1, (51, 51))\n        >>> snake.reset()\n        self.length = 1\n        self.positions = [(50, 50)]\n        self.score = 0\n        self.random_food_position()\n        \"\"\"\n\n\n    def eat_food(self):\n        \"\"\"\n        Increase the length of the snake by 1 and increase the score by 100. Randomly generate a new food position, but\n        don't place it on the snake.\n        :return: None\n        >>> snake = Snake(100, 100, 1, (51, 51))\n        >>> snake.move((1,1))\n        >>> snake.eat_food()\n        self.length = 2\n        self.score = 10\n        \"\"\"",
    "test": "import unittest\n\n\nclass SnakeTestMove(unittest.TestCase):\n    def test_move_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 1))\n        self.assertEqual(snake.length, 2)\n        self.assertEqual(snake.positions[0], (51, 51))\n        self.assertEqual(snake.positions[1], (50, 50))\n        self.assertEqual(snake.score, 100)\n\n    def test_move_2(self):\n        snake = Snake(100, 100, 1, (80, 80))\n        snake.move((1, 1))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (51, 51))\n        self.assertEqual(snake.score, 0)\n\n    def test_move_3(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 0))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (51, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_move_4(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((0, 0))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_move_5(self):\n        snake = Snake(100, 100, 1, (99, 99))\n        snake.move((1, 0))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (51, 50))\n        self.assertEqual(snake.score, 0)\n\n\nclass SnakeTestRandomFoodPosition(unittest.TestCase):\n    def test_random_food_position_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.food_position, (51, 51))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_2(self):\n        snake = Snake(100, 100, 1, (99, 99))\n        self.assertEqual(snake.food_position, (99, 99))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_3(self):\n        snake = Snake(100, 100, 1, (0, 0))\n        self.assertEqual(snake.food_position, (0, 0))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_4(self):\n        snake = Snake(100, 100, 1, (40, 40))\n        self.assertEqual(snake.food_position, (40, 40))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_5(self):\n        snake = Snake(100, 100, 1, (60, 60))\n        self.assertEqual(snake.food_position, (60, 60))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n\nclass SnakeTestReset(unittest.TestCase):\n    def test_reset_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 1))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_2(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((0, 1))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_3(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((0, -1))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_4(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((-1, 0))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_5(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 0))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n\nclass SnakeTestEatFood(unittest.TestCase):\n    def test_eat_food_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        self.assertEqual(snake.length, 2)\n        self.assertEqual(snake.score, 100)\n\n    def test_eat_food_2(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 3)\n        self.assertEqual(snake.score, 200)\n\n    def test_eat_food_3(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 4)\n        self.assertEqual(snake.score, 300)\n\n    def test_eat_food_4(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 5)\n        self.assertEqual(snake.score, 400)\n\n    def test_eat_food_5(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 6)\n        self.assertEqual(snake.score, 500)\n\n\nclass SnakeTest(unittest.TestCase):\n    def test_snake(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.SCREEN_WIDTH, 100)\n        self.assertEqual(snake.SCREEN_HEIGHT, 100)\n        self.assertEqual(snake.BLOCK_SIZE, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n        self.assertEqual(snake.food_position, (51, 51))\n        snake.move((1, 1))\n        self.assertEqual(snake.length, 2)\n        self.assertEqual(snake.positions[0], (51, 51))\n        self.assertEqual(snake.score, 100)\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)",
    "solution_code": "import random\n\n\nclass Snake:\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\n        self.length = 1\n        self.SCREEN_WIDTH = SCREEN_WIDTH\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\n        self.BLOCK_SIZE = BLOCK_SIZE\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.food_position = food_position\n\n    def move(self, direction):\n        cur = self.positions[0]\n        x, y = direction\n\n        new = (\n            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),\n            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,\n        )\n\n        if new == self.food_position:\n            self.eat_food()\n\n        if len(self.positions) > 2 and new in self.positions[2:]:\n            self.reset()\n        else:\n            self.positions.insert(0, new)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n\n    def random_food_position(self):\n        while self.food_position in self.positions:\n            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,\n                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)\n\n    def reset(self):\n        self.length = 1\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.random_food_position()\n\n    def eat_food(self):\n        self.length += 1\n        self.score += 100\n        self.random_food_position()",
    "import_statement": [
      "import random"
    ],
    "class_description": "    \"\"\"\n    The class is a snake game, with allows snake to move and eat food, and also enables to reset, and generat a random food position.\n    \"\"\"\n",
    "class_name": "Snake",
    "test_classes": [
      "SnakeTestMove",
      "SnakeTestRandomFoodPosition",
      "SnakeTestReset",
      "SnakeTestEatFood",
      "SnakeTest"
    ],
    "class_constructor": "class Snake: \n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\n        \"\"\"\n        Initialize the length of the snake, screen width, screen height, block size, snake head position, score, and food position.\n        :param SCREEN_WIDTH: int\n        :param SCREEN_HEIGHT: int\n        :param BLOCK_SIZE: int, Size of moving units\n        :param food_position: tuple, representing the position(x, y) of food.\n        \"\"\"\n        self.length = 1\n        self.SCREEN_WIDTH = SCREEN_WIDTH\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\n        self.BLOCK_SIZE = BLOCK_SIZE\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.food_position = food_position\n\n\n",
    "fields": [
      "self.BLOCK_SIZE",
      "self.SCREEN_HEIGHT",
      "self.SCREEN_WIDTH",
      "self.food_position",
      "self.length",
      "self.positions",
      "self.score"
    ],
    "methods_info": [
      {
        "method_name": "move",
        "method_description": "def move(self, direction):\n        \"\"\"\n        Move the snake in the specified direction. If the new position of the snake's head is equal to the position of the food, then eat the food; If the position of the snake's head is equal to the position of its body, then start over, otherwise its own length plus one.\n        :param direction: tuple, representing the direction of movement (x, y).\n        :return: None\n        >>> snake.move((1,1))\n        self.length = 1\n        self.positions = [(51, 51), (50, 50)]\n        self.score = 10\n        \"\"\"",
        "test_class": "SnakeTestMove",
        "test_code": "class SnakeTestMove(unittest.TestCase):\n    def test_move_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 1))\n        self.assertEqual(snake.length, 2)\n        self.assertEqual(snake.positions[0], (51, 51))\n        self.assertEqual(snake.positions[1], (50, 50))\n        self.assertEqual(snake.score, 100)\n\n    def test_move_2(self):\n        snake = Snake(100, 100, 1, (80, 80))\n        snake.move((1, 1))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (51, 51))\n        self.assertEqual(snake.score, 0)\n\n    def test_move_3(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 0))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (51, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_move_4(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((0, 0))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_move_5(self):\n        snake = Snake(100, 100, 1, (99, 99))\n        snake.move((1, 0))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (51, 50))\n        self.assertEqual(snake.score, 0)",
        "solution_code": "def move(self, direction):\n        cur = self.positions[0]\n        x, y = direction\n\n        new = (\n            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),\n            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,\n        )\n\n        if new == self.food_position:\n            self.eat_food()\n\n        if len(self.positions) > 2 and new in self.positions[2:]:\n            self.reset()\n        else:\n            self.positions.insert(0, new)\n            if len(self.positions) > self.length:\n                self.positions.pop()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.BLOCK_SIZE",
            "self.SCREEN_HEIGHT",
            "self.SCREEN_WIDTH",
            "self.food_position",
            "self.length",
            "self.positions"
          ],
          "method_dependencies": [
            "reset",
            "eat_food"
          ]
        }
      },
      {
        "method_name": "random_food_position",
        "method_description": "def random_food_position(self):\n        \"\"\"\n        Randomly generate a new food position, but don't place it on the snake.\n        :return: None, Change the food position\n        \"\"\"",
        "test_class": "SnakeTestRandomFoodPosition",
        "test_code": "class SnakeTestRandomFoodPosition(unittest.TestCase):\n    def test_random_food_position_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.food_position, (51, 51))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_2(self):\n        snake = Snake(100, 100, 1, (99, 99))\n        self.assertEqual(snake.food_position, (99, 99))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_3(self):\n        snake = Snake(100, 100, 1, (0, 0))\n        self.assertEqual(snake.food_position, (0, 0))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_4(self):\n        snake = Snake(100, 100, 1, (40, 40))\n        self.assertEqual(snake.food_position, (40, 40))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)\n\n    def test_random_food_position_5(self):\n        snake = Snake(100, 100, 1, (60, 60))\n        self.assertEqual(snake.food_position, (60, 60))\n        snake.random_food_position()\n        self.assertNotIn(snake.food_position, snake.positions)\n        self.assertGreaterEqual(snake.food_position[0], 0)\n        self.assertGreaterEqual(snake.food_position[1], 0)\n        self.assertLessEqual(snake.food_position[0], 100)\n        self.assertLessEqual(snake.food_position[1], 100)",
        "solution_code": "def random_food_position(self):\n        while self.food_position in self.positions:\n            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,\n                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "random"
          ],
          "field_dependencies": [
            "self.BLOCK_SIZE",
            "self.SCREEN_HEIGHT",
            "self.SCREEN_WIDTH",
            "self.food_position",
            "self.positions"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "reset",
        "method_description": "def reset(self):\n        \"\"\"\n        Reset the snake to its initial state. Set the length to 1, the snake head position to ((SCREEN_WIDTH/2), (SCREEN_HEIGHT/2)), the score to 0, and randomly generate new food position.\n        :return: None\n        >>> snake = Snake(100, 100, 1, (51, 51))\n        >>> snake.reset()\n        self.length = 1\n        self.positions = [(50, 50)]\n        self.score = 0\n        self.random_food_position()\n        \"\"\"",
        "test_class": "SnakeTestReset",
        "test_code": "class SnakeTestReset(unittest.TestCase):\n    def test_reset_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 1))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_2(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((0, 1))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_3(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((0, -1))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_4(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((-1, 0))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)\n\n    def test_reset_5(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        snake.move((1, 0))\n        snake.reset()\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.positions[0], (50, 50))\n        self.assertEqual(snake.score, 0)",
        "solution_code": "def reset(self):\n        self.length = 1\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.random_food_position()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.SCREEN_HEIGHT",
            "self.SCREEN_WIDTH",
            "self.length",
            "self.positions",
            "self.score"
          ],
          "method_dependencies": [
            "random_food_position"
          ]
        }
      },
      {
        "method_name": "eat_food",
        "method_description": "def eat_food(self):\n        \"\"\"\n        Increase the length of the snake by 1 and increase the score by 100. Randomly generate a new food position, but\n        don't place it on the snake.\n        :return: None\n        >>> snake = Snake(100, 100, 1, (51, 51))\n        >>> snake.move((1,1))\n        >>> snake.eat_food()\n        self.length = 2\n        self.score = 10\n        \"\"\"",
        "test_class": "SnakeTestEatFood",
        "test_code": "class SnakeTestEatFood(unittest.TestCase):\n    def test_eat_food_1(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        self.assertEqual(snake.length, 2)\n        self.assertEqual(snake.score, 100)\n\n    def test_eat_food_2(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 3)\n        self.assertEqual(snake.score, 200)\n\n    def test_eat_food_3(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 4)\n        self.assertEqual(snake.score, 300)\n\n    def test_eat_food_4(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 5)\n        self.assertEqual(snake.score, 400)\n\n    def test_eat_food_5(self):\n        snake = Snake(100, 100, 1, (51, 51))\n        self.assertEqual(snake.length, 1)\n        self.assertEqual(snake.score, 0)\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        snake.eat_food()\n        self.assertEqual(snake.length, 6)\n        self.assertEqual(snake.score, 500)",
        "solution_code": "def eat_food(self):\n        self.length += 1\n        self.score += 100\n        self.random_food_position()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.length",
            "self.score"
          ],
          "method_dependencies": [
            "random_food_position"
          ]
        }
      }
    ],
    "predict": [
      "```python\ndef move(self, direction):\n    cur = self.positions[0]\n    x, y = direction\n    new = (((cur[0] + (x*self.BLOCK_SIZE)) % self.SCREEN_WIDTH), \n           ((cur[1] + (y*self.BLOCK_SIZE)) % self.SCREEN_HEIGHT))\n    if len(self.positions) > 2 and new in self.positions[2:]:\n        self.reset()\n    else:\n        self.positions.insert(0, new)\n        if len(self.positions) > self.length:\n            self.positions.pop()\n        if new == self.food_position:\n            self.eat_food()\n\ndef random_food_position(self):\n    while True:\n        pos = (random.randint(0, self.SCREEN_WIDTH-1), \n               random.randint(0, self.SCREEN_HEIGHT-1))\n        if pos not in self.positions:\n            self.food_position = pos\n            return\n\ndef reset(self):\n    self.length = 1\n    self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\n    self.score = 0\n    self.random_food_position()\n\ndef eat_food(self):\n    self.length += 1\n    self.score += 100\n    self.random_food_position()\n```"
    ]
  },
  {
    "task_id": "ClassEval_86",
    "skeleton": "\nclass TicTacToe:\n    \"\"\"\n    The class represents a game of Tic-Tac-Toe and its functions include making a move on the board, checking for a winner, and determining if the board is full.\n    \"\"\"\n\n    def __init__(self, N=3):\n        \"\"\"\n        Initialize a 3x3 game board with all empty spaces and current symble player, default is 'X'.\n        \"\"\"\n        self.board = [[' ' for _ in range(N)] for _ in range(3)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        \"\"\"\n        Place the current player's mark at the specified position on the board and switch the mark.\n        :param row: int, the row index of the position\n        :param col: int, the column index of the position\n        :return: bool, indicating whether the move was successful or not\n        >>> ttt.current_player\n        'X'\n        >>> ttt.make_move(1, 1)\n        >>> ttt.current_player\n        'O'\n        \"\"\"\n\n    def check_winner(self):\n        \"\"\"\n        Check if there is a winner on the board in rows, columns and diagonals three directions\n        :return: str or None, the mark of the winner ('X' or 'O'), or None if there is no winner yet\n        >>> moves = [(1, 0), (2, 0), (1, 1), (2, 1), (1, 2)]\n        >>> for move in moves:\n        ...     ttt.make_move(move[0], move[1])\n        >>> ttt.check_winner()\n        'X'\n        \"\"\"\n\n    def is_board_full(self):\n        \"\"\"\n        Check if the game board is completely filled.\n        :return: bool, indicating whether the game board is full or not\n        >>> ttt.is_board_full()\n        False\n        \"\"\"",
    "test": "import unittest\n\nclass TicTacToeTestMakeMove(unittest.TestCase):\n    def test_make_move_1(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertEqual(ttt.current_player, 'O')\n\n    # move invalid\n    def test_make_move_2(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertFalse(ttt.make_move(0, 0))\n        self.assertEqual(ttt.current_player, 'X')\n\n    def test_make_move_3(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertTrue(ttt.make_move(1, 1))\n        self.assertEqual(ttt.current_player, 'O')\n\n    def test_make_move_4(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertTrue(ttt.make_move(1, 1))\n        self.assertTrue(ttt.make_move(1, 2))\n        self.assertEqual(ttt.current_player, 'X')\n\n    def test_make_move_5(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertTrue(ttt.make_move(1, 1))\n        self.assertTrue(ttt.make_move(1, 2))\n        self.assertTrue(ttt.make_move(2, 2))\n        self.assertEqual(ttt.current_player, 'O')\n\n\nclass TicTacToeTestCheckWinner(unittest.TestCase):\n    # rows\n    def test_check_winner_1(self):\n        ttt = TicTacToe()\n        moves = [(1, 0), (2, 0), (1, 1), (2, 1), (1, 2)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    # columns\n    def test_check_winner_2(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    # main diagonals \n    def test_check_winner_3(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (0, 2), (2, 2)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    # secondary diagonals \n    def test_check_winner_4(self):\n        ttt = TicTacToe()\n        moves = [(0, 2), (0, 1), (1, 1), (1, 0), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    def test_check_winner_5(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), None)\n\n\nclass TicTacToeTestIsBoardFull(unittest.TestCase):\n    # not full\n    def test_is_board_full_1(self):\n        ttt = TicTacToe()\n        self.assertFalse(ttt.is_board_full())\n\n    # full\n    def test_is_board_full_2(self):\n        ttt = TicTacToe()\n        moves = [(1, 1), (0, 2), (2, 2), (0, 0), (0, 1), (2, 1), (1, 0), (1, 2), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertTrue(ttt.is_board_full())\n\n    def test_is_board_full_3(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertFalse(ttt.is_board_full())\n\n    def test_is_board_full_4(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0), (0, 2), (1, 2), (2, 1), (2, 2)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertTrue(ttt.is_board_full())\n\n    def test_is_board_full_5(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0), (0, 2), (1, 2), (2, 1)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertFalse(ttt.is_board_full())\n\n\nclass TicTacToeTestMain(unittest.TestCase):\n    def test_main(self):\n        # A draw down way\n        ttt = TicTacToe()\n        moves = [(1, 1), (0, 2), (2, 2), (0, 0), (0, 1), (2, 1), (1, 0), (1, 2), (2, 0)]\n        for move in moves:\n            self.assertTrue(ttt.make_move(move[0], move[1]))\n            # no winner in this case\n            self.assertFalse(ttt.check_winner())\n            if move != (2, 0):\n                self.assertFalse(ttt.is_board_full())\n        self.assertTrue(ttt.is_board_full())",
    "solution_code": "class TicTacToe:\n    def __init__(self, N=3):\n        self.board = [[' ' for _ in range(N)] for _ in range(3)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        else:\n            return False\n\n    def check_winner(self):\n        for row in self.board:\n            if row[0] == row[1] == row[2] != ' ':\n                return row[0]\n        for col in range(3):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n                return self.board[0][col]\n        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n            return self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n            return self.board[0][2]\n        return None\n\n    def is_board_full(self):\n        for row in self.board:\n            if ' ' in row:\n                return False\n        return True",
    "import_statement": [],
    "class_description": "    \"\"\"\n    The class represents a game of Tic-Tac-Toe and its functions include making a move on the board, checking for a winner, and determining if the board is full.\n    \"\"\"\n",
    "class_name": "TicTacToe",
    "test_classes": [
      "TicTacToeTestMakeMove",
      "TicTacToeTestCheckWinner",
      "TicTacToeTestIsBoardFull",
      "TicTacToeTestMain"
    ],
    "class_constructor": "class TicTacToe: \n    def __init__(self, N=3):\n        \"\"\"\n        Initialize a 3x3 game board with all empty spaces and current symble player, default is 'X'.\n        \"\"\"\n        self.board = [[' ' for _ in range(N)] for _ in range(3)]\n        self.current_player = 'X'\n\n",
    "fields": [
      "self.board",
      "self.current_player"
    ],
    "methods_info": [
      {
        "method_name": "make_move",
        "method_description": "def make_move(self, row, col):\n        \"\"\"\n        Place the current player's mark at the specified position on the board and switch the mark.\n        :param row: int, the row index of the position\n        :param col: int, the column index of the position\n        :return: bool, indicating whether the move was successful or not\n        >>> ttt.current_player\n        'X'\n        >>> ttt.make_move(1, 1)\n        >>> ttt.current_player\n        'O'\n        \"\"\"",
        "test_class": "TicTacToeTestMakeMove",
        "test_code": "class TicTacToeTestMakeMove(unittest.TestCase):\n    def test_make_move_1(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertEqual(ttt.current_player, 'O')\n\n    # move invalid\n    def test_make_move_2(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertFalse(ttt.make_move(0, 0))\n        self.assertEqual(ttt.current_player, 'X')\n\n    def test_make_move_3(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertTrue(ttt.make_move(1, 1))\n        self.assertEqual(ttt.current_player, 'O')\n\n    def test_make_move_4(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertTrue(ttt.make_move(1, 1))\n        self.assertTrue(ttt.make_move(1, 2))\n        self.assertEqual(ttt.current_player, 'X')\n\n    def test_make_move_5(self):\n        ttt = TicTacToe()\n        self.assertEqual(ttt.current_player, 'X')\n        self.assertTrue(ttt.make_move(0, 0))\n        self.assertTrue(ttt.make_move(0, 1))\n        self.assertTrue(ttt.make_move(1, 1))\n        self.assertTrue(ttt.make_move(1, 2))\n        self.assertTrue(ttt.make_move(2, 2))\n        self.assertEqual(ttt.current_player, 'O')",
        "solution_code": "def make_move(self, row, col):\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        else:\n            return False",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board",
            "self.current_player"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "check_winner",
        "method_description": "def check_winner(self):\n        \"\"\"\n        Check if there is a winner on the board in rows, columns and diagonals three directions\n        :return: str or None, the mark of the winner ('X' or 'O'), or None if there is no winner yet\n        >>> moves = [(1, 0), (2, 0), (1, 1), (2, 1), (1, 2)]\n        >>> for move in moves:\n        ...     ttt.make_move(move[0], move[1])\n        >>> ttt.check_winner()\n        'X'\n        \"\"\"",
        "test_class": "TicTacToeTestCheckWinner",
        "test_code": "class TicTacToeTestCheckWinner(unittest.TestCase):\n    # rows\n    def test_check_winner_1(self):\n        ttt = TicTacToe()\n        moves = [(1, 0), (2, 0), (1, 1), (2, 1), (1, 2)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    # columns\n    def test_check_winner_2(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    # main diagonals \n    def test_check_winner_3(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (0, 2), (2, 2)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    # secondary diagonals \n    def test_check_winner_4(self):\n        ttt = TicTacToe()\n        moves = [(0, 2), (0, 1), (1, 1), (1, 0), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), 'X')\n\n    def test_check_winner_5(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertEqual(ttt.check_winner(), None)",
        "solution_code": "def check_winner(self):\n        for row in self.board:\n            if row[0] == row[1] == row[2] != ' ':\n                return row[0]\n        for col in range(3):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n                return self.board[0][col]\n        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n            return self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n            return self.board[0][2]\n        return None",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "is_board_full",
        "method_description": "def is_board_full(self):\n        \"\"\"\n        Check if the game board is completely filled.\n        :return: bool, indicating whether the game board is full or not\n        >>> ttt.is_board_full()\n        False\n        \"\"\"",
        "test_class": "TicTacToeTestIsBoardFull",
        "test_code": "class TicTacToeTestIsBoardFull(unittest.TestCase):\n    # not full\n    def test_is_board_full_1(self):\n        ttt = TicTacToe()\n        self.assertFalse(ttt.is_board_full())\n\n    # full\n    def test_is_board_full_2(self):\n        ttt = TicTacToe()\n        moves = [(1, 1), (0, 2), (2, 2), (0, 0), (0, 1), (2, 1), (1, 0), (1, 2), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertTrue(ttt.is_board_full())\n\n    def test_is_board_full_3(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertFalse(ttt.is_board_full())\n\n    def test_is_board_full_4(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0), (0, 2), (1, 2), (2, 1), (2, 2)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertTrue(ttt.is_board_full())\n\n    def test_is_board_full_5(self):\n        ttt = TicTacToe()\n        moves = [(0, 0), (0, 1), (1, 1), (1, 0), (2, 0), (0, 2), (1, 2), (2, 1)]\n        for move in moves:\n            ttt.make_move(move[0], move[1])\n        self.assertFalse(ttt.is_board_full())",
        "solution_code": "def is_board_full(self):\n        for row in self.board:\n            if ' ' in row:\n                return False\n        return True",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.board"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nclass TicTacToe:\n    def __init__(self, N=3):\n        self.board = [[' ' for _ in range(N)] for _ in range(N)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        else:\n            return False\n\n    def check_winner(self):\n        for row in self.board:\n            if row.count(row[0]) == len(row) and row[0] != ' ':\n                return row[0]\n        for col in range(len(self.board[0])):\n            check = []\n            for row in self.board:\n                check.append(row[col])\n            if check.count(check[0]) == len(check) and check[0] != ' ':\n                return check[0]\n        if self.board[0][0] == self.board[1][1] == self.board[2][2] and self.board[0][0] != ' ':\n            return self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0] and self.board[0][2] != ' ':\n            return self.board[0][2]\n        return None\n\n    def is_board_full(self):\n        for row in self.board:\n            if ' ' in row:\n                return False\n        return True\n```"
    ]
  },
  {
    "task_id": "ClassEval_89",
    "skeleton": "\nimport random\n\nclass TwentyFourPointGame:\n    \"\"\"\n    This ia a game of twenty-four points, which provides to generate four numbers and check whether player's expression is equal to 24.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.nums = []\n\n\n    def _generate_cards(self):\n        \"\"\"\n        Generate random numbers between 1 and 9 for the cards.\n        \"\"\"\n\n\n    def get_my_cards(self):\n        \"\"\"\n        Get a list of four random numbers between 1 and 9 representing the player's cards.\n        :return: list of integers, representing the player's cards\n        >>> game = TwentyFourPointGame()\n        >>> game.get_my_cards()\n\n        \"\"\"\n\n\n    def answer(self, expression):\n        \"\"\"\n        Check if a given mathematical expression using the cards can evaluate to 24.\n        :param expression: string, mathematical expression using the cards\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> game.nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.answer(ans)\n        True\n        \"\"\"\n\n\n    def evaluate_expression(self, expression):\n        \"\"\"\n        Evaluate a mathematical expression and check if the result is 24.\n        :param expression: string, mathematical expression\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.evaluate_expression(ans)\n        True\n        \"\"\"",
    "test": "import unittest\n\n\nclass TwentyFourPointGameTestGetMyCards(unittest.TestCase):\n    def test_get_my_cards_1(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_2(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_3(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_4(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_5(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nclass TwentyFourPointGameTestAnswer(unittest.TestCase):\n    def test_answer_1(self):\n        game = TwentyFourPointGame()\n        cards = game.answer('pass')\n        self.assertEqual(len(cards), 4)\n\n    def test_answer_2(self):\n        game = TwentyFourPointGame()\n        result = game.answer('4*3+6+6')\n        self.assertTrue(result)\n\n    def test_answer_3(self):\n        game = TwentyFourPointGame()\n        result = game.answer('1+1+1+1')\n        self.assertFalse(result)\n\n    def test_answer_4(self):\n        game = TwentyFourPointGame()\n        result = game.answer('1+')\n        self.assertFalse(result)\n\n    def test_answer_5(self):\n        game = TwentyFourPointGame()\n        result = game.answer('abc')\n        self.assertFalse(result)\n\n    def test_answer_6(self):\n        game = TwentyFourPointGame()\n        game.nums = [1, 1, 1, 1]\n        result = game.answer('1+1+1+2')\n        self.assertFalse(result)\n\n    def test_answer_7(self):\n        game = TwentyFourPointGame()\n        game.nums = [1, 1, 1, 1]\n        result = game.answer('1+1+1+1+1')\n        self.assertFalse(result)\n\n\nclass TwentyFourPointGameTestEvaluateExpression(unittest.TestCase):\n    def test_evaluate_expression_1(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('4+3+6+6')\n        self.assertFalse(result)\n\n    def test_evaluate_expression_2(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('4*3+6+6')\n        self.assertTrue(result)\n\n    def test_evaluate_expression_3(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('1+1+1+1')\n        self.assertFalse(result)\n\n    def test_evaluate_expression_4(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('1+')\n        self.assertFalse(result)\n\n    def test_evaluate_expression_5(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('abc')\n        self.assertFalse(result)\n\n\nclass TwentyFourPointGameTest(unittest.TestCase):\n    def test_TwentyFourPointGame(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n        game.nums = [4, 3, 6, 6]\n        result = game.answer('4*3+6+6')\n        self.assertTrue(result)\n        result = game.evaluate_expression('4*3+6+6')\n        self.assertTrue(result)",
    "solution_code": "import random\n\n\nclass TwentyFourPointGame:\n    def __init__(self) -> None:\n        self.nums = []\n\n    def _generate_cards(self):\n        for i in range(4):\n            self.nums.append(random.randint(1, 9))\n        assert len(self.nums) == 4\n\n    def get_my_cards(self):\n        self.nums = []\n        self._generate_cards()\n        return self.nums\n\n    def answer(self, expression):\n        if expression == 'pass':\n            return self.get_my_cards()\n        statistic = {}\n        for c in expression:\n            if c.isdigit() and int(c) in self.nums:\n                statistic[c] = statistic.get(c, 0) + 1\n\n        nums_used = statistic.copy()\n\n        for num in self.nums:\n            if nums_used.get(str(num), -100) != -100 and nums_used[str(num)] > 0:\n                nums_used[str(num)] -= 1\n            else:\n                return False\n\n        if all(count == 0 for count in nums_used.values()) == True:\n            return self.evaluate_expression(expression)\n        else:\n            return False\n\n    def evaluate_expression(self, expression):\n        try:\n            if eval(expression) == 24:\n                return True\n            else:\n                return False\n        except Exception as e:\n            return False",
    "import_statement": [
      "import random"
    ],
    "class_description": "    \"\"\"\n    This ia a game of twenty-four points, which provides to generate four numbers and check whether player's expression is equal to 24.\n    \"\"\"\n",
    "class_name": "TwentyFourPointGame",
    "test_classes": [
      "TwentyFourPointGameTestGetMyCards",
      "TwentyFourPointGameTestAnswer",
      "TwentyFourPointGameTestEvaluateExpression",
      "TwentyFourPointGameTest"
    ],
    "class_constructor": "class TwentyFourPointGame: \n    def __init__(self) -> None:\n        self.nums = []\n\n\n",
    "fields": [
      "self.nums"
    ],
    "methods_info": [
      {
        "method_name": "_generate_cards",
        "method_description": "def _generate_cards(self):\n        \"\"\"\n        Generate random numbers between 1 and 9 for the cards.\n        \"\"\"",
        "test_class": "TwentyFourPointGameTestGetMyCards",
        "test_code": "class TwentyFourPointGameTestGetMyCards(unittest.TestCase):\n    def test_get_my_cards_1(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_2(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_3(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_4(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    def test_get_my_cards_5(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "solution_code": "def _generate_cards(self):\n        for i in range(4):\n            self.nums.append(random.randint(1, 9))\n        assert len(self.nums) == 4",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "random"
          ],
          "field_dependencies": [
            "self.nums"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "get_my_cards",
        "method_description": "def get_my_cards(self):\n        \"\"\"\n        Get a list of four random numbers between 1 and 9 representing the player's cards.\n        :return: list of integers, representing the player's cards\n        >>> game = TwentyFourPointGame()\n        >>> game.get_my_cards()\n\n        \"\"\"",
        "test_class": "TwentyFourPointGameTestAnswer",
        "test_code": "class TwentyFourPointGameTestAnswer(unittest.TestCase):\n    def test_answer_1(self):\n        game = TwentyFourPointGame()\n        cards = game.answer('pass')\n        self.assertEqual(len(cards), 4)\n\n    def test_answer_2(self):\n        game = TwentyFourPointGame()\n        result = game.answer('4*3+6+6')\n        self.assertTrue(result)\n\n    def test_answer_3(self):\n        game = TwentyFourPointGame()\n        result = game.answer('1+1+1+1')\n        self.assertFalse(result)\n\n    def test_answer_4(self):\n        game = TwentyFourPointGame()\n        result = game.answer('1+')\n        self.assertFalse(result)\n\n    def test_answer_5(self):\n        game = TwentyFourPointGame()\n        result = game.answer('abc')\n        self.assertFalse(result)\n\n    def test_answer_6(self):\n        game = TwentyFourPointGame()\n        game.nums = [1, 1, 1, 1]\n        result = game.answer('1+1+1+2')\n        self.assertFalse(result)\n\n    def test_answer_7(self):\n        game = TwentyFourPointGame()\n        game.nums = [1, 1, 1, 1]\n        result = game.answer('1+1+1+1+1')\n        self.assertFalse(result)",
        "solution_code": "def get_my_cards(self):\n        self.nums = []\n        self._generate_cards()\n        return self.nums",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.nums"
          ],
          "method_dependencies": [
            "_generate_cards"
          ]
        }
      },
      {
        "method_name": "answer",
        "method_description": "def answer(self, expression):\n        \"\"\"\n        Check if a given mathematical expression using the cards can evaluate to 24.\n        :param expression: string, mathematical expression using the cards\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> game.nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.answer(ans)\n        True\n        \"\"\"",
        "test_class": "TwentyFourPointGameTestEvaluateExpression",
        "test_code": "class TwentyFourPointGameTestEvaluateExpression(unittest.TestCase):\n    def test_evaluate_expression_1(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('4+3+6+6')\n        self.assertFalse(result)\n\n    def test_evaluate_expression_2(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('4*3+6+6')\n        self.assertTrue(result)\n\n    def test_evaluate_expression_3(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('1+1+1+1')\n        self.assertFalse(result)\n\n    def test_evaluate_expression_4(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('1+')\n        self.assertFalse(result)\n\n    def test_evaluate_expression_5(self):\n        game = TwentyFourPointGame()\n        result = game.evaluate_expression('abc')\n        self.assertFalse(result)",
        "solution_code": "def answer(self, expression):\n        if expression == 'pass':\n            return self.get_my_cards()\n        statistic = {}\n        for c in expression:\n            if c.isdigit() and int(c) in self.nums:\n                statistic[c] = statistic.get(c, 0) + 1\n\n        nums_used = statistic.copy()\n\n        for num in self.nums:\n            if nums_used.get(str(num), -100) != -100 and nums_used[str(num)] > 0:\n                nums_used[str(num)] -= 1\n            else:\n                return False\n\n        if all(count == 0 for count in nums_used.values()) == True:\n            return self.evaluate_expression(expression)\n        else:\n            return False",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.nums"
          ],
          "method_dependencies": [
            "get_my_cards",
            "evaluate_expression"
          ]
        }
      },
      {
        "method_name": "evaluate_expression",
        "method_description": "def evaluate_expression(self, expression):\n        \"\"\"\n        Evaluate a mathematical expression and check if the result is 24.\n        :param expression: string, mathematical expression\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        >>> game = TwentyFourPointGame()\n        >>> nums = [4, 3, 6, 6]\n        >>> ans = \"4*3+6+6\"\n        >>> ret = game.evaluate_expression(ans)\n        True\n        \"\"\"",
        "test_class": "TwentyFourPointGameTest",
        "test_code": "class TwentyFourPointGameTest(unittest.TestCase):\n    def test_TwentyFourPointGame(self):\n        game = TwentyFourPointGame()\n        cards = game.get_my_cards()\n        self.assertEqual(len(cards), 4)\n        for card in cards:\n            self.assertIn(card, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n        game.nums = [4, 3, 6, 6]\n        result = game.answer('4*3+6+6')\n        self.assertTrue(result)\n        result = game.evaluate_expression('4*3+6+6')\n        self.assertTrue(result)",
        "solution_code": "def evaluate_expression(self, expression):\n        try:\n            if eval(expression) == 24:\n                return True\n            else:\n                return False\n        except Exception as e:\n            return False",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nimport random\n\nclass TwentyFourPointGame:\n    \"\"\"\n    This ia a game of twenty-four points, which provides to generate four numbers and check whether player's expression is equal to 24.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.nums = self._generate_cards()\n\n    def _generate_cards(self):\n        \"\"\"\n        Generate random numbers between 1 and 9 for the cards.\n        \"\"\"\n        return random.sample(range(1, 10), 4)\n\n    def get_my_cards(self):\n        \"\"\"\n        Get a list of four random numbers between 1 and 9 representing the player's cards.\n        :return: list of integers, representing the player's cards\n        \"\"\"\n        return self.nums\n\n    def answer(self, expression):\n        \"\"\"\n        Check if a given mathematical expression using the cards can evaluate to 24.\n        :param expression: string, mathematical expression using the cards\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        \"\"\"\n        return self.evaluate_expression(expression)\n\n    def evaluate_expression(self, expression):\n        \"\"\"\n        Evaluate a mathematical expression and check if the result is 24.\n        :param expression: string, mathematical expression\n        :return: bool, True if the expression evaluates to 24, False otherwise\n        \"\"\"\n        try:\n            return eval(expression) == 24\n        except:\n            return False\n```\nThis code defines a class `TwentyFourPointGame` which generates four random numbers between 1 and 9 when an instance is created. The `get_my_cards` method returns these numbers. The `answer` method checks if a given mathematical expression using these numbers evaluates to 24. The `evaluate_expression` method evaluates a mathematical expression and checks if the result is 24."
    ]
  }
]