[
  {
    "task_id": "ClassEval_14",
    "skeleton": "import sqlite3\n\nclass BookManagementDB:\n    \"\"\"\n    This is a database class as a book management system, used to handle the operations of adding, removing, updating, and searching books.\n    \"\"\"\n\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the class by creating a database connection and cursor, \n        and creates the book table if it does not already exist\n        :param db_name: str, the name of db file\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates the book table in the database if it does not already exist.\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.create_table()\n        \"\"\"\n    \n\n    def add_book(self, title, author):\n        \"\"\"\n        Adds a book to the database with the specified title and author, \n        setting its availability to 1 as free to borrow.\n        :param title: str, book title\n        :param author: str, author name\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.create_table()\n        >>> book_db.add_book('book1', 'author')\n        \"\"\"\n\n    def remove_book(self, book_id):\n        \"\"\"\n        Removes a book from the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.remove_book(1)\n        \"\"\"\n\n    def borrow_book(self, book_id):\n        \"\"\"\n        Marks a book as borrowed in the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.borrow_book(1)\n        \"\"\"\n\n    def return_book(self, book_id):\n        \"\"\"\n        Marks a book as returned in the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.return_book(1)\n        \"\"\"\n\n    def search_books(self):\n        \"\"\"\n        Retrieves all books from the database and returns their information.\n        :return books: list[tuple], the information of all books in database\n        >>> book_db.search_books()\n        [(1, 'book1', 'author', 1)]\n        \"\"\"",
    "test": "import unittest\nimport os\n\n\nclass BookManagementDBTestCreateTable(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n\n    def test_create_table_1(self):\n        # Check if the table exists\n        self.cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='books'\")\n        result = self.cursor.fetchone()\n        self.assertIsNotNone(result)\n\n    def test_create_table_2(self):\n        self.db.create_table()\n        # Check if the table has the correct columns\n        self.cursor.execute(\"PRAGMA table_info(books)\")\n        columns = self.cursor.fetchall()\n        column_names = [column[1] for column in columns]\n        expected_column_names = ['id', 'title', 'author', 'available']\n        self.assertEqual(column_names, expected_column_names)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)\n\n\nclass BookManagementDBTestAddBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n\n    def test_add_book(self):\n        title = \"Introduction to Python\"\n        author = \"John Smith\"\n        self.db.add_book(title, author)\n\n        # Check if the book was added correctly\n        self.cursor.execute(\"SELECT title, author, available FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], title)\n        self.assertEqual(result[1], author)\n        self.assertEqual(result[2], 1)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)\n\n\nclass BookManagementDBTestRemoveBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add a book for testing removal\n        self.db.add_book(\"Book to Remove\", \"John Doe\")\n\n    def test_remove_book(self):\n        self.db.remove_book(1)\n\n        # Check if the book was removed correctly\n        self.cursor.execute(\"SELECT * FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertIsNone(result)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)\n\n\nclass BookManagementDBTestBorrowBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add a book for testing borrowing\n        self.db.add_book(\"Book to Borrow\", \"Jane Smith\")\n\n    def test_borrow_book(self):\n        self.db.borrow_book(1)\n\n        # Check if the book was marked as unavailable\n        self.cursor.execute(\"SELECT available FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertEqual(result[0], 0)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)\n\n\nclass BookManagementDBTestReturnBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add a book for testing returning\n        self.db.add_book(\"Book to Return\", \"James Smith\")\n        self.db.borrow_book(1)  # Mark the book as borrowed\n\n    def test_return_book(self):\n        self.db.return_book(1)\n\n        # Check if the book was marked as available again\n        self.cursor.execute(\"SELECT available FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertEqual(result[0], 1)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)\n\n\nclass BookManagementDBTestSearchBooks(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add some books for testing search\n        self.db.add_book(\"Book 1\", \"Author 1\")\n        self.db.add_book(\"Book 2\", \"Author 2\")\n        self.db.add_book(\"Book 3\", \"Author 3\")\n\n    def test_search_books(self):\n        books = self.db.search_books()\n\n        # Ensure that all books were retrieved\n        self.assertEqual(len(books), 3)\n\n        # Ensure that the correct book information is retrieved\n        self.assertEqual(books[0][1], \"Book 1\")\n        self.assertEqual(books[1][2], \"Author 2\")\n        self.assertEqual(books[2][3], 1)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
    "solution_code": "import sqlite3\n\nclass BookManagementDB:\n    def __init__(self, db_name):\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS books (\n                id INTEGER PRIMARY KEY,\n                title TEXT,\n                author TEXT,\n                available INTEGER\n            )\n        ''')\n        self.connection.commit()\n\n    def add_book(self, title, author):\n        self.cursor.execute('''\n            INSERT INTO books (title, author, available)\n            VALUES (?, ?, 1)\n        ''', (title, author))\n        self.connection.commit()\n\n    def remove_book(self, book_id):\n        self.cursor.execute('''\n            DELETE FROM books WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()\n\n    def borrow_book(self, book_id):\n        self.cursor.execute('''\n            UPDATE books SET available = 0 WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()\n\n    def return_book(self, book_id):\n        self.cursor.execute('''\n            UPDATE books SET available = 1 WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()\n\n    def search_books(self):\n        self.cursor.execute('''\n            SELECT * FROM books\n        ''')\n        books = self.cursor.fetchall()\n        return books",
    "import_statement": [
      "import sqlite3"
    ],
    "class_description": "    \"\"\"\n    This is a database class as a book management system, used to handle the operations of adding, removing, updating, and searching books.\n    \"\"\"\n",
    "class_name": "BookManagementDB",
    "test_classes": [
      "BookManagementDBTestCreateTable",
      "BookManagementDBTestAddBook",
      "BookManagementDBTestRemoveBook",
      "BookManagementDBTestBorrowBook",
      "BookManagementDBTestReturnBook",
      "BookManagementDBTestSearchBooks"
    ],
    "class_constructor": "class BookManagementDB: \n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the class by creating a database connection and cursor, \n        and creates the book table if it does not already exist\n        :param db_name: str, the name of db file\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n",
    "fields": [
      "self.connection",
      "self.cursor"
    ],
    "methods_info": [
      {
        "method_name": "create_table",
        "method_description": "def create_table(self):\n        \"\"\"\n        Creates the book table in the database if it does not already exist.\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.create_table()\n        \"\"\"",
        "test_class": "BookManagementDBTestCreateTable",
        "test_code": "class BookManagementDBTestCreateTable(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n\n    def test_create_table_1(self):\n        # Check if the table exists\n        self.cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='books'\")\n        result = self.cursor.fetchone()\n        self.assertIsNotNone(result)\n\n    def test_create_table_2(self):\n        self.db.create_table()\n        # Check if the table has the correct columns\n        self.cursor.execute(\"PRAGMA table_info(books)\")\n        columns = self.cursor.fetchall()\n        column_names = [column[1] for column in columns]\n        expected_column_names = ['id', 'title', 'author', 'available']\n        self.assertEqual(column_names, expected_column_names)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
        "solution_code": "def create_table(self):\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS books (\n                id INTEGER PRIMARY KEY,\n                title TEXT,\n                author TEXT,\n                available INTEGER\n            )\n        ''')\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "add_book",
        "method_description": "def add_book(self, title, author):\n        \"\"\"\n        Adds a book to the database with the specified title and author, \n        setting its availability to 1 as free to borrow.\n        :param title: str, book title\n        :param author: str, author name\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.create_table()\n        >>> book_db.add_book('book1', 'author')\n        \"\"\"",
        "test_class": "BookManagementDBTestAddBook",
        "test_code": "class BookManagementDBTestAddBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n\n    def test_add_book(self):\n        title = \"Introduction to Python\"\n        author = \"John Smith\"\n        self.db.add_book(title, author)\n\n        # Check if the book was added correctly\n        self.cursor.execute(\"SELECT title, author, available FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], title)\n        self.assertEqual(result[1], author)\n        self.assertEqual(result[2], 1)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
        "solution_code": "def add_book(self, title, author):\n        self.cursor.execute('''\n            INSERT INTO books (title, author, available)\n            VALUES (?, ?, 1)\n        ''', (title, author))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "remove_book",
        "method_description": "def remove_book(self, book_id):\n        \"\"\"\n        Removes a book from the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.remove_book(1)\n        \"\"\"",
        "test_class": "BookManagementDBTestRemoveBook",
        "test_code": "class BookManagementDBTestRemoveBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add a book for testing removal\n        self.db.add_book(\"Book to Remove\", \"John Doe\")\n\n    def test_remove_book(self):\n        self.db.remove_book(1)\n\n        # Check if the book was removed correctly\n        self.cursor.execute(\"SELECT * FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertIsNone(result)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
        "solution_code": "def remove_book(self, book_id):\n        self.cursor.execute('''\n            DELETE FROM books WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "borrow_book",
        "method_description": "def borrow_book(self, book_id):\n        \"\"\"\n        Marks a book as borrowed in the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.borrow_book(1)\n        \"\"\"",
        "test_class": "BookManagementDBTestBorrowBook",
        "test_code": "class BookManagementDBTestBorrowBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add a book for testing borrowing\n        self.db.add_book(\"Book to Borrow\", \"Jane Smith\")\n\n    def test_borrow_book(self):\n        self.db.borrow_book(1)\n\n        # Check if the book was marked as unavailable\n        self.cursor.execute(\"SELECT available FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertEqual(result[0], 0)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
        "solution_code": "def borrow_book(self, book_id):\n        self.cursor.execute('''\n            UPDATE books SET available = 0 WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "return_book",
        "method_description": "def return_book(self, book_id):\n        \"\"\"\n        Marks a book as returned in the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\"test.db\")\n        >>> book_db.return_book(1)\n        \"\"\"",
        "test_class": "BookManagementDBTestReturnBook",
        "test_code": "class BookManagementDBTestReturnBook(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add a book for testing returning\n        self.db.add_book(\"Book to Return\", \"James Smith\")\n        self.db.borrow_book(1)  # Mark the book as borrowed\n\n    def test_return_book(self):\n        self.db.return_book(1)\n\n        # Check if the book was marked as available again\n        self.cursor.execute(\"SELECT available FROM books WHERE id=1\")\n        result = self.cursor.fetchone()\n        self.assertEqual(result[0], 1)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
        "solution_code": "def return_book(self, book_id):\n        self.cursor.execute('''\n            UPDATE books SET available = 1 WHERE id = ?\n        ''', (book_id,))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "search_books",
        "method_description": "def search_books(self):\n        \"\"\"\n        Retrieves all books from the database and returns their information.\n        :return books: list[tuple], the information of all books in database\n        >>> book_db.search_books()\n        [(1, 'book1', 'author', 1)]\n        \"\"\"",
        "test_class": "BookManagementDBTestSearchBooks",
        "test_code": "class BookManagementDBTestSearchBooks(unittest.TestCase):\n    def setUp(self):\n        self.db_name = \"test.db\"\n        self.db = BookManagementDB(self.db_name)\n        self.connection = sqlite3.connect(self.db_name)\n        self.cursor = self.connection.cursor()\n        # Add some books for testing search\n        self.db.add_book(\"Book 1\", \"Author 1\")\n        self.db.add_book(\"Book 2\", \"Author 2\")\n        self.db.add_book(\"Book 3\", \"Author 3\")\n\n    def test_search_books(self):\n        books = self.db.search_books()\n\n        # Ensure that all books were retrieved\n        self.assertEqual(len(books), 3)\n\n        # Ensure that the correct book information is retrieved\n        self.assertEqual(books[0][1], \"Book 1\")\n        self.assertEqual(books[1][2], \"Author 2\")\n        self.assertEqual(books[2][3], 1)\n\n    def tearDown(self):\n        self.db.connection.close()\n        self.connection.close()\n        # remove the test database file\n        os.remove(self.db_name)",
        "solution_code": "def search_books(self):\n        self.cursor.execute('''\n            SELECT * FROM books\n        ''')\n        books = self.cursor.fetchall()\n        return books",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.cursor"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nimport sqlite3\n\nclass BookManagementDB:\n    \"\"\"\n    This is a database class as a book management system, used to handle the operations of adding, removing, updating, and searching books.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the class by creating a database connection and cursor, \n        and creates the book table if it does not already exist\n        :param db_name: str, the name of db file\n        \"\"\"\n        try:\n            self.connection = sqlite3.connect(db_name)\n            self.cursor = self.connection.cursor()\n            self.create_table()\n            print(f\"Database '{db_name}' connected successfully.\")\n        except sqlite3.Error as e:\n            print(f\"Database connection error: {e}\")\n            self.connection = None # Ensure connection is None on error\n            self.cursor = None\n\n    def create_table(self):\n        \"\"\"\n        Creates the book table in the database if it does not already exist.\n        The table schema is:\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        author TEXT NOT NULL,\n        availability INTEGER DEFAULT 1 -- 1 for available, 0 for borrowed\n        >>> book_db = BookManagementDB(\":memory:\") # Use in-memory db for test\n        >>> book_db.create_table()\n        \"\"\"\n        if not self.connection:\n            print(\"Database connection is not established.\")\n            return\n\n        try:\n            self.cursor.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS books (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    title TEXT NOT NULL,\n                    author TEXT NOT NULL,\n                    availability INTEGER DEFAULT 1 -- 1 for available, 0 for borrowed\n                )\n            \"\"\")\n            self.connection.commit()\n            print(\"Table 'books' checked/created successfully.\")\n        except sqlite3.Error as e:\n            print(f\"Error creating table: {e}\")\n\n    def add_book(self, title, author):\n        \"\"\"\n        Adds a book to the database with the specified title and author, \n        setting its availability to 1 as free to borrow.\n        :param title: str, book title\n        :param author: str, author name\n        >>> book_db = BookManagementDB(\":memory:\") # Use in-memory db for test\n        >>> book_db.add_book('book1', 'author')\n        Book 'book1' added successfully.\n        \"\"\"\n        if not self.connection:\n            print(\"Database connection is not established.\")\n            return\n\n        try:\n            self.cursor.execute(\"\"\"\n                INSERT INTO books (title, author, availability)\n                VALUES (?, ?, ?)\n            \"\"\", (title, author, 1))\n            self.connection.commit()\n            print(f\"Book '{title}' added successfully.\")\n        except sqlite3.Error as e:\n            print(f\"Error adding book '{title}': {e}\")\n\n    def remove_book(self, book_id):\n        \"\"\"\n        Removes a book from the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\":memory:\") # Use in-memory db for test\n        >>> book_db.add_book('book_to_remove', 'author')\n        Book 'book_to_remove' added successfully.\n        >>> book_db.remove_book(1) # Assuming ID 1 was assigned\n        Book with ID 1 removed successfully.\n        >>> book_db.remove_book(999) # Test removing non-existent book\n        Book with ID 999 not found.\n        \"\"\"\n        if not self.connection:\n            print(\"Database connection is not established.\")\n            return\n\n        try:\n            self.cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))\n            self.connection.commit()\n            if self.cursor.rowcount > 0:\n                print(f\"Book with ID {book_id} removed successfully.\")\n            else:\n                print(f\"Book with ID {book_id} not found.\")\n        except sqlite3.Error as e:\n            print(f\"Error removing book with ID {book_id}: {e}\")\n\n    def borrow_book(self, book_id):\n        \"\"\"\n        Marks a book as borrowed in the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\":memory:\") # Use in-memory db for test\n        >>> book_db.add_book('book_to_borrow', 'author')\n        Book 'book_to_borrow' added successfully.\n        >>> book_db.borrow_book(1) # Assuming ID 1 was assigned\n        Book with ID 1 marked as borrowed.\n        >>> book_db.borrow_book(999) # Test borrowing non-existent book\n        Book with ID 999 not found or already borrowed.\n        \"\"\"\n        if not self.connection:\n            print(\"Database connection is not established.\")\n            return\n\n        try:\n            self.cursor.execute(\"\"\"\n                UPDATE books\n                SET availability = 0\n                WHERE id = ? AND availability = 1\n            \"\"\", (book_id,))\n            self.connection.commit()\n            if self.cursor.rowcount > 0:\n                print(f\"Book with ID {book_id} marked as borrowed.\")\n            else:\n                print(f\"Book with ID {book_id} not found or already borrowed.\")\n        except sqlite3.Error as e:\n            print(f\"Error borrowing book with ID {book_id}: {e}\")\n\n    def return_book(self, book_id):\n        \"\"\"\n        Marks a book as returned in the database based on the given book ID.\n        :param book_id: int\n        >>> book_db = BookManagementDB(\":memory:\") # Use in-memory db for test\n        >>> book_db.add_book('book_to_return', 'author')\n        Book 'book_to_return' added successfully.\n        >>> book_db.borrow_book(1) # Need to borrow it first\n        Book with ID 1 marked as borrowed.\n        >>> book_db.return_book(1) # Assuming ID 1 was assigned and borrowed\n        Book with ID 1 marked as returned.\n        >>> book_db.return_book(999) # Test returning non-existent book\n        Book with ID 999 not found or already available.\n        \"\"\"\n        if not self.connection:\n            print(\"Database connection is not established.\")\n            return\n\n        try:\n            self.cursor.execute(\"\"\"\n                UPDATE books\n                SET availability = 1\n                WHERE id = ? AND availability = 0\n            \"\"\", (book_id,))\n            self.connection.commit()\n            if self.cursor.rowcount > 0:\n                print(f\"Book with ID {book_id} marked as returned.\")\n            else:\n                print(f\"Book with ID {book_id} not found or already available.\")\n        except sqlite3.Error as e:\n            print(f\"Error returning book with ID {book_id}: {e}\")\n\n\n    def search_books(self):\n        \"\"\"\n        Retrieves all books from the database and returns their information.\n        :return books: list[tuple], the information of all books in database\n        >>> book_db = BookManagementDB(\":memory:\") # Use in-memory db for test\n        >>> book_db.add_book('book1', 'author1')\n        Book 'book1' added successfully.\n        >>> book_db.add_book('book2', 'author2')\n        Book 'book2' added successfully.\n        >>> books = book_db.search_books()\n        >>> # The exact IDs might vary in real db, but for ':memory:' with simple adds, they are sequential\n        >>> # Let's check the content ignoring potential ID variations if run repeatedly without closing\n        >>> # For doctest simplicity, we will assume sequential IDs starting from 1 in a fresh :memory: db\n        >>> if books:\n        ...     print(books[0]) # Assuming the first book is ID 1\n        ...     print(books[1]) # Assuming the second book is ID 2\n        [(1, 'book1', 'author1', 1), (2, 'book2', 'author2', 1)] # Expected output for a fresh :memory:\n        \"\"\"\n        if not self.connection:\n            print(\"Database connection is not established.\")\n            return []\n\n        try:\n            self.cursor.execute(\"SELECT id, title, author, availability FROM books\")\n            books = self.cursor.fetchall()\n            return books\n        except sqlite3.Error as e:\n            print(f\"Error searching books: {e}\")\n            return []\n\n    def close(self):\n        \"\"\"\n        Closes the database connection.\n        \"\"\"\n        if self.connection:\n            self.connection.close()\n            print(\"Database connection closed.\")\n            self.connection = None\n            self.cursor = None\n\n    def __del__(self):\n        \"\"\"\n        Ensure the connection is closed when the object is garbage collected.\n        \"\"\"\n        self.close()\n\n# Example Usage (optional, can be removed if only the class definition is needed)\nif __name__ == '__main__':\n    # Use a file-based database for persistent storage\n    db = BookManagementDB(\"books.db\")\n\n    # Add some books\n    db.add_book(\"The Hitchhiker's Guide to the Galaxy\", \"Douglas Adams\")\n    db.add_book(\"1984\", \"George Orwell\")\n    db.add_book(\"Pride and Prejudice\", \"Jane Austen\")\n\n    # Search all books\n    print(\"\\n--- All Books ---\")\n    all_books = db.search_books()\n    for book in all_books:\n        print(book)\n\n    # Assume we know the ID of \"1984\" from the search results (let's say it's ID 2)\n    # In a real application, you might search by title to get the ID\n    book_id_to_borrow = None\n    for book in all_books:\n        if book[1] == \"1984\":\n            book_id_to_borrow = book[0]\n            break\n\n    if book_id_to_borrow:\n        print(f\"\\n--- Borrowing Book ID {book_id_to_borrow} ---\")\n        db.borrow_book(book_id_to_borrow)\n\n        # Search again to see the updated availability\n        print(\"\\n--- Books after borrowing ---\")\n        all_books_after_borrow = db.search_books()\n        for book in all_books_after_borrow:\n            print(book)\n\n        # Return the book\n        print(f\"\\n--- Returning Book ID {book_id_to_borrow} ---\")\n        db.return_book(book_id_to_borrow)\n\n        # Search again\n        print(\"\\n--- Books after returning ---\")\n        all_books_after_return = db.search_books()\n        for book in all_books_after_return:\n            print(book)\n    else:\n        print(\"\\nCould not find '1984' to test borrowing/returning.\")\n\n    # Remove a book (e.g., \"Pride and Prejudice\", assume ID 3)\n    book_id_to_remove = None\n    for book in all_books_after_return: # Use the latest list\n         if book[1] == \"Pride and Prejudice\":\n             book_id_to_remove = book[0]\n             break\n\n    if book_id_to_remove:\n        print(f\"\\n--- Removing Book ID {book_id_to_remove} ---\")\n        db.remove_book(book_id_to_remove)\n\n        # Search again\n        print(\"\\n--- Books after removing ---\")\n        all_books_after_remove = db.search_books()\n        for book in all_books_after_remove:\n            print(book)\n    else:\n         print(\"\\nCould not find 'Pride and Prejudice' to test removing.\")\n\n\n    # Close the connection\n    db.close()\n\n    # Test connecting to a non-existent file or with permission issues (example)\n    # This might not work reliably on all systems depending on permissions\n    # try:\n    #     print(\"\\n--- Testing error handling ---\")\n    #     # Assuming 'non_writable_dir/test.db' is not writable\n    #     error_db = BookManagementDB(\"/non_existent_path/error.db\")\n    #     error_db.add_book(\"Test Error\", \"Error Author\")\n    #     error_db.close()\n    # except Exception as e:\n    #     print(f\"Caught expected error: {e}\")\n```"
    ]
  },
  {
    "task_id": "ClassEval_28",
    "skeleton": "import sqlite3\nimport pandas as pd\n\nclass DatabaseProcessor:\n    \"\"\"\n    This is a class for processing a database, supporting to create tables, insert data into the database, search for data based on name, and delete data from the database.\n    \"\"\"\n\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initialize database name of database processor\n        \"\"\"\n        self.database_name = database_name\n\n\n    def create_table(self, table_name, key1, key2):\n        \"\"\"\n        Create a new table in the database if it doesn't exist.\n        And make id (INTEGER) as PRIMARY KEY, make key1 as TEXT, key2 as INTEGER\n        :param table_name: str, the name of the table to create.\n        :param key1: str, the name of the first column in the table.\n        :param key2: str, the name of the second column in the table.\n        >>> db.create_table('user', 'name', 'age')\n        \"\"\"\n\n\n    def insert_into_database(self, table_name, data):\n        \"\"\"\n        Insert data into the specified table in the database.\n        :param table_name: str, the name of the table to insert data into.\n        :param data: list, a list of dictionaries where each dictionary represents a row of data.\n        >>> db.insert_into_database('user', [\n                {'name': 'John', 'age': 25},\n                {'name': 'Alice', 'age': 30}\n            ])\n        \"\"\"\n\n\n    def search_database(self, table_name, name):\n        \"\"\"\n        Search the specified table in the database for rows with a matching name.\n        :param table_name: str, the name of the table to search.\n        :param name: str, the name to search for.\n        :return: list, a list of tuples representing the rows with matching name, if any;\n                    otherwise, returns None.\n        >>> db.search_database('user', 'John')\n        [(1, 'John', 25)]\n        \"\"\"\n\n\n    def delete_from_database(self, table_name, name):\n        \"\"\"\n        Delete rows from the specified table in the database with a matching name.\n        :param table_name: str, the name of the table to delete rows from.\n        :param name: str, the name to match for deletion.\n        >>> db.delete_from_database('user', 'John')\n        \"\"\"",
    "test": "import unittest\nimport sqlite3\n\n\nclass DatabaseProcessorTestCreateTable(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_create_table_1(self):\n        table_name = \"test_table\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_2(self):\n        table_name = \"test_table2\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_3(self):\n        table_name = \"test_table3\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_4(self):\n        table_name = \"test_table4\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_5(self):\n        table_name = \"test_table5\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n\nclass DatabaseProcessorTestInsertIntoDatabase(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_insert_into_database_1(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 25)\n\n    def test_insert_into_database_2(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 15},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 15)\n\n    def test_insert_into_database_3(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 16},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 16)\n\n    def test_insert_into_database_4(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 17},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 17)\n\n    def test_insert_into_database_5(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 18},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 18)\n\n\nclass DatabaseProcessorTestSearchDatabase(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_search_database_1(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'John')\n        self.assertIsNotNone(result)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'John')\n\n    def test_search_database_2(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'Alice')\n        self.assertIsNotNone(result)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n    def test_search_database_3(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'Bob')\n        self.assertIsNone(result)\n\n    def test_search_database_4(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'aaa')\n        self.assertIsNone(result)\n\n    def test_search_database_5(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'bbb')\n        self.assertIsNone(result)\n\n\nclass DatabaseProcessorTestDeteleFromDatabase(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_delete_from_database_1(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'John')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n    def test_delete_from_database_2(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'Alice')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'John')\n\n    def test_delete_from_database_3(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'John')\n        self.processor.delete_from_database(table_name, 'Alice')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_from_database_4(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'aaa', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'John')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'aaa')\n\n    def test_delete_from_database_5(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'bbb', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'bbb')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n\nclass DatabaseProcessorTest(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_DatabaseProcessor(self):\n        table_name = \"test_table\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 25)\n\n        result = self.processor.search_database(table_name, 'John')\n        self.assertIsNotNone(result)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'John')\n\n        self.processor.delete_from_database(table_name, 'John')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')",
    "solution_code": "import sqlite3\nimport pandas as pd\n\n\nclass DatabaseProcessor:\n\n    def __init__(self, database_name):\n        self.database_name = database_name\n\n    def create_table(self, table_name, key1, key2):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        create_table_query = f\"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n\n    def insert_into_database(self, table_name, data):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        for item in data:\n            insert_query = f\"INSERT INTO {table_name} (name, age) VALUES (?, ?)\"\n            cursor.execute(insert_query, (item['name'], item['age']))\n\n        conn.commit()\n        conn.close()\n\n    def search_database(self, table_name, name):\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        select_query = f\"SELECT * FROM {table_name} WHERE name = ?\"\n        cursor.execute(select_query, (name,))\n        result = cursor.fetchall()\n\n        if result:\n            return result\n        else:\n            return None\n\n    def delete_from_database(self, table_name, name):\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        delete_query = f\"DELETE FROM {table_name} WHERE name = ?\"\n        cursor.execute(delete_query, (name,))\n\n        conn.commit()\n        conn.close()",
    "import_statement": [
      "import sqlite3",
      "import pandas as pd"
    ],
    "class_description": "    \"\"\"\n    This is a class for processing a database, supporting to create tables, insert data into the database, search for data based on name, and delete data from the database.\n    \"\"\"\n",
    "class_name": "DatabaseProcessor",
    "test_classes": [
      "DatabaseProcessorTestCreateTable",
      "DatabaseProcessorTestInsertIntoDatabase",
      "DatabaseProcessorTestSearchDatabase",
      "DatabaseProcessorTestDeteleFromDatabase",
      "DatabaseProcessorTest"
    ],
    "class_constructor": "class DatabaseProcessor: \n    def __init__(self, database_name):\n        \"\"\"\n        Initialize database name of database processor\n        \"\"\"\n        self.database_name = database_name\n\n\n",
    "fields": [
      "self.database_name"
    ],
    "methods_info": [
      {
        "method_name": "create_table",
        "method_description": "def create_table(self, table_name, key1, key2):\n        \"\"\"\n        Create a new table in the database if it doesn't exist.\n        And make id (INTEGER) as PRIMARY KEY, make key1 as TEXT, key2 as INTEGER\n        :param table_name: str, the name of the table to create.\n        :param key1: str, the name of the first column in the table.\n        :param key2: str, the name of the second column in the table.\n        >>> db.create_table('user', 'name', 'age')\n        \"\"\"",
        "test_class": "DatabaseProcessorTestCreateTable",
        "test_code": "class DatabaseProcessorTestCreateTable(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_create_table_1(self):\n        table_name = \"test_table\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_2(self):\n        table_name = \"test_table2\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_3(self):\n        table_name = \"test_table3\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_4(self):\n        table_name = \"test_table4\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)\n\n    def test_create_table_5(self):\n        table_name = \"test_table5\"\n        self.processor.create_table(table_name, 'name', 'age')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=?\", (table_name,))\n        result = cursor.fetchone()\n        conn.close()\n\n        self.assertIsNotNone(result)\n        self.assertEqual(result[0], table_name)",
        "solution_code": "def create_table(self, table_name, key1, key2):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        create_table_query = f\"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "insert_into_database",
        "method_description": "def insert_into_database(self, table_name, data):\n        \"\"\"\n        Insert data into the specified table in the database.\n        :param table_name: str, the name of the table to insert data into.\n        :param data: list, a list of dictionaries where each dictionary represents a row of data.\n        >>> db.insert_into_database('user', [\n                {'name': 'John', 'age': 25},\n                {'name': 'Alice', 'age': 30}\n            ])\n        \"\"\"",
        "test_class": "DatabaseProcessorTestInsertIntoDatabase",
        "test_code": "class DatabaseProcessorTestInsertIntoDatabase(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_insert_into_database_1(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 25)\n\n    def test_insert_into_database_2(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 15},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 15)\n\n    def test_insert_into_database_3(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 16},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 16)\n\n    def test_insert_into_database_4(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 17},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 17)\n\n    def test_insert_into_database_5(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 18},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), len(data))\n        self.assertEqual(result[0][2], 18)",
        "solution_code": "def insert_into_database(self, table_name, data):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        for item in data:\n            insert_query = f\"INSERT INTO {table_name} (name, age) VALUES (?, ?)\"\n            cursor.execute(insert_query, (item['name'], item['age']))\n\n        conn.commit()\n        conn.close()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "search_database",
        "method_description": "def search_database(self, table_name, name):\n        \"\"\"\n        Search the specified table in the database for rows with a matching name.\n        :param table_name: str, the name of the table to search.\n        :param name: str, the name to search for.\n        :return: list, a list of tuples representing the rows with matching name, if any;\n                    otherwise, returns None.\n        >>> db.search_database('user', 'John')\n        [(1, 'John', 25)]\n        \"\"\"",
        "test_class": "DatabaseProcessorTestSearchDatabase",
        "test_code": "class DatabaseProcessorTestSearchDatabase(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_search_database_1(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'John')\n        self.assertIsNotNone(result)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'John')\n\n    def test_search_database_2(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'Alice')\n        self.assertIsNotNone(result)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n    def test_search_database_3(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'Bob')\n        self.assertIsNone(result)\n\n    def test_search_database_4(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'aaa')\n        self.assertIsNone(result)\n\n    def test_search_database_5(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        result = self.processor.search_database(table_name, 'bbb')\n        self.assertIsNone(result)",
        "solution_code": "def search_database(self, table_name, name):\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        select_query = f\"SELECT * FROM {table_name} WHERE name = ?\"\n        cursor.execute(select_query, (name,))\n        result = cursor.fetchall()\n\n        if result:\n            return result\n        else:\n            return None",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "delete_from_database",
        "method_description": "def delete_from_database(self, table_name, name):\n        \"\"\"\n        Delete rows from the specified table in the database with a matching name.\n        :param table_name: str, the name of the table to delete rows from.\n        :param name: str, the name to match for deletion.\n        >>> db.delete_from_database('user', 'John')\n        \"\"\"",
        "test_class": "DatabaseProcessorTestDeteleFromDatabase",
        "test_code": "class DatabaseProcessorTestDeteleFromDatabase(unittest.TestCase):\n    def setUp(self):\n        self.database_name = \"test.db\"\n        self.processor = DatabaseProcessor(self.database_name)\n\n    def tearDown(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(\"DROP TABLE IF EXISTS test_table\")\n        conn.commit()\n        conn.close()\n\n    def test_delete_from_database_1(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'John')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n    def test_delete_from_database_2(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'Alice')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'John')\n\n    def test_delete_from_database_3(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'John')\n        self.processor.delete_from_database(table_name, 'Alice')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_from_database_4(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'John', 'age': 25},\n            {'name': 'aaa', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'John')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'aaa')\n\n    def test_delete_from_database_5(self):\n        table_name = \"test_table\"\n        data = [\n            {'name': 'bbb', 'age': 25},\n            {'name': 'Alice', 'age': 30}\n        ]\n        self.processor.create_table(table_name, 'name', 'age')\n        self.processor.insert_into_database(table_name, data)\n\n        self.processor.delete_from_database(table_name, 'bbb')\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')",
        "solution_code": "def delete_from_database(self, table_name, name):\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        delete_query = f\"DELETE FROM {table_name} WHERE name = ?\"\n        cursor.execute(delete_query, (name,))\n\n        conn.commit()\n        conn.close()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nimport sqlite3\nimport pandas as pd\n\nclass DatabaseProcessor:\n    \"\"\"\n    This is a class for processing a database, supporting to create tables, insert data into the database, search for data based on name, and delete data from the database.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initialize database name of database processor\n        \"\"\"\n        self.database_name = database_name\n\n    def _execute_query(self, query, params=(), commit=False, fetchone=False, fetchall=False):\n        \"\"\"Helper method to handle connecting, executing, and closing.\"\"\"\n        conn = None\n        cursor = None\n        result = None\n        try:\n            conn = sqlite3.connect(self.database_name)\n            cursor = conn.cursor()\n            cursor.execute(query, params)\n            if commit:\n                conn.commit()\n            if fetchone:\n                result = cursor.fetchone()\n            if fetchall:\n                result = cursor.fetchall()\n        except sqlite3.Error as e:\n            print(f\"Database error: {e}\")\n            if conn and commit:\n                 conn.rollback()\n            result = None # Ensure None is returned on error for fetch calls\n        finally:\n            if cursor:\n                cursor.close()\n            if conn:\n                conn.close()\n        return result\n\n    def _get_column_names(self, table_name):\n        \"\"\"Helper to get column names from a table schema, excluding the primary key 'id'.\"\"\"\n        # PRAGMA table_info(tablename) returns rows like:\n        # (cid, name, type, notnull, dflt_value, pk)\n        query = f\"PRAGMA table_info({table_name})\"\n        rows = self._execute_query(query, fetchall=True)\n        if rows:\n            # Exclude the primary key column (where pk is 1)\n            # Return just the names of the other columns in their defined order\n            return [row[1] for row in rows if row[5] == 0] # row[1] is name, row[5] is pk (0 for not PK, 1 for PK)\n        return None # Table might not exist or have no columns\n\n    def create_table(self, table_name, key1, key2):\n        \"\"\"\n        Create a new table in the database if it doesn't exist.\n        And make id (INTEGER) as PRIMARY KEY, make key1 as TEXT, key2 as INTEGER\n        :param table_name: str, the name of the table to create.\n        :param key1: str, the name of the first column in the table (TEXT).\n        :param key2: str, the name of the second column in the table (INTEGER).\n        >>> db.create_table('user', 'name', 'age')\n        \"\"\"\n        # Note: Using f-strings for table/column names is generally safe only if the names\n        # are controlled internally and not derived from arbitrary user input, to prevent SQL injection.\n        # For this task, we assume key1 and key2 are safe identifiers.\n        query = f\"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)\"\n        self._execute_query(query, commit=True)\n        print(f\"Table '{table_name}' created or already exists.\")\n\n\n    def insert_into_database(self, table_name, data):\n        \"\"\"\n        Insert data into the specified table in the database.\n        Assumes the dictionary keys in data correspond to the column names (excluding 'id')\n        defined during table creation (key1 and key2).\n        :param table_name: str, the name of the table to insert data into.\n        :param data: list, a list of dictionaries where each dictionary represents a row of data.\n        >>> db.insert_into_database('user', [\n                {'name': 'John', 'age': 25},\n                {'name': 'Alice', 'age': 30}\n            ])\n        \"\"\"\n        if not data:\n            print(\"No data provided for insertion.\")\n            return\n\n        # Get the column names from the table schema (excluding 'id')\n        # This determines the expected keys in the input dictionaries\n        column_names = self._get_column_names(table_name)\n        if not column_names:\n            print(f\"Error: Table '{table_name}' not found or structure is unexpected for insertion.\")\n            return\n\n        # Prepare the data for executemany. Values must be in the order of column_names.\n        values_to_insert = []\n        for row_dict in data:\n            try:\n                # Extract values from the dictionary based on the discovered column names\n                row_values = tuple(row_dict[col_name] for col_name in column_names)\n                values_to_insert.append(row_values)\n            except KeyError as e:\n                print(f\"Skipping row due to missing key: '{e}' in dictionary {row_dict}. Expected keys: {column_names}\")\n                continue # Skip this row and process the next\n            except Exception as e:\n                 print(f\"Skipping row due to unexpected error: {e} with dictionary {row_dict}\")\n                 continue\n\n        if not values_to_insert:\n             print(\"No valid data rows to insert after processing input.\")\n             return\n\n        placeholders = ', '.join(['?'] * len(column_names))\n        cols = ', '.join(column_names)\n        query = f\"INSERT INTO {table_name} ({cols}) VALUES ({placeholders})\"\n\n        conn = None\n        cursor = None\n        try:\n            conn = sqlite3.connect(self.database_name)\n            cursor = conn.cursor()\n            cursor.executemany(query, values_to_insert)\n            conn.commit()\n            print(f\"Successfully inserted {len(values_to_insert)} rows into '{table_name}'.\")\n        except sqlite3.Error as e:\n            print(f\"Database error during insertion: {e}\")\n            if conn:\n                conn.rollback()\n        finally:\n            if cursor:\n                cursor.close()\n            if conn:\n                conn.close()\n\n\n    def search_database(self, table_name, name):\n        \"\"\"\n        Search the specified table in the database for rows with a matching name.\n        Assumes the 'name' search criterion applies to the first column defined\n        after the primary key (i.e., corresponds to key1 from create_table).\n        :param table_name: str, the name of the table to search.\n        :param name: str, the name to search for.\n        :return: list, a list of tuples representing the rows with matching name, if any;\n                    otherwise, returns None.\n        >>> db.search_database('user', 'John')\n        [(1, 'John', 25)]\n        \"\"\"\n        # Get the column names from the table schema (excluding 'id')\n        column_names = self._get_column_names(table_name)\n        if not column_names:\n            print(f\"Error: Table '{table_name}' not found or structure is unexpected for search.\")\n            return None # Adhere to docstring returning None\n\n        # The 'name' search is assumed to be on the first column defined after the PK\n        # which corresponds to key1 from create_table. This is column_names[0].\n        if not column_names: # Double check in case _get_column_names returned empty list for some reason\n            print(f\"Error: No searchable columns found in table '{table_name}'.\")\n            return None\n\n        search_column_name = column_names[0] # Assuming key1 is the search column\n\n        query = f\"SELECT * FROM {table_name} WHERE {search_column_name} = ?\"\n        result = self._execute_query(query, (name,), fetchall=True)\n\n        # _execute_query returns None on database error.\n        # fetchall() returns an empty list if no rows match.\n        if result is not None and len(result) > 0:\n            return result\n        else:\n            # Adhere to docstring requirement to return None if no results or error\n            if result is not None: # It was an empty list, not an error\n                 print(f\"No rows found in '{table_name}' with {search_column_name} = '{name}'.\")\n            return None\n\n\n    def delete_from_database(self, table_name, name):\n        \"\"\"\n        Delete rows from the specified table in the database with a matching name.\n        Assumes the 'name' deletion criterion applies to the first column defined\n        after the primary key (i.e., corresponds to key1 from create_table).\n        :param table_name: str, the name of the table to delete rows from.\n        :param name: str, the name to match for deletion.\n        >>> db.delete_from_database('user', 'John')\n        \"\"\"\n        # Get the column names from the table schema (excluding 'id')\n        column_names = self._get_column_names(table_name)\n        if not column_names:\n            print(f\"Error: Table '{table_name}' not found or structure is unexpected for deletion.\")\n            return\n\n        # The 'name' deletion is assumed to be on the first column defined after the PK\n        # which corresponds to key1 from create_table. This is column_names[0].\n        if not column_names: # Double check in case _get_column_names returned empty list\n            print(f\"Error: No deletable columns found in table '{table_name}'.\")\n            return\n\n        delete_column_name = column_names[0] # Assuming key1 is the deletion criterion\n\n        query = f\"DELETE FROM {table_name} WHERE {delete_column_name} = ?\"\n        # Use _execute_query with commit=True\n        # _execute_query returns None on error, but we don't need the result here.\n        success = self._execute_query(query, (name,), commit=True)\n\n        if success is not None: # _execute_query returns None on database error\n             print(f\"Executed delete command for rows in '{table_name}' with {delete_column_name} = '{name}'.\")\n             # Note: Getting the exact number of deleted rows requires inspecting cursor.rowcount\n             # after execute, which is not directly exposed by the current helper structure.\n             # The current print confirms the command was sent and committed without DB error.\n\n\n# Example Usage (optional, uncomment to run)\nif __name__ == '__main__':\n    db_name = 'my_database.db'\n    db = DatabaseProcessor(db_name)\n\n    # Clean up previous runs\n    import os\n    if os.path.exists(db_name):\n        os.remove(db_name)\n        print(f\"Removed existing database '{db_name}'.\")\n\n    # 1. Create table\n    db.create_table('users', 'username', 'score')\n    db.create_table('products', 'product_name', 'price')\n    db.create_table('empty_table', 'colA', 'colB')\n\n\n    # 2. Insert data\n    user_data = [\n        {'username': 'Alice', 'score': 100},\n        {'username': 'Bob', 'score': 75},\n        {'username': 'Charlie', 'score': 120},\n        {'username': 'Alice', 'score': 90}, # Another Alice\n        {'username': 'David', 'score': 'invalid'}, # Example of invalid data type\n        {'username': 'Eve'}, # Example of missing key\n        {'username_typo': 'Frank', 'score': 50} # Example of wrong key\n    ]\n    db.insert_into_database('users', user_data)\n\n    product_data = [\n        {'product_name': 'Laptop', 'price': 1200},\n        {'product_name': 'Keyboard', 'price': 75},\n    ]\n    db.insert_into_database('products', product_data)\n\n    db.insert_into_database('non_existent_table', [{'a':1, 'b':2}]) # Example of inserting into non-existent table\n\n    # 3. Search data\n    print(\"\\n--- Searching Data ---\")\n    print(\"Searching for 'Alice' in 'users':\")\n    alice_rows = db.search_database('users', 'Alice')\n    if alice_rows:\n        for row in alice_rows:\n            print(row)\n    else:\n        print(\"No users found named Alice.\")\n\n    print(\"\\nSearching for 'David' in 'users':\")\n    david_rows = db.search_database('users', 'David')\n    if david_rows:\n         for row in david_rows:\n            print(row)\n    else:\n        print(\"No users found named David.\") # Should print this\n\n    print(\"\\nSearching for 'Laptop' in 'products':\")\n    laptop_rows = db.search_database('products', 'Laptop')\n    if laptop_rows:\n        for row in laptop_rows:\n            print(row)\n    else:\n        print(\"No products found named Laptop.\")\n\n    print(\"\\nSearching in 'empty_table':\")\n    empty_search = db.search_database('empty_table', 'something')\n    if empty_search:\n         for row in empty_search:\n            print(row)\n    else:\n        print(\"No results from empty_table search (correctly returned None).\") # Should print this\n\n    print(\"\\nSearching in 'non_existent_table':\")\n    non_existent_search = db.search_database('non_existent_table', 'test') # Should print error\n    if non_existent_search:\n         for row in non_existent_search:\n            print(row)\n    else:\n        print(\"Search in non_existent_table returned None (correct).\") # Should print this\n\n\n    # 4. Delete data\n    print(\"\\n--- Deleting Data ---\")\n    print(\"Deleting 'Bob' from 'users':\")\n    db.delete_from_database('users', 'Bob')\n\n    print(\"\\nSearching for 'Bob' in 'users' after deletion:\")\n    bob_rows_after_delete = db.search_database('users', 'Bob')\n    if bob_rows_after_delete:\n        for row in bob_rows_after_delete:\n            print(row)\n    else:\n        print(\"No users found named Bob after deletion.\") # Should print this\n\n    print(\"\\nDeleting 'Alice' from 'users':\")\n    db.delete_from_database('users', 'Alice') # Deletes both remaining Alices\n\n    print(\"\\nSearching for 'Alice' in 'users' after deletion:\")\n    alice_rows_after_delete = db.search_database('users', 'Alice')\n    if alice_rows_after_delete:\n        for row in alice_rows_after_delete:\n            print(row)\n    else:\n        print(\"No users found named Alice after deletion.\") # Should print this\n\n    print(\"\\nDeleting from 'non_existent_table':\")\n    db.delete_from_database('non_existent_table', 'test') # Should print error\n```"
    ]
  },
  {
    "task_id": "ClassEval_60",
    "skeleton": "import sqlite3\n\nclass MovieTicketDB:\n    \"\"\"\n    This is a class for movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the MovieTicketDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n\n    def create_table(self):\n        \"\"\"\n        Creates a \"tickets\" table in the database if it does not exist already.Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str\n        :return: None\n        \"\"\"\n\n    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        \"\"\"\n        Inserts a new ticket into the \"tickets\" table.\n        :param movie_name: str, the name of the movie.\n        :param theater_name: str, the name of the theater.\n        :param seat_number: str, the seat number.\n        :param customer_name: str, the name of the customer.\n        :return: None\n        \"\"\"\n\n    def search_tickets_by_customer(self, customer_name):\n        \"\"\"\n        Searches for tickets in the \"tickets\" table by customer name.\n        :param customer_name: str, the name of the customer to search for.\n        :return: list of tuples, the rows from the \"tickets\" table that match the search criteria.\n        >>> ticket_db = MovieTicketDB(\"ticket_database.db\")\n        >>> ticket_db.create_table()\n        >>> ticket_db.insert_ticket(\"Movie A\", \"Theater 1\", \"A1\", \"John Doe\")\n        >>> result = ticket_db.search_tickets_by_customer(\"John Doe\")\n        len(result) = 1\n        \"\"\"\n\n    def delete_ticket(self, ticket_id):\n        \"\"\"\n        Deletes a ticket from the \"tickets\" table by ticket ID.\n        :param ticket_id: int, the ID of the ticket to delete.\n        :return: None\n        \"\"\"",
    "test": "import unittest\nimport os\n\n\nclass MovieTicketDBTestInsertTicket(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_insert_ticket_1(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'John Doe')\n\n    def test_insert_ticket_2(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'aaa')\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'aaa')\n\n    def test_insert_ticket_3(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'bbb')\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'bbb')\n\n    def test_insert_ticket_4(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ccc')\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ccc')\n\n    def test_insert_ticket_5(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ddd')\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ddd')\n\n\nclass MovieTicketDBTestSearchTicketsByCustomer(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_search_tickets_by_customer_1(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'John Doe')\n\n    def test_search_tickets_by_customer_2(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'aaa')\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'aaa')\n\n    def test_search_tickets_by_customer_3(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'bbb')\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'bbb')\n\n    def test_search_tickets_by_customer_4(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ccc')\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ccc')\n\n    def test_search_tickets_by_customer_5(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ddd')\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ddd')\n\n\nclass MovieTicketDBTestDeleteTicket(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_delete_ticket_1(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_2(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'aaa')\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_3(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'bbb')\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_4(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ccc')\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_5(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ddd')\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 0)\n\n\nclass MovieTicketDBTest(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_MovieTicketDB(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'John Doe')\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 0)",
    "solution_code": "import sqlite3\n\n\nclass MovieTicketDB:\n    def __init__(self, db_name):\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS tickets (\n                id INTEGER PRIMARY KEY,\n                movie_name TEXT,\n                theater_name TEXT,\n                seat_number TEXT,\n                customer_name TEXT\n            )\n        ''')\n        self.connection.commit()\n\n    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        self.cursor.execute('''\n            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)\n            VALUES (?, ?, ?, ?)\n        ''', (movie_name, theater_name, seat_number, customer_name))\n        self.connection.commit()\n\n    def search_tickets_by_customer(self, customer_name):\n        self.cursor.execute('''\n            SELECT * FROM tickets WHERE customer_name = ?\n        ''', (customer_name,))\n        tickets = self.cursor.fetchall()\n        return tickets\n\n    def delete_ticket(self, ticket_id):\n        self.cursor.execute('''\n            DELETE FROM tickets WHERE id = ?\n        ''', (ticket_id,))\n        self.connection.commit()",
    "import_statement": [
      "import sqlite3"
    ],
    "class_description": "    \"\"\"\n    This is a class for movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.\n    \"\"\"\n",
    "class_name": "MovieTicketDB",
    "test_classes": [
      "MovieTicketDBTestInsertTicket",
      "MovieTicketDBTestSearchTicketsByCustomer",
      "MovieTicketDBTestDeleteTicket",
      "MovieTicketDBTest"
    ],
    "class_constructor": "class MovieTicketDB: \n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the MovieTicketDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n\n",
    "fields": [
      "self.connection",
      "self.cursor"
    ],
    "methods_info": [
      {
        "method_name": "create_table",
        "method_description": "def create_table(self):\n        \"\"\"\n        Creates a \"tickets\" table in the database if it does not exist already.Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str\n        :return: None\n        \"\"\"",
        "test_class": "MovieTicketDBTestInsertTicket",
        "test_code": "class MovieTicketDBTestInsertTicket(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_insert_ticket_1(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'John Doe')\n\n    def test_insert_ticket_2(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'aaa')\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'aaa')\n\n    def test_insert_ticket_3(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'bbb')\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'bbb')\n\n    def test_insert_ticket_4(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ccc')\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ccc')\n\n    def test_insert_ticket_5(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ddd')\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ddd')",
        "solution_code": "def create_table(self):\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS tickets (\n                id INTEGER PRIMARY KEY,\n                movie_name TEXT,\n                theater_name TEXT,\n                seat_number TEXT,\n                customer_name TEXT\n            )\n        ''')\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "insert_ticket",
        "method_description": "def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        \"\"\"\n        Inserts a new ticket into the \"tickets\" table.\n        :param movie_name: str, the name of the movie.\n        :param theater_name: str, the name of the theater.\n        :param seat_number: str, the seat number.\n        :param customer_name: str, the name of the customer.\n        :return: None\n        \"\"\"",
        "test_class": "MovieTicketDBTestSearchTicketsByCustomer",
        "test_code": "class MovieTicketDBTestSearchTicketsByCustomer(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_search_tickets_by_customer_1(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'John Doe')\n\n    def test_search_tickets_by_customer_2(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'aaa')\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'aaa')\n\n    def test_search_tickets_by_customer_3(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'bbb')\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'bbb')\n\n    def test_search_tickets_by_customer_4(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ccc')\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ccc')\n\n    def test_search_tickets_by_customer_5(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ddd')\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'ddd')",
        "solution_code": "def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        self.cursor.execute('''\n            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)\n            VALUES (?, ?, ?, ?)\n        ''', (movie_name, theater_name, seat_number, customer_name))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "search_tickets_by_customer",
        "method_description": "def search_tickets_by_customer(self, customer_name):\n        \"\"\"\n        Searches for tickets in the \"tickets\" table by customer name.\n        :param customer_name: str, the name of the customer to search for.\n        :return: list of tuples, the rows from the \"tickets\" table that match the search criteria.\n        >>> ticket_db = MovieTicketDB(\"ticket_database.db\")\n        >>> ticket_db.create_table()\n        >>> ticket_db.insert_ticket(\"Movie A\", \"Theater 1\", \"A1\", \"John Doe\")\n        >>> result = ticket_db.search_tickets_by_customer(\"John Doe\")\n        len(result) = 1\n        \"\"\"",
        "test_class": "MovieTicketDBTestDeleteTicket",
        "test_code": "class MovieTicketDBTestDeleteTicket(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_delete_ticket_1(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_2(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'aaa')\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('aaa')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_3(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'bbb')\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('bbb')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_4(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ccc')\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('ccc')\n        self.assertEqual(len(tickets), 0)\n\n    def test_delete_ticket_5(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'ddd')\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 1)\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('ddd')\n        self.assertEqual(len(tickets), 0)",
        "solution_code": "def search_tickets_by_customer(self, customer_name):\n        self.cursor.execute('''\n            SELECT * FROM tickets WHERE customer_name = ?\n        ''', (customer_name,))\n        tickets = self.cursor.fetchall()\n        return tickets",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "delete_ticket",
        "method_description": "def delete_ticket(self, ticket_id):\n        \"\"\"\n        Deletes a ticket from the \"tickets\" table by ticket ID.\n        :param ticket_id: int, the ID of the ticket to delete.\n        :return: None\n        \"\"\"",
        "test_class": "MovieTicketDBTest",
        "test_code": "class MovieTicketDBTest(unittest.TestCase):\n    def setUp(self):\n        self.db_name = 'test_database.db'\n        self.db = MovieTicketDB(self.db_name)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.remove(self.db_name)\n\n    def test_MovieTicketDB(self):\n        self.db.insert_ticket('Avengers: Endgame', 'Cinema 1', 'A1', 'John Doe')\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 1)\n        ticket = tickets[0]\n        self.assertEqual(ticket[1], 'Avengers: Endgame')\n        self.assertEqual(ticket[2], 'Cinema 1')\n        self.assertEqual(ticket[3], 'A1')\n        self.assertEqual(ticket[4], 'John Doe')\n        ticket_id = tickets[0][0]\n        self.db.delete_ticket(ticket_id)\n        tickets = self.db.search_tickets_by_customer('John Doe')\n        self.assertEqual(len(tickets), 0)",
        "solution_code": "def delete_ticket(self, ticket_id):\n        self.cursor.execute('''\n            DELETE FROM tickets WHERE id = ?\n        ''', (ticket_id,))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nimport sqlite3\n\nclass MovieTicketDB:\n    \"\"\"\n    This is a class for movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the MovieTicketDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n\n    def create_table(self):\n        \"\"\"\n        Creates a \"tickets\" table in the database if it does not exist already.Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str\n        :return: None\n        \"\"\"\n        try:\n            self.cursor.execute('''\n                CREATE TABLE IF NOT EXISTS tickets (\n                    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n                    movie_name TEXT NOT NULL,\n                    theater_name TEXT NOT NULL,\n                    seat_number TEXT NOT NULL,\n                    customer_name TEXT NOT NULL\n                )\n            ''')\n            self.connection.commit()\n            print(\"Table 'tickets' created successfully (or already exists).\")\n        except sqlite3.Error as e:\n            print(f\"An error occurred while creating the table: {e}\")\n            # Optionally rollback if creation failed mid-way, though IF NOT EXISTS handles most cases\n            # self.connection.rollback()\n\n\n    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        \"\"\"\n        Inserts a new ticket into the \"tickets\" table.\n        :param movie_name: str, the name of the movie.\n        :param theater_name: str, the name of the theater.\n        :param seat_number: str, the seat number.\n        :param customer_name: str, the name of the customer.\n        :return: None\n        \"\"\"\n        try:\n            self.cursor.execute('''\n                INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)\n                VALUES (?, ?, ?, ?)\n            ''', (movie_name, theater_name, seat_number, customer_name))\n            self.connection.commit()\n            print(f\"Ticket for {movie_name} ({seat_number}) inserted successfully.\")\n        except sqlite3.Error as e:\n            print(f\"An error occurred while inserting the ticket: {e}\")\n            self.connection.rollback()\n\n\n    def search_tickets_by_customer(self, customer_name):\n        \"\"\"\n        Searches for tickets in the \"tickets\" table by customer name.\n        :param customer_name: str, the name of the customer to search for.\n        :return: list of tuples, the rows from the \"tickets\" table that match the search criteria.\n        >>> ticket_db = MovieTicketDB(\":memory:\") # Use in-memory db for tests\n        >>> ticket_db.create_table()\n        >>> ticket_db.insert_ticket(\"Movie A\", \"Theater 1\", \"A1\", \"John Doe\")\n        >>> ticket_db.insert_ticket(\"Movie B\", \"Theater 2\", \"B2\", \"Jane Smith\")\n        >>> ticket_db.insert_ticket(\"Movie A\", \"Theater 1\", \"A2\", \"John Doe\")\n        >>> result_john = ticket_db.search_tickets_by_customer(\"John Doe\")\n        >>> len(result_john)\n        2\n        >>> result_jane = ticket_db.search_tickets_by_customer(\"Jane Smith\")\n        >>> len(result_jane)\n        1\n        >>> result_nonexistent = ticket_db.search_tickets_by_customer(\"Peter Pan\")\n        >>> len(result_nonexistent)\n        0\n        >>> ticket_db.close() # Clean up connection\n        \"\"\"\n        try:\n            self.cursor.execute(\"SELECT * FROM tickets WHERE customer_name = ?\", (customer_name,))\n            rows = self.cursor.fetchall()\n            return rows\n        except sqlite3.Error as e:\n            print(f\"An error occurred while searching for tickets: {e}\")\n            return []\n\n\n    def delete_ticket(self, ticket_id):\n        \"\"\"\n        Deletes a ticket from the \"tickets\" table by ticket ID.\n        :param ticket_id: int, the ID of the ticket to delete.\n        :return: None\n        >>> ticket_db = MovieTicketDB(\":memory:\")\n        >>> ticket_db.create_table()\n        >>> ticket_db.insert_ticket(\"Movie X\", \"Theater 3\", \"C3\", \"Customer 1\")\n        >>> ticket_db.insert_ticket(\"Movie Y\", \"Theater 4\", \"D4\", \"Customer 2\")\n        >>> initial_count = len(ticket_db.search_tickets_by_customer(\"Customer 1\"))\n        >>> initial_count\n        1\n        >>> # Assuming ID 1 was assigned to the first ticket\n        >>> ticket_db.delete_ticket(1)\n        Ticket with ID 1 deleted successfully (if it existed).\n        >>> updated_count = len(ticket_db.search_tickets_by_customer(\"Customer 1\"))\n        >>> updated_count\n        0\n        >>> ticket_db.delete_ticket(999) # Try deleting non-existent ID\n        Ticket with ID 999 deleted successfully (if it existed).\n        >>> ticket_db.close()\n\n        \"\"\"\n        try:\n            self.cursor.execute(\"DELETE FROM tickets WHERE ID = ?\", (ticket_id,))\n            self.connection.commit()\n            # print(f\"Ticket with ID {ticket_id} deleted successfully.\") # Can't know if it actually deleted one row without checking rowcount\n            # A more accurate message could check rowcount:\n            # if self.cursor.rowcount > 0:\n            #     print(f\"Ticket with ID {ticket_id} deleted successfully.\")\n            # else:\n            #     print(f\"No ticket found with ID {ticket_id}.\")\n            # Keeping original print for simplicity as requested by structure\n            print(f\"Ticket with ID {ticket_id} deleted successfully (if it existed).\")\n        except sqlite3.Error as e:\n            print(f\"An error occurred while deleting the ticket: {e}\")\n            self.connection.rollback()\n\n    def close(self):\n        \"\"\"\n        Closes the database connection.\n        :return: None\n        \"\"\"\n        if self.connection:\n            self.connection.close()\n            print(\"Database connection closed.\")\n\n# Example usage (optional - for testing the class)\nif __name__ == '__main__':\n    # Create a database in memory for testing\n    db = MovieTicketDB(\":memory:\")\n\n    # Insert tickets\n    db.insert_ticket(\"Inception\", \"AMC 12\", \"D10\", \"Alice Wonderland\")\n    db.insert_ticket(\"The Matrix\", \"Regal Cinema\", \"A5\", \"Bob Builder\")\n    db.insert_ticket(\"Inception\", \"AMC 12\", \"D11\", \"Alice Wonderland\")\n    db.insert_ticket(\"Parasite\", \"Arthouse Theater\", \"G7\", \"Charlie Chaplin\")\n\n    # Search for tickets\n    print(\"\\nSearching for tickets for Alice Wonderland:\")\n    alice_tickets = db.search_tickets_by_customer(\"Alice Wonderland\")\n    if alice_tickets:\n        for ticket in alice_tickets:\n            print(ticket)\n    else:\n        print(\"No tickets found for Alice Wonderland.\")\n\n    print(\"\\nSearching for tickets for Bob Builder:\")\n    bob_tickets = db.search_tickets_by_customer(\"Bob Builder\")\n    if bob_tickets:\n        for ticket in bob_tickets:\n            print(ticket)\n    else:\n        print(\"No tickets found for Bob Builder.\")\n\n    print(\"\\nSearching for tickets for David:\")\n    david_tickets = db.search_tickets_by_customer(\"David\")\n    if david_tickets:\n        for ticket in david_tickets:\n            print(ticket)\n    else:\n        print(\"No tickets found for David.\")\n\n    # Get all tickets to find an ID to delete\n    print(\"\\nAll tickets before deletion:\")\n    db.cursor.execute(\"SELECT * FROM tickets\")\n    all_tickets = db.cursor.fetchall()\n    for ticket in all_tickets:\n        print(ticket)\n\n    # Assuming the first ticket (Inception for Alice) has ID 1\n    if all_tickets:\n        ticket_id_to_delete = all_tickets[0][0] # Get the ID of the first ticket\n        print(f\"\\nDeleting ticket with ID {ticket_id_to_delete}...\")\n        db.delete_ticket(ticket_id_to_delete)\n\n        print(\"\\nAll tickets after deletion:\")\n        db.cursor.execute(\"SELECT * FROM tickets\")\n        all_tickets_after_delete = db.cursor.fetchall()\n        for ticket in all_tickets_after_delete:\n            print(ticket)\n\n    # Close the connection\n    db.close()\n\n    # Demonstrate the docstring examples (requires doctest)\n    # import doctest\n    # print(\"\\nRunning doctests...\")\n    # doctest.testmod()\n```"
    ]
  },
  {
    "task_id": "ClassEval_79",
    "skeleton": "class SQLGenerator:\n    \"\"\"\n    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.\n    \"\"\"\n\n    def __init__(self, table_name):\n        \"\"\"\n        Initialize the table name.\n        :param table_name: str\n        \"\"\"\n        self.table_name = table_name\n\n    def select(self, fields=None, condition=None):\n        \"\"\"\n        Generates a SELECT SQL statement based on the specified fields and conditions.\n        :param fields: list, optional. Default is None. The list of fields to be queried.\n        :param condition: str, optional. Default is None. The condition expression for the query.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1')\n        >>> sql.select(['field1', 'field2'], 'filed3 = value1')\n        'SELECT field1, field2 FROM table1 WHERE filed3 = value1;'\n        \"\"\"\n\n    def insert(self, data):\n        \"\"\"\n        Generates an INSERT SQL statement based on the given data.\n        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.\n        :return: str. The generated SQL statement.\n        >>> sql.insert({'key1': 'value1', 'key2': 'value2'})\n        \"INSERT INTO table1 (key1, key2) VALUES ('value1', 'value2');\"\n        \"\"\"\n\n\n    def update(self, data, condition):\n        \"\"\"\n        Generates an UPDATE SQL statement based on the given data and condition.\n        :param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.\n        :param condition: str. The condition expression for the update.\n        :return: str. The generated SQL statement.\n        >>> sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, \"field3 = value1\")\n        \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\"\n        \"\"\"\n\n    def delete(self, condition):\n        \"\"\"\n        Generates a DELETE SQL statement based on the given condition.\n        :param condition: str. The condition expression for the delete.\n        :return: str. The generated SQL statement.\n        >>> sql.delete(\"field1 = value1\")\n        'DELETE FROM table1 WHERE field1 = value1;'\n        \"\"\"\n\n    def select_female_under_age(self, age):\n        \"\"\"\n        Generates a SQL statement to select females under a specified age.\n        :param age: int. The specified age.\n        :return: str. The generated SQL statement.\n        >>> sql.select_female_under_age(30)\n        \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\"\n        \"\"\"\n\n    def select_by_age_range(self, min_age, max_age):\n        \"\"\"\n        Generates a SQL statement to select records within a specified age range.\n        :param min_age: int. The minimum age.\n        :param max_age: int. The maximum age.\n        :return: str. The generated SQL statement.\n        >>> sql.select_by_age_range(20, 30)\n        'SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;'\n        \"\"\"",
    "test": "import unittest\n\nclass SQLGeneratorTestSelect(unittest.TestCase):\n    def test_select_1(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1'], \"field2 = value1\")\n        self.assertEqual(result, \"SELECT field1 FROM table1 WHERE field2 = value1;\")\n\n    def test_select_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1', 'field2'], \"field3 = value1\")\n        self.assertEqual(result, \"SELECT field1, field2 FROM table1 WHERE field3 = value1;\")\n\n    def test_select_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1, field2'], \"field3 = value1\")\n        self.assertEqual(result, \"SELECT field1, field2 FROM table1 WHERE field3 = value1;\")\n\n    def test_select_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1, field2'], \"field3 = value1, field4 = value2\")\n        self.assertEqual(result, \"SELECT field1, field2 FROM table1 WHERE field3 = value1, field4 = value2;\")\n\n    def test_select_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1'], \"field2 = value1, field3 = value2\")\n        self.assertEqual(result, \"SELECT field1 FROM table1 WHERE field2 = value1, field3 = value2;\")\n\n    def test_select_6(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1'])\n        self.assertEqual(result, \"SELECT field1 FROM table1;\")\n\n\n\nclass SQLGeneratorTestInsert(unittest.TestCase):\n    def test_insert(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2'})\n        self.assertEqual(result, \"INSERT INTO table1 (field1, field2) VALUES ('value1', 'value2');\")\n\n    def test_insert_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3'})\n        self.assertEqual(result, \"INSERT INTO table1 (field1, field2, field3) VALUES ('value1', 'value2', 'value3');\")\n\n    def test_insert_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4'})\n        self.assertEqual(result,\n                         \"INSERT INTO table1 (field1, field2, field3, field4) VALUES ('value1', 'value2', 'value3', 'value4');\")\n\n    def test_insert_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4',\n                             'field5': 'value5'})\n        self.assertEqual(result,\n                         \"INSERT INTO table1 (field1, field2, field3, field4, field5) VALUES ('value1', 'value2', 'value3', 'value4', 'value5');\")\n\n    def test_insert_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4',\n                             'field5': 'value5', 'field6': 'value6'})\n        self.assertEqual(result,\n                         \"INSERT INTO table1 (field1, field2, field3, field4, field5, field6) VALUES ('value1', 'value2', 'value3', 'value4', 'value5', 'value6');\")\n\nclass SQLGeneratorTestUpdate(unittest.TestCase):\n    def test_update(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, \"field3 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\")\n\n    def test_update_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3'},\n                            \"field4 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3' WHERE field4 = value1;\")\n\n    def test_update_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',\n                             'field4': 'new_value4'}, \"field5 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3', field4 = 'new_value4' WHERE field5 = value1;\")\n\n    def test_update_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',\n                             'field4': 'new_value4', 'field5': 'new_value5'}, \"field6 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3', field4 = 'new_value4', field5 = 'new_value5' WHERE field6 = value1;\")\n\n    def test_update_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',\n                             'field4': 'new_value4', 'field5': 'new_value5', 'field6': 'new_value6'},\n                            \"field7 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3', field4 = 'new_value4', field5 = 'new_value5', field6 = 'new_value6' WHERE field7 = value1;\")\n\nclass SQLGeneratorTestDelete(unittest.TestCase):\n    def test_delete(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1\")\n        self.assertEqual(result, \"DELETE FROM table1 WHERE field1 = value1;\")\n\n    def test_delete_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2\")\n        self.assertEqual(result, \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2;\")\n\n    def test_delete_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2 AND field3 = value3\")\n        self.assertEqual(result, \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2 AND field3 = value3;\")\n\n    def test_delete_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4\")\n        self.assertEqual(result,\n                         \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4;\")\n\n    def test_delete_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4 AND field5 = value5\")\n        self.assertEqual(result,\n                         \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4 AND field5 = value5;\")\n\nclass SQLGeneratorTestSelectFemaleUnderAge(unittest.TestCase):\n    def test_select_female_under_age(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(30)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\")\n\n    def test_select_female_under_age_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(40)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 40 AND gender = 'female';\")\n\n    def test_select_female_under_age_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(20)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 20 AND gender = 'female';\")\n\n    def test_select_female_under_age_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(10)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 10 AND gender = 'female';\")\n\n    def test_select_female_under_age_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(50)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 50 AND gender = 'female';\")\n\nclass SQLGeneratorTestSelectByAgeRange(unittest.TestCase):\n    def test_select_by_age_range(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(20, 30)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;\")\n\n    def test_select_by_age_range_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(10, 20)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 10 AND 20;\")\n\n    def test_select_by_age_range_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(30, 40)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 30 AND 40;\")\n\n    def test_select_by_age_range_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(40, 50)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 40 AND 50;\")\n\n    def test_select_by_age_range_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(50, 60)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 50 AND 60;\")\n\n\nclass SQLGeneratorTestMain(unittest.TestCase):\n    def test_main(self):\n        sql = SQLGenerator('table1')\n        self.assertEqual(sql.select(['field1', 'field2'], \"field3 = value1\"),\n                         \"SELECT field1, field2 FROM table1 WHERE field3 = value1;\")\n        self.assertEqual(sql.insert({'field1': 'value1', 'field2': 'value2'}),\n                         \"INSERT INTO table1 (field1, field2) VALUES ('value1', 'value2');\")\n        self.assertEqual(sql.update({'field1': 'new_value1', 'field2': 'new_value2'},\n                                    \"field3 = value1\"),\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\")\n        self.assertEqual(sql.delete(\"field1 = value1\"),\n                         \"DELETE FROM table1 WHERE field1 = value1;\")\n        self.assertEqual(sql.select_female_under_age(30),\n                         \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\")\n        self.assertEqual(sql.select_by_age_range(20, 30),\n                         \"SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;\")",
    "solution_code": "class SQLGenerator:\n    def __init__(self, table_name):\n        self.table_name = table_name\n\n    def select(self, fields=None, condition=None):\n        if fields is None:\n            fields = \"*\"\n        else:\n            fields = \", \".join(fields)\n        sql = f\"SELECT {fields} FROM {self.table_name}\"\n        if condition is not None:\n            sql += f\" WHERE {condition}\"\n        return sql + \";\"\n\n    def insert(self, data):\n        fields = \", \".join(data.keys())\n        values = \", \".join([f\"'{value}'\" for value in data.values()])\n        sql = f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\"\n        return sql + \";\"\n\n    def update(self, data, condition):\n        set_clause = \", \".join([f\"{field} = '{value}'\" for field, value in data.items()])\n        sql = f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\"\n        return sql + \";\"\n\n    def delete(self, condition):\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition}\"\n        return sql + \";\"\n\n    def select_female_under_age(self, age):\n        condition = f\"age < {age} AND gender = 'female'\"\n        return self.select(condition=condition)\n\n    def select_by_age_range(self, min_age, max_age):\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\n        return self.select(condition=condition)",
    "import_statement": [],
    "class_description": "    \"\"\"\n    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.\n    \"\"\"\n",
    "class_name": "SQLGenerator",
    "test_classes": [
      "SQLGeneratorTestSelect",
      "SQLGeneratorTestInsert",
      "SQLGeneratorTestUpdate",
      "SQLGeneratorTestDelete",
      "SQLGeneratorTestSelectFemaleUnderAge",
      "SQLGeneratorTestSelectByAgeRange",
      "SQLGeneratorTestMain"
    ],
    "class_constructor": "class SQLGenerator: \n    def __init__(self, table_name):\n        \"\"\"\n        Initialize the table name.\n        :param table_name: str\n        \"\"\"\n        self.table_name = table_name\n\n",
    "fields": [
      "self.table_name"
    ],
    "methods_info": [
      {
        "method_name": "select",
        "method_description": "def select(self, fields=None, condition=None):\n        \"\"\"\n        Generates a SELECT SQL statement based on the specified fields and conditions.\n        :param fields: list, optional. Default is None. The list of fields to be queried.\n        :param condition: str, optional. Default is None. The condition expression for the query.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1')\n        >>> sql.select(['field1', 'field2'], 'filed3 = value1')\n        'SELECT field1, field2 FROM table1 WHERE filed3 = value1;'\n        \"\"\"",
        "test_class": "SQLGeneratorTestSelect",
        "test_code": "class SQLGeneratorTestSelect(unittest.TestCase):\n    def test_select_1(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1'], \"field2 = value1\")\n        self.assertEqual(result, \"SELECT field1 FROM table1 WHERE field2 = value1;\")\n\n    def test_select_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1', 'field2'], \"field3 = value1\")\n        self.assertEqual(result, \"SELECT field1, field2 FROM table1 WHERE field3 = value1;\")\n\n    def test_select_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1, field2'], \"field3 = value1\")\n        self.assertEqual(result, \"SELECT field1, field2 FROM table1 WHERE field3 = value1;\")\n\n    def test_select_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1, field2'], \"field3 = value1, field4 = value2\")\n        self.assertEqual(result, \"SELECT field1, field2 FROM table1 WHERE field3 = value1, field4 = value2;\")\n\n    def test_select_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1'], \"field2 = value1, field3 = value2\")\n        self.assertEqual(result, \"SELECT field1 FROM table1 WHERE field2 = value1, field3 = value2;\")\n\n    def test_select_6(self):\n        sql = SQLGenerator('table1')\n        result = sql.select(['field1'])\n        self.assertEqual(result, \"SELECT field1 FROM table1;\")",
        "solution_code": "def select(self, fields=None, condition=None):\n        if fields is None:\n            fields = \"*\"\n        else:\n            fields = \", \".join(fields)\n        sql = f\"SELECT {fields} FROM {self.table_name}\"\n        if condition is not None:\n            sql += f\" WHERE {condition}\"\n        return sql + \";\"",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.table_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "insert",
        "method_description": "def insert(self, data):\n        \"\"\"\n        Generates an INSERT SQL statement based on the given data.\n        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.\n        :return: str. The generated SQL statement.\n        >>> sql.insert({'key1': 'value1', 'key2': 'value2'})\n        \"INSERT INTO table1 (key1, key2) VALUES ('value1', 'value2');\"\n        \"\"\"",
        "test_class": "SQLGeneratorTestInsert",
        "test_code": "class SQLGeneratorTestInsert(unittest.TestCase):\n    def test_insert(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2'})\n        self.assertEqual(result, \"INSERT INTO table1 (field1, field2) VALUES ('value1', 'value2');\")\n\n    def test_insert_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3'})\n        self.assertEqual(result, \"INSERT INTO table1 (field1, field2, field3) VALUES ('value1', 'value2', 'value3');\")\n\n    def test_insert_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4'})\n        self.assertEqual(result,\n                         \"INSERT INTO table1 (field1, field2, field3, field4) VALUES ('value1', 'value2', 'value3', 'value4');\")\n\n    def test_insert_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4',\n                             'field5': 'value5'})\n        self.assertEqual(result,\n                         \"INSERT INTO table1 (field1, field2, field3, field4, field5) VALUES ('value1', 'value2', 'value3', 'value4', 'value5');\")\n\n    def test_insert_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4',\n                             'field5': 'value5', 'field6': 'value6'})\n        self.assertEqual(result,\n                         \"INSERT INTO table1 (field1, field2, field3, field4, field5, field6) VALUES ('value1', 'value2', 'value3', 'value4', 'value5', 'value6');\")",
        "solution_code": "def insert(self, data):\n        fields = \", \".join(data.keys())\n        values = \", \".join([f\"'{value}'\" for value in data.values()])\n        sql = f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\"\n        return sql + \";\"",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.table_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "update",
        "method_description": "def update(self, data, condition):\n        \"\"\"\n        Generates an UPDATE SQL statement based on the given data and condition.\n        :param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.\n        :param condition: str. The condition expression for the update.\n        :return: str. The generated SQL statement.\n        >>> sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, \"field3 = value1\")\n        \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\"\n        \"\"\"",
        "test_class": "SQLGeneratorTestUpdate",
        "test_code": "class SQLGeneratorTestUpdate(unittest.TestCase):\n    def test_update(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, \"field3 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\")\n\n    def test_update_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3'},\n                            \"field4 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3' WHERE field4 = value1;\")\n\n    def test_update_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',\n                             'field4': 'new_value4'}, \"field5 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3', field4 = 'new_value4' WHERE field5 = value1;\")\n\n    def test_update_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',\n                             'field4': 'new_value4', 'field5': 'new_value5'}, \"field6 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3', field4 = 'new_value4', field5 = 'new_value5' WHERE field6 = value1;\")\n\n    def test_update_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',\n                             'field4': 'new_value4', 'field5': 'new_value5', 'field6': 'new_value6'},\n                            \"field7 = value1\")\n        self.assertEqual(result,\n                         \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2', field3 = 'new_value3', field4 = 'new_value4', field5 = 'new_value5', field6 = 'new_value6' WHERE field7 = value1;\")",
        "solution_code": "def update(self, data, condition):\n        set_clause = \", \".join([f\"{field} = '{value}'\" for field, value in data.items()])\n        sql = f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\"\n        return sql + \";\"",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.table_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "delete",
        "method_description": "def delete(self, condition):\n        \"\"\"\n        Generates a DELETE SQL statement based on the given condition.\n        :param condition: str. The condition expression for the delete.\n        :return: str. The generated SQL statement.\n        >>> sql.delete(\"field1 = value1\")\n        'DELETE FROM table1 WHERE field1 = value1;'\n        \"\"\"",
        "test_class": "SQLGeneratorTestDelete",
        "test_code": "class SQLGeneratorTestDelete(unittest.TestCase):\n    def test_delete(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1\")\n        self.assertEqual(result, \"DELETE FROM table1 WHERE field1 = value1;\")\n\n    def test_delete_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2\")\n        self.assertEqual(result, \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2;\")\n\n    def test_delete_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2 AND field3 = value3\")\n        self.assertEqual(result, \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2 AND field3 = value3;\")\n\n    def test_delete_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4\")\n        self.assertEqual(result,\n                         \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4;\")\n\n    def test_delete_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.delete(\"field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4 AND field5 = value5\")\n        self.assertEqual(result,\n                         \"DELETE FROM table1 WHERE field1 = value1 AND field2 = value2 AND field3 = value3 AND field4 = value4 AND field5 = value5;\")",
        "solution_code": "def delete(self, condition):\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition}\"\n        return sql + \";\"",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.table_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "select_female_under_age",
        "method_description": "def select_female_under_age(self, age):\n        \"\"\"\n        Generates a SQL statement to select females under a specified age.\n        :param age: int. The specified age.\n        :return: str. The generated SQL statement.\n        >>> sql.select_female_under_age(30)\n        \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\"\n        \"\"\"",
        "test_class": "SQLGeneratorTestSelectFemaleUnderAge",
        "test_code": "class SQLGeneratorTestSelectFemaleUnderAge(unittest.TestCase):\n    def test_select_female_under_age(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(30)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\")\n\n    def test_select_female_under_age_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(40)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 40 AND gender = 'female';\")\n\n    def test_select_female_under_age_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(20)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 20 AND gender = 'female';\")\n\n    def test_select_female_under_age_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(10)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 10 AND gender = 'female';\")\n\n    def test_select_female_under_age_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_female_under_age(50)\n        self.assertEqual(result,\"SELECT * FROM table1 WHERE age < 50 AND gender = 'female';\")",
        "solution_code": "def select_female_under_age(self, age):\n        condition = f\"age < {age} AND gender = 'female'\"\n        return self.select(condition=condition)",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": [
            "select"
          ]
        }
      },
      {
        "method_name": "select_by_age_range",
        "method_description": "def select_by_age_range(self, min_age, max_age):\n        \"\"\"\n        Generates a SQL statement to select records within a specified age range.\n        :param min_age: int. The minimum age.\n        :param max_age: int. The maximum age.\n        :return: str. The generated SQL statement.\n        >>> sql.select_by_age_range(20, 30)\n        'SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;'\n        \"\"\"",
        "test_class": "SQLGeneratorTestSelectByAgeRange",
        "test_code": "class SQLGeneratorTestSelectByAgeRange(unittest.TestCase):\n    def test_select_by_age_range(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(20, 30)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;\")\n\n    def test_select_by_age_range_2(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(10, 20)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 10 AND 20;\")\n\n    def test_select_by_age_range_3(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(30, 40)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 30 AND 40;\")\n\n    def test_select_by_age_range_4(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(40, 50)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 40 AND 50;\")\n\n    def test_select_by_age_range_5(self):\n        sql = SQLGenerator('table1')\n        result = sql.select_by_age_range(50, 60)\n        self.assertEqual(result, \"SELECT * FROM table1 WHERE age BETWEEN 50 AND 60;\")",
        "solution_code": "def select_by_age_range(self, min_age, max_age):\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\n        return self.select(condition=condition)",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": [
            "select"
          ]
        }
      }
    ],
    "predict": [
      "```python\nclass SQLGenerator:\n    \"\"\"\n    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.\n    \"\"\"\n\n    def __init__(self, table_name):\n        \"\"\"\n        Initialize the table name.\n        :param table_name: str\n        \"\"\"\n        if not isinstance(table_name, str) or not table_name:\n            raise ValueError(\"Table name must be a non-empty string.\")\n        self.table_name = table_name\n\n    def _quote_value(self, value):\n        \"\"\"\n        Helper method to appropriately quote values for SQL statements.\n        Handles strings by adding single quotes. Does not handle complex types or escaping\n        of quotes within strings (a limitation for simplicity as per examples).\n        \"\"\"\n        if isinstance(value, str):\n            # Simple quoting for strings. Does not handle escaping internal quotes.\n            return f\"'{value}'\"\n        elif value is None:\n            return 'NULL'\n        else:\n            # Assume numbers, booleans, etc., don't need quotes (or DB handles bool mapping)\n            return str(value)\n\n    def select(self, fields=None, condition=None):\n        \"\"\"\n        Generates a SELECT SQL statement based on the specified fields and conditions.\n        :param fields: list, optional. Default is None. The list of fields to be queried.\n        :param condition: str, optional. Default is None. The condition expression for the query.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1')\n        >>> sql.select(['field1', 'field2'], 'filed3 = value1')\n        'SELECT field1, field2 FROM table1 WHERE filed3 = value1;'\n        >>> sql.select(condition='id = 1')\n        'SELECT * FROM table1 WHERE id = 1;'\n        >>> sql.select(['field1'])\n        'SELECT field1 FROM table1;'\n        >>> sql.select()\n        'SELECT * FROM table1;'\n        \"\"\"\n        fields_str = \"*\" if fields is None else \", \".join(fields)\n        sql = f\"SELECT {fields_str} FROM {self.table_name}\"\n        if condition:\n            sql += f\" WHERE {condition}\"\n        sql += \";\"\n        return sql\n\n    def insert(self, data):\n        \"\"\"\n        Generates an INSERT SQL statement based on the given data.\n        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1') # Added for test case\n        >>> sql.insert({'key1': 'value1', 'key2': 'value2'})\n        \"INSERT INTO table1 (key1, key2) VALUES ('value1', 'value2');\"\n        >>> sql.insert({'id': 123, 'name': 'Test'})\n        \"INSERT INTO table1 (id, name) VALUES (123, 'Test');\"\n        \"\"\"\n        if not data:\n            raise ValueError(\"Data dictionary cannot be empty for INSERT.\")\n\n        fields = data.keys()\n        values = [self._quote_value(data[field]) for field in fields]\n\n        fields_str = \", \".join(fields)\n        values_str = \", \".join(values)\n\n        sql = f\"INSERT INTO {self.table_name} ({fields_str}) VALUES ({values_str});\"\n        return sql\n\n    def update(self, data, condition):\n        \"\"\"\n        Generates an UPDATE SQL statement based on the given data and condition.\n        :param data: dict. The data to be updated, in dictionary form where keys are field names and new field values.\n        :param condition: str. The condition expression for the update.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1') # Added for test case\n        >>> sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, \"field3 = value1\")\n        \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\"\n        >>> sql.update({'count': 10, 'status': 'active'}, \"id = 5\")\n        \"UPDATE table1 SET count = 10, status = 'active' WHERE id = 5;\"\n        \"\"\"\n        if not data:\n            raise ValueError(\"Data dictionary cannot be empty for UPDATE.\")\n        if not condition:\n             raise ValueError(\"Condition cannot be empty for UPDATE.\")\n\n        set_parts = [f\"{field} = {self._quote_value(value)}\" for field, value in data.items()]\n        set_str = \", \".join(set_parts)\n\n        sql = f\"UPDATE {self.table_name} SET {set_str} WHERE {condition};\"\n        return sql\n\n    def delete(self, condition):\n        \"\"\"\n        Generates a DELETE SQL statement based on the given condition.\n        :param condition: str. The condition expression for the delete.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1') # Added for test case\n        >>> sql.delete(\"field1 = value1\")\n        'DELETE FROM table1 WHERE field1 = value1;'\n        >>> sql.delete(\"id > 100\")\n        'DELETE FROM table1 WHERE id > 100;'\n        \"\"\"\n        if not condition:\n             raise ValueError(\"Condition cannot be empty for DELETE.\")\n\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition};\"\n        return sql\n\n    def select_female_under_age(self, age):\n        \"\"\"\n        Generates a SQL statement to select females under a specified age.\n        :param age: int. The specified age.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1') # Added for test case\n        >>> sql.select_female_under_age(30)\n        \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\"\n        >>> sql.select_female_under_age(25)\n        \"SELECT * FROM table1 WHERE age < 25 AND gender = 'female';\"\n        \"\"\"\n        if not isinstance(age, int) or age < 0:\n             raise ValueError(\"Age must be a non-negative integer.\")\n\n        # Note: 'female' is quoted as per the example\n        condition = f\"age < {age} AND gender = 'female'\"\n        return self.select(condition=condition) # Re-use the select method\n\n    def select_by_age_range(self, min_age, max_age):\n        \"\"\"\n        Generates a SQL statement to select records within a specified age range.\n        :param min_age: int. The minimum age.\n        :param max_age: int. The maximum age.\n        :return: str. The generated SQL statement.\n        >>> sql = SQLGenerator('table1') # Added for test case\n        >>> sql.select_by_age_range(20, 30)\n        'SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;'\n        >>> sql.select_by_age_range(18, 65)\n        'SELECT * FROM table1 WHERE age BETWEEN 18 AND 65;'\n        \"\"\"\n        if not isinstance(min_age, int) or not isinstance(max_age, int) or min_age < 0 or max_age < min_age:\n             raise ValueError(\"min_age and max_age must be non-negative integers and min_age <= max_age.\")\n\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\n        return self.select(condition=condition) # Re-use the select method\n\n```"
    ]
  },
  {
    "task_id": "ClassEval_80",
    "skeleton": "class SQLQueryBuilder:\n    \"\"\"\n    This class provides to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements. \n    \"\"\"\n\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        \"\"\"\n        Generate the SELECT SQL statement from the given parameters.\n        :param table: str, the query table in database.\n        :param columns: list of str, ['col1', 'col2'].\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        return query: str, the SQL query statement.\n        >>> SQLQueryBuilder.select('table1', columns = [\"col1\",\"col2\"], where = {\"age\": 15})\n        \"SELECT col1, col2 FROM table1 WHERE age='15'\"\n        \"\"\"\n\n    @staticmethod\n    def insert(table, data):\n        \"\"\"\n        Generate the INSERT SQL statement from the given parameters.\n        :param table: str, the table to be inserted in database.\n        :param data: dict, the key and value in SQL insert statement\n        :return query: str, the SQL insert statement.\n        >>> SQLQueryBuilder.insert('table1', {'name': 'Test', 'age': 14})\n        \"INSERT INTO table1 (name, age) VALUES ('Test', '14')\"\n        \"\"\"\n\n    @staticmethod\n    def delete(table, where=None):\n        \"\"\"\n        Generate the DELETE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with DELETE operation in database\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        :return query: str, the SQL delete statement.\n        >>> SQLQueryBuilder.delete('table1', {'name': 'Test', 'age': 14})\n        \"DELETE FROM table1 WHERE name='Test' AND age='14'\"\n        \"\"\"\n\n    @staticmethod\n    def update(table, data, where=None):\n        \"\"\"\n        Generate the UPDATE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with UPDATE operation in database\n        :param data: dict, the key and value in SQL update statement\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        >>> SQLQueryBuilder.update('table1', {'name': 'Test2', 'age': 15}, where = {'name':'Test'})\n        \"UPDATE table1 SET name='Test2', age='15' WHERE name='Test'\"\n        \"\"\"",
    "test": "import unittest\n\n\nclass SQLQueryBuilderTestSelect(unittest.TestCase):\n    def test_select_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"id\", \"name\"], {'age': 30}),\n            \"SELECT id, name FROM users WHERE age='30'\"\n        )\n\n    def test_select_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('students', [\"id\", \"name\"], {'age': 18}),\n            \"SELECT id, name FROM students WHERE age='18'\"\n        )\n\n    def test_select_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('items', [\"id\", \"name\"], {'price': 1.0}),\n            \"SELECT id, name FROM items WHERE price='1.0'\"\n        )\n\n    def test_select_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"id\"], {'age': 30}),\n            \"SELECT id FROM users WHERE age='30'\"\n        )\n\n    def test_select_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"name\"], {'age': 30}),\n            \"SELECT name FROM users WHERE age='30'\"\n        )\n\n    def test_select_6(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"name\"]),\n            \"SELECT name FROM users\"\n        )\n\n    def test_select_7(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', \"*\"),\n            \"SELECT * FROM users\"\n        )\n\n\nclass SQLQueryBuilderTestInsert(unittest.TestCase):\n    def test_insert_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom', 'age': 30}),\n            \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"\n        )\n\n    def test_insert_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('students', {'name': 'Tom', 'age': 18}),\n            \"INSERT INTO students (name, age) VALUES ('Tom', '18')\"\n        )\n\n    def test_insert_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('items', {'name': 'apple', 'price': 1.0}),\n            \"INSERT INTO items (name, price) VALUES ('apple', '1.0')\"\n        )\n\n    def test_insert_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom'}),\n            \"INSERT INTO users (name) VALUES ('Tom')\"\n        )\n\n    def test_insert_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom', 'age': 30, 'region': 'USA'}),\n            \"INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')\"\n        )\n\n\nclass SQLQueryBuilderTestDetele(unittest.TestCase):\n    def test_delete_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('users', {'name': 'Tom'}),\n            \"DELETE FROM users WHERE name='Tom'\"\n        )\n\n    def test_delete_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('students', {'name': 'Tom'}),\n            \"DELETE FROM students WHERE name='Tom'\"\n        )\n\n    def test_delete_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items', {'name': 'apple'}),\n            \"DELETE FROM items WHERE name='apple'\"\n        )\n\n    def test_delete_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items', {'name': 'aaa'}),\n            \"DELETE FROM items WHERE name='aaa'\"\n        )\n\n    def test_delete_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items', {'name': 'bbb'}),\n            \"DELETE FROM items WHERE name='bbb'\"\n        )\n\n    def test_delete_6(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items'),\n            \"DELETE FROM items\"\n        )\n\n\nclass SQLQueryBuilderTestUpdate(unittest.TestCase):\n    def test_update_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('users', {'age': 35}, {'name': 'Tom'}),\n            \"UPDATE users SET age='35' WHERE name='Tom'\"\n        )\n\n    def test_update_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('students', {'age': 18}, {'name': 'Tom'}),\n            \"UPDATE students SET age='18' WHERE name='Tom'\"\n        )\n\n    def test_update_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}, {'name': 'apple'}),\n            \"UPDATE items SET price='1.0' WHERE name='apple'\"\n        )\n\n    def test_update_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}, {'name': 'aaa'}),\n            \"UPDATE items SET price='1.0' WHERE name='aaa'\"\n        )\n\n    def test_update_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}, {'name': 'bbb'}),\n            \"UPDATE items SET price='1.0' WHERE name='bbb'\"\n        )\n\n    def test_update_6(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}),\n            \"UPDATE items SET price='1.0'\"\n        )\n\n\nclass SQLQueryBuilderTestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"id\", \"name\"], {'age': 30}),\n            \"SELECT id, name FROM users WHERE age='30'\"\n        )\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom', 'age': 30}),\n            \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"\n        )\n        self.assertEqual(\n            SQLQueryBuilder.delete('users', {'name': 'Tom'}),\n            \"DELETE FROM users WHERE name='Tom'\"\n        )\n        self.assertEqual(\n            SQLQueryBuilder.update('users', {'age': 35}, {'name': 'Tom'}),\n            \"UPDATE users SET age='35' WHERE name='Tom'\"\n        )",
    "solution_code": "class SQLQueryBuilder:\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        if columns != '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\n\n    @staticmethod\n    def delete(table, where=None):\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query",
    "import_statement": [],
    "class_description": "    \"\"\"\n    This class provides to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements. \n    \"\"\"\n",
    "class_name": "SQLQueryBuilder",
    "test_classes": [
      "SQLQueryBuilderTestSelect",
      "SQLQueryBuilderTestInsert",
      "SQLQueryBuilderTestDetele",
      "SQLQueryBuilderTestUpdate",
      "SQLQueryBuilderTestMain"
    ],
    "class_constructor": "class SQLQueryBuilder: \n",
    "fields": [],
    "methods_info": [
      {
        "method_name": "select",
        "method_description": "def select(table, columns='*', where=None):\n        \"\"\"\n        Generate the SELECT SQL statement from the given parameters.\n        :param table: str, the query table in database.\n        :param columns: list of str, ['col1', 'col2'].\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        return query: str, the SQL query statement.\n        >>> SQLQueryBuilder.select('table1', columns = [\"col1\",\"col2\"], where = {\"age\": 15})\n        \"SELECT col1, col2 FROM table1 WHERE age='15'\"\n        \"\"\"",
        "test_class": "SQLQueryBuilderTestSelect",
        "test_code": "class SQLQueryBuilderTestSelect(unittest.TestCase):\n    def test_select_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"id\", \"name\"], {'age': 30}),\n            \"SELECT id, name FROM users WHERE age='30'\"\n        )\n\n    def test_select_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('students', [\"id\", \"name\"], {'age': 18}),\n            \"SELECT id, name FROM students WHERE age='18'\"\n        )\n\n    def test_select_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('items', [\"id\", \"name\"], {'price': 1.0}),\n            \"SELECT id, name FROM items WHERE price='1.0'\"\n        )\n\n    def test_select_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"id\"], {'age': 30}),\n            \"SELECT id FROM users WHERE age='30'\"\n        )\n\n    def test_select_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"name\"], {'age': 30}),\n            \"SELECT name FROM users WHERE age='30'\"\n        )\n\n    def test_select_6(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', [\"name\"]),\n            \"SELECT name FROM users\"\n        )\n\n    def test_select_7(self):\n        self.assertEqual(\n            SQLQueryBuilder.select('users', \"*\"),\n            \"SELECT * FROM users\"\n        )",
        "solution_code": "def select(table, columns='*', where=None):\n        if columns != '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      },
      {
        "method_name": "insert",
        "method_description": "@staticmethod\n    def insert(table, data):\n        \"\"\"\n        Generate the INSERT SQL statement from the given parameters.\n        :param table: str, the table to be inserted in database.\n        :param data: dict, the key and value in SQL insert statement\n        :return query: str, the SQL insert statement.\n        >>> SQLQueryBuilder.insert('table1', {'name': 'Test', 'age': 14})\n        \"INSERT INTO table1 (name, age) VALUES ('Test', '14')\"\n        \"\"\"",
        "test_class": "SQLQueryBuilderTestInsert",
        "test_code": "class SQLQueryBuilderTestInsert(unittest.TestCase):\n    def test_insert_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom', 'age': 30}),\n            \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"\n        )\n\n    def test_insert_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('students', {'name': 'Tom', 'age': 18}),\n            \"INSERT INTO students (name, age) VALUES ('Tom', '18')\"\n        )\n\n    def test_insert_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('items', {'name': 'apple', 'price': 1.0}),\n            \"INSERT INTO items (name, price) VALUES ('apple', '1.0')\"\n        )\n\n    def test_insert_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom'}),\n            \"INSERT INTO users (name) VALUES ('Tom')\"\n        )\n\n    def test_insert_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.insert('users', {'name': 'Tom', 'age': 30, 'region': 'USA'}),\n            \"INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')\"\n        )",
        "solution_code": "@staticmethod\n    def insert(table, data):\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      },
      {
        "method_name": "delete",
        "method_description": "@staticmethod\n    def delete(table, where=None):\n        \"\"\"\n        Generate the DELETE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with DELETE operation in database\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        :return query: str, the SQL delete statement.\n        >>> SQLQueryBuilder.delete('table1', {'name': 'Test', 'age': 14})\n        \"DELETE FROM table1 WHERE name='Test' AND age='14'\"\n        \"\"\"",
        "test_class": "SQLQueryBuilderTestDetele",
        "test_code": "class SQLQueryBuilderTestDetele(unittest.TestCase):\n    def test_delete_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('users', {'name': 'Tom'}),\n            \"DELETE FROM users WHERE name='Tom'\"\n        )\n\n    def test_delete_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('students', {'name': 'Tom'}),\n            \"DELETE FROM students WHERE name='Tom'\"\n        )\n\n    def test_delete_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items', {'name': 'apple'}),\n            \"DELETE FROM items WHERE name='apple'\"\n        )\n\n    def test_delete_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items', {'name': 'aaa'}),\n            \"DELETE FROM items WHERE name='aaa'\"\n        )\n\n    def test_delete_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items', {'name': 'bbb'}),\n            \"DELETE FROM items WHERE name='bbb'\"\n        )\n\n    def test_delete_6(self):\n        self.assertEqual(\n            SQLQueryBuilder.delete('items'),\n            \"DELETE FROM items\"\n        )",
        "solution_code": "@staticmethod\n    def delete(table, where=None):\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      },
      {
        "method_name": "update",
        "method_description": "@staticmethod\n    def update(table, data, where=None):\n        \"\"\"\n        Generate the UPDATE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with UPDATE operation in database\n        :param data: dict, the key and value in SQL update statement\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        >>> SQLQueryBuilder.update('table1', {'name': 'Test2', 'age': 15}, where = {'name':'Test'})\n        \"UPDATE table1 SET name='Test2', age='15' WHERE name='Test'\"\n        \"\"\"",
        "test_class": "SQLQueryBuilderTestUpdate",
        "test_code": "class SQLQueryBuilderTestUpdate(unittest.TestCase):\n    def test_update_1(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('users', {'age': 35}, {'name': 'Tom'}),\n            \"UPDATE users SET age='35' WHERE name='Tom'\"\n        )\n\n    def test_update_2(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('students', {'age': 18}, {'name': 'Tom'}),\n            \"UPDATE students SET age='18' WHERE name='Tom'\"\n        )\n\n    def test_update_3(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}, {'name': 'apple'}),\n            \"UPDATE items SET price='1.0' WHERE name='apple'\"\n        )\n\n    def test_update_4(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}, {'name': 'aaa'}),\n            \"UPDATE items SET price='1.0' WHERE name='aaa'\"\n        )\n\n    def test_update_5(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}, {'name': 'bbb'}),\n            \"UPDATE items SET price='1.0' WHERE name='bbb'\"\n        )\n\n    def test_update_6(self):\n        self.assertEqual(\n            SQLQueryBuilder.update('items', {'price': 1.0}),\n            \"UPDATE items SET price='1.0'\"\n        )",
        "solution_code": "@staticmethod\n    def update(table, data, where=None):\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query",
        "dependencies": {
          "Standalone": true,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nclass SQLQueryBuilder:\n    \"\"\"\n    This class provides to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements.\n    \"\"\"\n\n    @staticmethod\n    def _format_value(value):\n        \"\"\"Formats a value for SQL, quoting strings and converting others to string.\"\"\"\n        # For simplicity based on examples, convert everything to string and quote it.\n        # A more robust builder would handle None, numbers, booleans differently.\n        return f\"'{str(value)}'\"\n\n    @staticmethod\n    def _build_where_clause(where):\n        \"\"\"Builds the WHERE clause string from a dictionary.\"\"\"\n        if not where:\n            return \"\"\n        conditions = []\n        for key, value in where.items():\n            formatted_value = SQLQueryBuilder._format_value(value)\n            conditions.append(f\"{key}={formatted_value}\")\n        return \" WHERE \" + \" AND \".join(conditions)\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        \"\"\"\n        Generate the SELECT SQL statement from the given parameters.\n        :param table: str, the query table in database.\n        :param columns: list of str, ['col1', 'col2']. Or '*' for all columns.\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        return query: str, the SQL query statement.\n        >>> SQLQueryBuilder.select('table1', columns = [\"col1\",\"col2\"], where = {\"age\": 15})\n        \"SELECT col1, col2 FROM table1 WHERE age='15'\"\n        >>> SQLQueryBuilder.select('table1', where = {\"id\": 1})\n        \"SELECT * FROM table1 WHERE id='1'\"\n        >>> SQLQueryBuilder.select('table1')\n        \"SELECT * FROM table1\"\n        \"\"\"\n        if isinstance(columns, list):\n            columns_str = \", \".join(columns)\n        else: # Assume '*' or other string\n            columns_str = str(columns)\n\n        query = f\"SELECT {columns_str} FROM {table}\"\n\n        where_clause = SQLQueryBuilder._build_where_clause(where)\n        query += where_clause\n\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        \"\"\"\n        Generate the INSERT SQL statement from the given parameters.\n        :param table: str, the table to be inserted in database.\n        :param data: dict, the key and value in SQL insert statement\n        :return query: str, the SQL insert statement.\n        >>> SQLQueryBuilder.insert('table1', {'name': 'Test', 'age': 14})\n        \"INSERT INTO table1 (name, age) VALUES ('Test', '14')\"\n        \"\"\"\n        if not data:\n            # Or raise an error, depending on desired behavior for empty data\n            return f\"INSERT INTO {table} () VALUES ()\"\n\n        columns = \", \".join(data.keys())\n        values = \", \".join([SQLQueryBuilder._format_value(v) for v in data.values()])\n\n        query = f\"INSERT INTO {table} ({columns}) VALUES ({values})\"\n\n        return query\n\n    @staticmethod\n    def delete(table, where=None):\n        \"\"\"\n        Generate the DELETE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with DELETE operation in database\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition. If None, deletes all rows.\n        :return query: str, the SQL delete statement.\n        >>> SQLQueryBuilder.delete('table1', {'name': 'Test', 'age': 14})\n        \"DELETE FROM table1 WHERE name='Test' AND age='14'\"\n        >>> SQLQueryBuilder.delete('table1')\n        \"DELETE FROM table1\"\n        \"\"\"\n        query = f\"DELETE FROM {table}\"\n\n        where_clause = SQLQueryBuilder._build_where_clause(where)\n        query += where_clause\n\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        \"\"\"\n        Generate the UPDATE SQL statement from the given parameters.\n        :param table: str, the table that will be excuted with UPDATE operation in database\n        :param data: dict, the key and value in SQL update statement\n        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.\n        >>> SQLQueryBuilder.update('table1', {'name': 'Test2', 'age': 15}, where = {'name':'Test'})\n        \"UPDATE table1 SET name='Test2', age='15' WHERE name='Test'\"\n        >>> SQLQueryBuilder.update('table1', {'status':'active'})\n        \"UPDATE table1 SET status='active'\"\n        \"\"\"\n        if not data:\n             # Or raise an error, nothing to update\n             return \"\" # Or maybe just \"UPDATE {table}\" if that's valid in context? Sticking to common UPDATE syntax requiring SET.\n\n        set_parts = []\n        for key, value in data.items():\n            formatted_value = SQLQueryBuilder._format_value(value)\n            set_parts.append(f\"{key}={formatted_value}\")\n\n        set_clause = \", \".join(set_parts)\n\n        query = f\"UPDATE {table} SET {set_clause}\"\n\n        where_clause = SQLQueryBuilder._build_where_clause(where)\n        query += where_clause\n\n        return query\n\n# Example Usage (optional, for testing)\nif __name__ == '__main__':\n    print(SQLQueryBuilder.select('table1', columns=[\"col1\", \"col2\"], where={\"age\": 15}))\n    print(SQLQueryBuilder.select('table1', where={\"id\": 1}))\n    print(SQLQueryBuilder.select('table1'))\n    print(SQLQueryBuilder.insert('table1', {'name': 'Test', 'age': 14}))\n    print(SQLQueryBuilder.delete('table1', {'name': 'Test', 'age': 14}))\n    print(SQLQueryBuilder.delete('table1'))\n    print(SQLQueryBuilder.update('table1', {'name': 'Test2', 'age': 15}, where={'name': 'Test'}))\n    print(SQLQueryBuilder.update('table1', {'status': 'active'}))\n```"
    ]
  },
  {
    "task_id": "ClassEval_83",
    "skeleton": "import sqlite3\n\nclass StudentDatabaseProcessor:\n    \"\"\"\n    This is a class with database operation, including inserting student information, searching for student information by name, and deleting student information by name.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initializes the StudentDatabaseProcessor object with the specified database name.\n        :param database_name: str, the name of the SQLite database.\n        \"\"\"\n        self.database_name = database_name\n\n    def create_student_table(self):\n        \"\"\"\n        Creates a \"students\" table in the database if it does not exist already.Fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int\n        :return: None\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        \"\"\"\n\n    def insert_student(self, student_data):\n        \"\"\"\n        Inserts a new student into the \"students\" table.\n        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).\n        :return: None\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}\n        >>> processor.insert_student(student_data)\n        \"\"\"\n\n    def search_student_by_name(self, name):\n        \"\"\"\n        Searches for a student in the \"students\" table by their name.\n        :param name: str, the name of the student to search for.\n        :return: list of tuples, the rows from the \"students\" table that match the search criteria.\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        >>> result = processor.search_student_by_name(\"John\")\n        \"\"\"\n\n    def delete_student_by_name(self, name):\n        \"\"\"\n        Deletes a student from the \"students\" table by their name.\n        :param name: str, the name of the student to delete.\n        :return: None\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}\n        >>> processor.insert_student(student_data)\n        >>> processor.delete_student_by_name(\"John\")\n        \"\"\"",
    "test": "import unittest\n\n\nclass StudentDatabaseProcessorTestInsertStudent(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_insert_student_1(self):\n        student_data = {\n            'name': 'Alice',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Alice',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n    def test_insert_student_2(self):\n        student_data = {\n            'name': 'aaa',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('aaa',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'aaa')\n\n    def test_insert_student_3(self):\n        student_data = {\n            'name': 'bbb',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('bbb',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'bbb')\n\n    def test_insert_student_4(self):\n        student_data = {\n            'name': 'ccc',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ccc',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ccc')\n\n    def test_insert_student_5(self):\n        student_data = {\n            'name': 'ddd',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ddd',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ddd')\n\n\nclass StudentDatabaseProcessorTestSearchStudentByName(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_search_student_by_name_1(self):\n        student_data = {\n            'name': 'Bob',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('Bob')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Bob')\n\n    def test_search_student_by_name_2(self):\n        student_data = {\n            'name': 'aaa',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('aaa')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'aaa')\n\n    def test_search_student_by_name_3(self):\n        student_data = {\n            'name': 'bbb',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('bbb')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'bbb')\n\n    def test_search_student_by_name_4(self):\n        student_data = {\n            'name': 'ccc',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('ccc')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ccc')\n\n    def test_search_student_by_name_5(self):\n        student_data = {\n            'name': 'ddd',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('ddd')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ddd')\n\n\nclass StudentDatabaseProcessorTestDeleteStudentByName(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_delete_student_by_name_1(self):\n        student_data = {\n            'name': 'Charlie',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('Charlie')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Charlie',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_2(self):\n        student_data = {\n            'name': 'aaa',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('aaa')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('aaa',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_3(self):\n        student_data = {\n            'name': 'bbb',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('bbb')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('bbb',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_4(self):\n        student_data = {\n            'name': 'ccc',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('ccc')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ccc',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_5(self):\n        student_data = {\n            'name': 'ddd',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('ddd')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ddd',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n\nclass StudentDatabaseProcessorTest(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_StudentDatabaseProcessor(self):\n        student_data = {\n            'name': 'Alice',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Alice',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n        student_data = {\n            'name': 'Bob',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('Bob')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Bob')\n\n        student_data = {\n            'name': 'Charlie',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('Charlie')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Charlie',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)",
    "solution_code": "import sqlite3\n\n\nclass StudentDatabaseProcessor:\n\n    def __init__(self, database_name):\n        self.database_name = database_name\n\n    def create_student_table(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        create_table_query = \"\"\"\n        CREATE TABLE IF NOT EXISTS students (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            age INTEGER,\n            gender TEXT,\n            grade INTEGER\n        )\n        \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n\n    def insert_student(self, student_data):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        insert_query = \"\"\"\n        INSERT INTO students (name, age, gender, grade)\n        VALUES (?, ?, ?, ?)\n        \"\"\"\n        cursor.execute(insert_query,\n                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))\n\n        conn.commit()\n        conn.close()\n\n    def search_student_by_name(self, name):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        select_query = \"SELECT * FROM students WHERE name = ?\"\n        cursor.execute(select_query, (name,))\n        result = cursor.fetchall()\n\n        conn.close()\n\n        return result\n\n    def delete_student_by_name(self, name):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        delete_query = \"DELETE FROM students WHERE name = ?\"\n        cursor.execute(delete_query, (name,))\n\n        conn.commit()\n        conn.close()",
    "import_statement": [
      "import sqlite3"
    ],
    "class_description": "    \"\"\"\n    This is a class with database operation, including inserting student information, searching for student information by name, and deleting student information by name.\n    \"\"\"\n",
    "class_name": "StudentDatabaseProcessor",
    "test_classes": [
      "StudentDatabaseProcessorTestInsertStudent",
      "StudentDatabaseProcessorTestSearchStudentByName",
      "StudentDatabaseProcessorTestDeleteStudentByName",
      "StudentDatabaseProcessorTest"
    ],
    "class_constructor": "class StudentDatabaseProcessor: \n    def __init__(self, database_name):\n        \"\"\"\n        Initializes the StudentDatabaseProcessor object with the specified database name.\n        :param database_name: str, the name of the SQLite database.\n        \"\"\"\n        self.database_name = database_name\n\n",
    "fields": [
      "self.database_name"
    ],
    "methods_info": [
      {
        "method_name": "create_student_table",
        "method_description": "def create_student_table(self):\n        \"\"\"\n        Creates a \"students\" table in the database if it does not exist already.Fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int\n        :return: None\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        \"\"\"",
        "test_class": "StudentDatabaseProcessorTestInsertStudent",
        "test_code": "class StudentDatabaseProcessorTestInsertStudent(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_insert_student_1(self):\n        student_data = {\n            'name': 'Alice',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Alice',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n    def test_insert_student_2(self):\n        student_data = {\n            'name': 'aaa',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('aaa',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'aaa')\n\n    def test_insert_student_3(self):\n        student_data = {\n            'name': 'bbb',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('bbb',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'bbb')\n\n    def test_insert_student_4(self):\n        student_data = {\n            'name': 'ccc',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ccc',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ccc')\n\n    def test_insert_student_5(self):\n        student_data = {\n            'name': 'ddd',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ddd',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ddd')",
        "solution_code": "def create_student_table(self):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        create_table_query = \"\"\"\n        CREATE TABLE IF NOT EXISTS students (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            age INTEGER,\n            gender TEXT,\n            grade INTEGER\n        )\n        \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "insert_student",
        "method_description": "def insert_student(self, student_data):\n        \"\"\"\n        Inserts a new student into the \"students\" table.\n        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).\n        :return: None\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}\n        >>> processor.insert_student(student_data)\n        \"\"\"",
        "test_class": "StudentDatabaseProcessorTestSearchStudentByName",
        "test_code": "class StudentDatabaseProcessorTestSearchStudentByName(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_search_student_by_name_1(self):\n        student_data = {\n            'name': 'Bob',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('Bob')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Bob')\n\n    def test_search_student_by_name_2(self):\n        student_data = {\n            'name': 'aaa',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('aaa')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'aaa')\n\n    def test_search_student_by_name_3(self):\n        student_data = {\n            'name': 'bbb',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('bbb')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'bbb')\n\n    def test_search_student_by_name_4(self):\n        student_data = {\n            'name': 'ccc',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('ccc')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ccc')\n\n    def test_search_student_by_name_5(self):\n        student_data = {\n            'name': 'ddd',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('ddd')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'ddd')",
        "solution_code": "def insert_student(self, student_data):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        insert_query = \"\"\"\n        INSERT INTO students (name, age, gender, grade)\n        VALUES (?, ?, ?, ?)\n        \"\"\"\n        cursor.execute(insert_query,\n                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))\n\n        conn.commit()\n        conn.close()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "search_student_by_name",
        "method_description": "def search_student_by_name(self, name):\n        \"\"\"\n        Searches for a student in the \"students\" table by their name.\n        :param name: str, the name of the student to search for.\n        :return: list of tuples, the rows from the \"students\" table that match the search criteria.\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        >>> result = processor.search_student_by_name(\"John\")\n        \"\"\"",
        "test_class": "StudentDatabaseProcessorTestDeleteStudentByName",
        "test_code": "class StudentDatabaseProcessorTestDeleteStudentByName(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_delete_student_by_name_1(self):\n        student_data = {\n            'name': 'Charlie',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('Charlie')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Charlie',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_2(self):\n        student_data = {\n            'name': 'aaa',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('aaa')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('aaa',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_3(self):\n        student_data = {\n            'name': 'bbb',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('bbb')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('bbb',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_4(self):\n        student_data = {\n            'name': 'ccc',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('ccc')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ccc',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)\n\n    def test_delete_student_by_name_5(self):\n        student_data = {\n            'name': 'ddd',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('ddd')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('ddd',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)",
        "solution_code": "def search_student_by_name(self, name):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        select_query = \"SELECT * FROM students WHERE name = ?\"\n        cursor.execute(select_query, (name,))\n        result = cursor.fetchall()\n\n        conn.close()\n\n        return result",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "delete_student_by_name",
        "method_description": "def delete_student_by_name(self, name):\n        \"\"\"\n        Deletes a student from the \"students\" table by their name.\n        :param name: str, the name of the student to delete.\n        :return: None\n        >>> processor = StudentDatabaseProcessor(\"students.db\")\n        >>> processor.create_student_table()\n        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}\n        >>> processor.insert_student(student_data)\n        >>> processor.delete_student_by_name(\"John\")\n        \"\"\"",
        "test_class": "StudentDatabaseProcessorTest",
        "test_code": "class StudentDatabaseProcessorTest(unittest.TestCase):\n    def setUp(self):\n        self.processor = StudentDatabaseProcessor(\"test_database.db\")\n        self.processor.create_student_table()\n\n    def tearDown(self):\n        conn = sqlite3.connect(\"test_database.db\")\n        conn.execute(\"DROP TABLE IF EXISTS students\")\n        conn.commit()\n        conn.close()\n\n    def test_StudentDatabaseProcessor(self):\n        student_data = {\n            'name': 'Alice',\n            'age': 20,\n            'gender': 'female',\n            'grade': 90\n        }\n        self.processor.insert_student(student_data)\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Alice',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Alice')\n\n        student_data = {\n            'name': 'Bob',\n            'age': 19,\n            'gender': 'male',\n            'grade': 85\n        }\n        self.processor.insert_student(student_data)\n\n        result = self.processor.search_student_by_name('Bob')\n\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1], 'Bob')\n\n        student_data = {\n            'name': 'Charlie',\n            'age': 18,\n            'gender': 'male',\n            'grade': 95\n        }\n        self.processor.insert_student(student_data)\n\n        self.processor.delete_student_by_name('Charlie')\n\n        conn = sqlite3.connect(\"test_database.db\")\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM students WHERE name=?\", ('Charlie',))\n        result = cursor.fetchall()\n        conn.close()\n\n        self.assertEqual(len(result), 0)",
        "solution_code": "def delete_student_by_name(self, name):\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        delete_query = \"DELETE FROM students WHERE name = ?\"\n        cursor.execute(delete_query, (name,))\n\n        conn.commit()\n        conn.close()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [
            "sqlite3"
          ],
          "field_dependencies": [
            "self.database_name"
          ],
          "method_dependencies": []
        }
      }
    ],
    "predict": [
      "```python\nimport sqlite3\nimport os # Import os for potential cleanup in examples if needed, though not strictly required by the prompt\n\nclass StudentDatabaseProcessor:\n    \"\"\"\n    This is a class with database operation, including inserting student information, searching for student information by name, and deleting student information by name.\n    \"\"\"\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initializes the StudentDatabaseProcessor object with the specified database name.\n        :param database_name: str, the name of the SQLite database.\n        \"\"\"\n        self.database_name = database_name\n        # Ensure the database file exists or can be created\n        try:\n            conn = sqlite3.connect(self.database_name)\n            conn.close()\n        except sqlite3.Error as e:\n            print(f\"Error connecting to database {self.database_name}: {e}\")\n\n\n    def create_student_table(self):\n        \"\"\"\n        Creates a \"students\" table in the database if it does not exist already.Fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int\n        :return: None\n        >>> db_name = \"test_students_create.db\"\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up previous run\n        >>> processor = StudentDatabaseProcessor(db_name)\n        >>> processor.create_student_table()\n        >>> # Verify table exists (optional check)\n        >>> conn = sqlite3.connect(db_name)\n        >>> cursor = conn.cursor()\n        >>> cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='students';\")\n        >>> table_exists = cursor.fetchone() is not None\n        >>> conn.close()\n        >>> # print(table_exists) # Should be True\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up\n        \"\"\"\n        try:\n            with sqlite3.connect(self.database_name) as conn:\n                cursor = conn.cursor()\n                # SQL statement to create the table\n                cursor.execute(\"\"\"\n                    CREATE TABLE IF NOT EXISTS students (\n                        ID INTEGER PRIMARY KEY AUTOINCREMENT,\n                        name TEXT NOT NULL,\n                        age INTEGER,\n                        gender TEXT,\n                        grade INTEGER\n                    )\n                \"\"\")\n                # The 'with' statement automatically commits if no exception occurs\n                print(f\"Table 'students' created or already exists in {self.database_name}\")\n        except sqlite3.Error as e:\n            print(f\"Error creating table: {e}\")\n\n    def insert_student(self, student_data):\n        \"\"\"\n        Inserts a new student into the \"students\" table.\n        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).\n                             Expected keys: 'name', 'age', 'gender', 'grade'.\n        :return: None\n        >>> db_name = \"test_students_insert.db\"\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up previous run\n        >>> processor = StudentDatabaseProcessor(db_name)\n        >>> processor.create_student_table()\n        >>> student_data = {'name': 'John Doe', 'age': 15, 'gender': 'Male', 'grade': 9}\n        >>> processor.insert_student(student_data)\n        >>> # Verify insertion (optional check)\n        >>> conn = sqlite3.connect(db_name)\n        >>> cursor = conn.cursor()\n        >>> cursor.execute(\"SELECT name, age, gender, grade FROM students WHERE name = ?\", ('John Doe',))\n        >>> row = cursor.fetchone()\n        >>> conn.close()\n        >>> # print(row) # Should be ('John Doe', 15, 'Male', 9)\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up\n        \"\"\"\n        sql = \"INSERT INTO students (name, age, gender, grade) VALUES (?, ?, ?, ?)\"\n        try:\n            # Prepare the data tuple from the dictionary\n            data = (\n                student_data.get('name'),\n                student_data.get('age'),\n                student_data.get('gender'),\n                student_data.get('grade')\n            )\n            # Basic validation: ensure name is provided\n            if data[0] is None:\n                print(\"Error: 'name' is a required field for insertion.\")\n                return\n\n            with sqlite3.connect(self.database_name) as conn:\n                cursor = conn.cursor()\n                cursor.execute(sql, data)\n                # The 'with' statement automatically commits if no exception occurs\n                print(f\"Successfully inserted student: {student_data.get('name')}\")\n        except KeyError as e:\n            print(f\"Error: Missing key in student_data dictionary - {e}\")\n        except sqlite3.Error as e:\n            print(f\"Error inserting student: {e}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred during insertion: {e}\")\n\n\n    def search_student_by_name(self, name):\n        \"\"\"\n        Searches for a student in the \"students\" table by their name.\n        :param name: str, the name of the student to search for.\n        :return: list of tuples, the rows from the \"students\" table that match the search criteria.\n                 Returns an empty list if no student is found or an error occurs.\n        >>> db_name = \"test_students_search.db\"\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up previous run\n        >>> processor = StudentDatabaseProcessor(db_name)\n        >>> processor.create_student_table()\n        >>> student_data1 = {'name': 'Alice Smith', 'age': 16, 'gender': 'Female', 'grade': 10}\n        >>> student_data2 = {'name': 'Bob Johnson', 'age': 14, 'gender': 'Male', 'grade': 8}\n        >>> processor.insert_student(student_data1)\n        >>> processor.insert_student(student_data2)\n        >>> result1 = processor.search_student_by_name(\"Alice Smith\")\n        >>> # print(result1) # Should be like [(1, 'Alice Smith', 16, 'Female', 10)] (ID might vary)\n        >>> result2 = processor.search_student_by_name(\"Charlie Brown\")\n        >>> # print(result2) # Should be []\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up\n        \"\"\"\n        sql = \"SELECT ID, name, age, gender, grade FROM students WHERE name = ?\"\n        results = []\n        try:\n            with sqlite3.connect(self.database_name) as conn:\n                cursor = conn.cursor()\n                cursor.execute(sql, (name,)) # Use a tuple for the parameter\n                results = cursor.fetchall()\n                if results:\n                    print(f\"Found {len(results)} student(s) with the name '{name}'.\")\n                else:\n                     print(f\"No student found with the name '{name}'.\")\n        except sqlite3.Error as e:\n            print(f\"Error searching for student by name: {e}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred during search: {e}\")\n\n        return results\n\n    def delete_student_by_name(self, name):\n        \"\"\"\n        Deletes a student from the \"students\" table by their name.\n        :param name: str, the name of the student to delete.\n        :return: None\n        >>> db_name = \"test_students_delete.db\"\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up previous run\n        >>> processor = StudentDatabaseProcessor(db_name)\n        >>> processor.create_student_table()\n        >>> student_data = {'name': 'Peter Pan', 'age': 10, 'gender': 'Male', 'grade': 4}\n        >>> processor.insert_student(student_data)\n        >>> # Verify insertion (optional check)\n        >>> conn = sqlite3.connect(db_name)\n        >>> cursor = conn.cursor()\n        >>> cursor.execute(\"SELECT count(*) FROM students WHERE name = ?\", ('Peter Pan',))\n        >>> count_before = cursor.fetchone()[0]\n        >>> conn.close()\n        >>> # print(f\"Before deletion: {count_before} rows\") # Should be 1\n        >>> processor.delete_student_by_name(\"Peter Pan\")\n        >>> # Verify deletion (optional check)\n        >>> conn = sqlite3.connect(db_name)\n        >>> cursor = conn.cursor()\n        >>> cursor.execute(\"SELECT count(*) FROM students WHERE name = ?\", ('Peter Pan',))\n        >>> count_after = cursor.fetchone()[0]\n        >>> conn.close()\n        >>> # print(f\"After deletion: {count_after} rows\") # Should be 0\n        >>> if os.path.exists(db_name): os.remove(db_name) # Clean up\n        \"\"\"\n        sql = \"DELETE FROM students WHERE name = ?\"\n        try:\n            with sqlite3.connect(self.database_name) as conn:\n                cursor = conn.cursor()\n                cursor.execute(sql, (name,)) # Use a tuple for the parameter\n                # The 'with' statement automatically commits the deletion\n                print(f\"Successfully deleted student(s) with the name '{name}'. Rows affected: {cursor.rowcount}\")\n        except sqlite3.Error as e:\n            print(f\"Error deleting student by name: {e}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred during deletion: {e}\")\n\n# Example Usage (optional, uncomment to run)\n# if __name__ == \"__main__\":\n#     db_file = \"school_database.db\"\n#     processor = StudentDatabaseProcessor(db_file)\n\n#     # Create table\n#     processor.create_student_table()\n\n#     # Insert students\n#     students_to_insert = [\n#         {'name': 'Alice Wonderland', 'age': 16, 'gender': 'Female', 'grade': 10},\n#         {'name': 'Bob TheBuilder', 'age': 14, 'gender': 'Male', 'grade': 8},\n#         {'name': 'Charlie Chaplin', 'age': 15, 'gender': 'Male', 'grade': 9},\n#         {'name': 'Alice Wonderland', 'age': 17, 'gender': 'Female', 'grade': 11}, # Another Alice\n#     ]\n#     for student_data in students_to_insert:\n#         processor.insert_student(student_data)\n\n#     # Search for a student\n#     search_name = \"Alice Wonderland\"\n#     found_students = processor.search_student_by_name(search_name)\n#     print(f\"\\nSearch results for '{search_name}':\")\n#     for student in found_students:\n#         print(student)\n\n#     search_name = \"David Copperfield\"\n#     found_students = processor.search_student_by_name(search_name)\n#     print(f\"\\nSearch results for '{search_name}':\")\n#     for student in found_students:\n#          print(student) # This loop won't run as no students found\n\n#     # Delete a student\n#     delete_name = \"Bob TheBuilder\"\n#     processor.delete_student_by_name(delete_name)\n\n#     # Verify deletion\n#     found_students_after_delete = processor.search_student_by_name(delete_name)\n#     print(f\"\\nSearch results for '{delete_name}' after deletion:\")\n#     for student in found_students_after_delete:\n#         print(student) # This loop won't run\n\n#     # Clean up the database file (optional)\n#     # if os.path.exists(db_file):\n#     #     os.remove(db_file)\n#     #     print(f\"\\nCleaned up {db_file}\")\n\n```"
    ]
  },
  {
    "task_id": "ClassEval_92",
    "skeleton": "class UserLoginDB:\n    \"\"\"\n    This is a database management class for user login verification, providing functions for inserting user information, searching user information, deleting user information, and validating user login.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the UserLoginDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n\n    def insert_user(self, username, password):\n        \"\"\"\n        Inserts a new user into the \"users\" table.\n        :param username: str, the username of the user.\n        :param password: str, the password of the user.\n        :return: None\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        \"\"\"\n\n\n    def search_user_by_username(self, username):\n        \"\"\"\n        Searches for users in the \"users\" table by username.\n        :param username: str, the username of the user to search for.\n        :return:list of tuples, the rows from the \"users\" table that match the search criteria.\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> result = user_db.search_user_by_username('user1')\n        len(result) = 1\n        \"\"\"\n\n\n    def delete_user_by_username(self, username):\n        \"\"\"\n        Deletes a user from the \"users\" table by username.\n        :param username: str, the username of the user to delete.\n        :return: None\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> user_db.delete_user_by_username('user1')\n        \"\"\"\n\n\n    def validate_user_login(self, username, password):\n        \"\"\"\n        Determine whether the user can log in, that is, the user is in the database and the password is correct\n        :param username:str, the username of the user to validate.\n        :param password:str, the password of the user to validate.\n        :return:bool, representing whether the user can log in correctly\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> user_db.validate_user_login('user1', 'pass1')\n        True\n        \"\"\"",
    "test": "import unittest\nimport os\nfrom tempfile import gettempdir\n\n\nclass UserLoginDBTestInsertUser(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_insert_user_1(self):\n        self.db.insert_user('user1', 'pass1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user1')\n        self.assertEqual(user[1], 'pass1')\n\n    def test_insert_user_2(self):\n        self.db.insert_user('user2', 'pass2')\n        user = self.db.search_user_by_username('user2')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user2')\n        self.assertEqual(user[1], 'pass2')\n\n    def test_insert_user_3(self):\n        self.db.insert_user('user3', 'pass3')\n        user = self.db.search_user_by_username('user3')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user3')\n        self.assertEqual(user[1], 'pass3')\n\n    def test_insert_user_4(self):\n        self.db.insert_user('user4', 'pass4')\n        user = self.db.search_user_by_username('user4')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user4')\n        self.assertEqual(user[1], 'pass4')\n\n    def test_insert_user_5(self):\n        self.db.insert_user('user5', 'pass5')\n        user = self.db.search_user_by_username('user5')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user5')\n        self.assertEqual(user[1], 'pass5')\n\n\nclass UserLoginDBTestSearchUserByUsername(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_search_user_by_username_1(self):\n        self.db.insert_user('user1', 'pass1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user1')\n        self.assertEqual(user[1], 'pass1')\n\n    def test_search_user_by_username_2(self):\n        self.db.insert_user('user2', 'pass2')\n        user = self.db.search_user_by_username('user2')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user2')\n        self.assertEqual(user[1], 'pass2')\n\n    def test_search_user_by_username_3(self):\n        self.db.insert_user('user3', 'pass3')\n        user = self.db.search_user_by_username('user3')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user3')\n        self.assertEqual(user[1], 'pass3')\n\n    def test_search_user_by_username_4(self):\n        self.db.insert_user('user4', 'pass4')\n        user = self.db.search_user_by_username('user4')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user4')\n        self.assertEqual(user[1], 'pass4')\n\n    def test_search_user_by_username_5(self):\n        self.db.insert_user('user5', 'pass5')\n        user = self.db.search_user_by_username('user5')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user5')\n        self.assertEqual(user[1], 'pass5')\n\n\nclass UserLoginDBTestDeleteUserByUsername(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_delete_user_by_username_1(self):\n        self.db.insert_user('user1', 'pass1')\n        self.db.delete_user_by_username('user1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_2(self):\n        self.db.insert_user('user2', 'pass2')\n        self.db.delete_user_by_username('user2')\n        user = self.db.search_user_by_username('user2')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_3(self):\n        self.db.insert_user('user3', 'pass3')\n        self.db.delete_user_by_username('user3')\n        user = self.db.search_user_by_username('user3')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_4(self):\n        self.db.insert_user('user4', 'pass4')\n        self.db.delete_user_by_username('user4')\n        user = self.db.search_user_by_username('user4')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_5(self):\n        self.db.insert_user('user5', 'pass5')\n        self.db.delete_user_by_username('user5')\n        user = self.db.search_user_by_username('user5')\n        self.assertIsNone(user)\n\n\nclass UserLoginDBTestValidateUserLogin(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_validate_user_login_1(self):\n        self.db.insert_user('user1', 'pass1')\n        valid = self.db.validate_user_login('user1', 'pass1')\n        self.assertTrue(valid)\n\n    def test_validate_user_login_2(self):\n        self.db.insert_user('user1', 'pass1')\n        invalid = self.db.validate_user_login('user1', 'wrongpass')\n        self.assertFalse(invalid)\n\n    def test_validate_user_login_3(self):\n        valid = self.db.validate_user_login('nonexistentuser', 'somepass')\n        self.assertFalse(valid)\n\n    def test_validate_user_login_4(self):\n        self.db.insert_user('user2', 'pass2')\n        valid = self.db.validate_user_login('user2', 'pass2')\n        self.assertTrue(valid)\n\n    def test_validate_user_login_5(self):\n        self.db.insert_user('user3', 'pass3')\n        valid = self.db.validate_user_login('user3', 'pass3')\n        self.assertTrue(valid)\n\n\nclass UserLoginDBTest(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_UserLoginDB(self):\n        self.db.insert_user('user1', 'pass1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user1')\n        self.assertEqual(user[1], 'pass1')\n        self.db.delete_user_by_username('user1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNone(user)\n        self.db.insert_user('user1', 'pass1')\n        valid = self.db.validate_user_login('user1', 'pass1')\n        self.assertTrue(valid)",
    "solution_code": "import sqlite3\n\n\nclass UserLoginDB:\n    def __init__(self, db_name):\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n\n    def insert_user(self, username, password):\n        self.cursor.execute('''\n            INSERT INTO users (username, password)\n            VALUES (?, ?)\n        ''', (username, password))\n        self.connection.commit()\n\n    def search_user_by_username(self, username):\n        self.cursor.execute('''\n            SELECT * FROM users WHERE username = ?\n        ''', (username,))\n        user = self.cursor.fetchone()\n        return user\n\n    def delete_user_by_username(self, username):\n        self.cursor.execute('''\n            DELETE FROM users WHERE username = ?\n        ''', (username,))\n        self.connection.commit()\n\n    def validate_user_login(self, username, password):\n        user = self.search_user_by_username(username)\n        if user is not None and user[1] == password:\n            return True\n        return False",
    "import_statement": [
      "import sqlite3"
    ],
    "class_description": "    \"\"\"\n    This is a database management class for user login verification, providing functions for inserting user information, searching user information, deleting user information, and validating user login.\n    \"\"\"\n",
    "class_name": "UserLoginDB",
    "test_classes": [
      "UserLoginDBTestInsertUser",
      "UserLoginDBTestSearchUserByUsername",
      "UserLoginDBTestDeleteUserByUsername",
      "UserLoginDBTestValidateUserLogin",
      "UserLoginDBTest"
    ],
    "class_constructor": "class UserLoginDB: \n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the UserLoginDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n\n",
    "fields": [
      "self.connection",
      "self.cursor"
    ],
    "methods_info": [
      {
        "method_name": "insert_user",
        "method_description": "def insert_user(self, username, password):\n        \"\"\"\n        Inserts a new user into the \"users\" table.\n        :param username: str, the username of the user.\n        :param password: str, the password of the user.\n        :return: None\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        \"\"\"",
        "test_class": "UserLoginDBTestInsertUser",
        "test_code": "class UserLoginDBTestInsertUser(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_insert_user_1(self):\n        self.db.insert_user('user1', 'pass1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user1')\n        self.assertEqual(user[1], 'pass1')\n\n    def test_insert_user_2(self):\n        self.db.insert_user('user2', 'pass2')\n        user = self.db.search_user_by_username('user2')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user2')\n        self.assertEqual(user[1], 'pass2')\n\n    def test_insert_user_3(self):\n        self.db.insert_user('user3', 'pass3')\n        user = self.db.search_user_by_username('user3')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user3')\n        self.assertEqual(user[1], 'pass3')\n\n    def test_insert_user_4(self):\n        self.db.insert_user('user4', 'pass4')\n        user = self.db.search_user_by_username('user4')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user4')\n        self.assertEqual(user[1], 'pass4')\n\n    def test_insert_user_5(self):\n        self.db.insert_user('user5', 'pass5')\n        user = self.db.search_user_by_username('user5')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user5')\n        self.assertEqual(user[1], 'pass5')",
        "solution_code": "def insert_user(self, username, password):\n        self.cursor.execute('''\n            INSERT INTO users (username, password)\n            VALUES (?, ?)\n        ''', (username, password))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "search_user_by_username",
        "method_description": "def search_user_by_username(self, username):\n        \"\"\"\n        Searches for users in the \"users\" table by username.\n        :param username: str, the username of the user to search for.\n        :return:list of tuples, the rows from the \"users\" table that match the search criteria.\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> result = user_db.search_user_by_username('user1')\n        len(result) = 1\n        \"\"\"",
        "test_class": "UserLoginDBTestSearchUserByUsername",
        "test_code": "class UserLoginDBTestSearchUserByUsername(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_search_user_by_username_1(self):\n        self.db.insert_user('user1', 'pass1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user1')\n        self.assertEqual(user[1], 'pass1')\n\n    def test_search_user_by_username_2(self):\n        self.db.insert_user('user2', 'pass2')\n        user = self.db.search_user_by_username('user2')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user2')\n        self.assertEqual(user[1], 'pass2')\n\n    def test_search_user_by_username_3(self):\n        self.db.insert_user('user3', 'pass3')\n        user = self.db.search_user_by_username('user3')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user3')\n        self.assertEqual(user[1], 'pass3')\n\n    def test_search_user_by_username_4(self):\n        self.db.insert_user('user4', 'pass4')\n        user = self.db.search_user_by_username('user4')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user4')\n        self.assertEqual(user[1], 'pass4')\n\n    def test_search_user_by_username_5(self):\n        self.db.insert_user('user5', 'pass5')\n        user = self.db.search_user_by_username('user5')\n        self.assertIsNotNone(user)\n        self.assertEqual(user[0], 'user5')\n        self.assertEqual(user[1], 'pass5')",
        "solution_code": "def search_user_by_username(self, username):\n        self.cursor.execute('''\n            SELECT * FROM users WHERE username = ?\n        ''', (username,))\n        user = self.cursor.fetchone()\n        return user",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "delete_user_by_username",
        "method_description": "def delete_user_by_username(self, username):\n        \"\"\"\n        Deletes a user from the \"users\" table by username.\n        :param username: str, the username of the user to delete.\n        :return: None\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> user_db.delete_user_by_username('user1')\n        \"\"\"",
        "test_class": "UserLoginDBTestDeleteUserByUsername",
        "test_code": "class UserLoginDBTestDeleteUserByUsername(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_delete_user_by_username_1(self):\n        self.db.insert_user('user1', 'pass1')\n        self.db.delete_user_by_username('user1')\n        user = self.db.search_user_by_username('user1')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_2(self):\n        self.db.insert_user('user2', 'pass2')\n        self.db.delete_user_by_username('user2')\n        user = self.db.search_user_by_username('user2')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_3(self):\n        self.db.insert_user('user3', 'pass3')\n        self.db.delete_user_by_username('user3')\n        user = self.db.search_user_by_username('user3')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_4(self):\n        self.db.insert_user('user4', 'pass4')\n        self.db.delete_user_by_username('user4')\n        user = self.db.search_user_by_username('user4')\n        self.assertIsNone(user)\n\n    def test_delete_user_by_username_5(self):\n        self.db.insert_user('user5', 'pass5')\n        self.db.delete_user_by_username('user5')\n        user = self.db.search_user_by_username('user5')\n        self.assertIsNone(user)",
        "solution_code": "def delete_user_by_username(self, username):\n        self.cursor.execute('''\n            DELETE FROM users WHERE username = ?\n        ''', (username,))\n        self.connection.commit()",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [
            "self.connection",
            "self.cursor"
          ],
          "method_dependencies": []
        }
      },
      {
        "method_name": "validate_user_login",
        "method_description": "def validate_user_login(self, username, password):\n        \"\"\"\n        Determine whether the user can log in, that is, the user is in the database and the password is correct\n        :param username:str, the username of the user to validate.\n        :param password:str, the password of the user to validate.\n        :return:bool, representing whether the user can log in correctly\n        >>> user_db = UserLoginDB(\"user_database.db\")\n        >>> user_db.create_table()\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> user_db.validate_user_login('user1', 'pass1')\n        True\n        \"\"\"",
        "test_class": "UserLoginDBTestValidateUserLogin",
        "test_code": "class UserLoginDBTestValidateUserLogin(unittest.TestCase):\n    def setUp(self):\n        self.db_path = os.path.join(gettempdir(), 'test_db.db')\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        create_table_query = \"\"\"\n                CREATE TABLE IF NOT EXISTS users (\n                    username TEXT,\n                    password TEXT\n                )\n                \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n        self.db = UserLoginDB(self.db_path)\n\n    def tearDown(self):\n        self.db.connection.close()\n        os.unlink(self.db_path)\n\n    def test_validate_user_login_1(self):\n        self.db.insert_user('user1', 'pass1')\n        valid = self.db.validate_user_login('user1', 'pass1')\n        self.assertTrue(valid)\n\n    def test_validate_user_login_2(self):\n        self.db.insert_user('user1', 'pass1')\n        invalid = self.db.validate_user_login('user1', 'wrongpass')\n        self.assertFalse(invalid)\n\n    def test_validate_user_login_3(self):\n        valid = self.db.validate_user_login('nonexistentuser', 'somepass')\n        self.assertFalse(valid)\n\n    def test_validate_user_login_4(self):\n        self.db.insert_user('user2', 'pass2')\n        valid = self.db.validate_user_login('user2', 'pass2')\n        self.assertTrue(valid)\n\n    def test_validate_user_login_5(self):\n        self.db.insert_user('user3', 'pass3')\n        valid = self.db.validate_user_login('user3', 'pass3')\n        self.assertTrue(valid)",
        "solution_code": "def validate_user_login(self, username, password):\n        user = self.search_user_by_username(username)\n        if user is not None and user[1] == password:\n            return True\n        return False",
        "dependencies": {
          "Standalone": false,
          "lib_dependencies": [],
          "field_dependencies": [],
          "method_dependencies": [
            "search_user_by_username"
          ]
        }
      }
    ],
    "predict": [
      "```python\nimport sqlite3\nimport os\n\nclass UserLoginDB:\n    \"\"\"\n    This is a database management class for user login verification, providing functions for inserting user information, searching user information, deleting user information, and validating user login.\n    \"\"\"\n\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the UserLoginDB object with the specified database name.\n        :param db_name: str, the name of the SQLite database.\n        \"\"\"\n        self.db_name = db_name\n        self.connection = None\n        self.cursor = None\n        self._connect()\n        self.create_table() # Ensure table exists on initialization\n\n    def _connect(self):\n        \"\"\"Establishes the database connection.\"\"\"\n        try:\n            self.connection = sqlite3.connect(self.db_name)\n            self.cursor = self.connection.cursor()\n        except sqlite3.Error as e:\n            print(f\"Database connection error: {e}\")\n            # Potentially re-raise or handle more gracefully\n\n    def close(self):\n        \"\"\"Closes the database connection.\"\"\"\n        if self.connection:\n            self.connection.close()\n            self.connection = None\n            self.cursor = None\n\n    def create_table(self):\n        \"\"\"\n        Creates the 'users' table if it doesn't exist.\n        The table has columns: id (INTEGER PRIMARY KEY), username (TEXT UNIQUE), password (TEXT).\n        \"\"\"\n        try:\n            self.cursor.execute('''\n                CREATE TABLE IF NOT EXISTS users (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    username TEXT UNIQUE NOT NULL,\n                    password TEXT NOT NULL\n                )\n            ''')\n            self.connection.commit()\n        except sqlite3.Error as e:\n            print(f\"Error creating table: {e}\")\n            self.connection.rollback() # Rollback changes if table creation fails\n\n    def insert_user(self, username, password):\n        \"\"\"\n        Inserts a new user into the \"users\" table.\n        :param username: str, the username of the user.\n        :param password: str, the password of the user.\n        :return: None\n        >>> db_file = \"insert_test.db\"\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        >>> user_db = UserLoginDB(db_file)\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> result = user_db.search_user_by_username('user1')\n        >>> print(len(result))\n        1\n        >>> user_db.close()\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        \"\"\"\n        try:\n            self.cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n            self.connection.commit()\n        except sqlite3.IntegrityError:\n            print(f\"Error: Username '{username}' already exists.\")\n            self.connection.rollback()\n        except sqlite3.Error as e:\n            print(f\"Error inserting user: {e}\")\n            self.connection.rollback()\n\n\n    def search_user_by_username(self, username):\n        \"\"\"\n        Searches for users in the \"users\" table by username.\n        :param username: str, the username of the user to search for.\n        :return:list of tuples, the rows from the \"users\" table that match the search criteria.\n        >>> db_file = \"search_test.db\"\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        >>> user_db = UserLoginDB(db_file)\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> result = user_db.search_user_by_username('user1')\n        >>> print(len(result))\n        1\n        >>> user_db.close()\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        \"\"\"\n        try:\n            self.cursor.execute(\"SELECT id, username, password FROM users WHERE username = ?\", (username,))\n            rows = self.cursor.fetchall()\n            return rows\n        except sqlite3.Error as e:\n            print(f\"Error searching user: {e}\")\n            return [] # Return empty list on error\n\n\n    def delete_user_by_username(self, username):\n        \"\"\"\n        Deletes a user from the \"users\" table by username.\n        :param username: str, the username of the user to delete.\n        :return: None\n        >>> db_file = \"delete_test.db\"\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        >>> user_db = UserLoginDB(db_file)\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> user_db.insert_user('user2', 'pass2')\n        >>> user_db.delete_user_by_username('user1')\n        >>> result_user1 = user_db.search_user_by_username('user1')\n        >>> result_user2 = user_db.search_user_by_username('user2')\n        >>> print(len(result_user1))\n        0\n        >>> print(len(result_user2))\n        1\n        >>> user_db.close()\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        \"\"\"\n        try:\n            self.cursor.execute(\"DELETE FROM users WHERE username = ?\", (username,))\n            self.connection.commit()\n        except sqlite3.Error as e:\n            print(f\"Error deleting user: {e}\")\n            self.connection.rollback()\n\n\n    def validate_user_login(self, username, password):\n        \"\"\"\n        Determine whether the user can log in, that is, the user is in the database and the password is correct\n        :param username:str, the username of the user to validate.\n        :param password:str, the password of the user to validate.\n        :return:bool, representing whether the user can log in correctly\n        >>> db_file = \"validate_test.db\"\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        >>> user_db = UserLoginDB(db_file)\n        >>> user_db.insert_user('user1', 'pass1')\n        >>> print(user_db.validate_user_login('user1', 'pass1'))\n        True\n        >>> print(user_db.validate_user_login('user1', 'wrong_pass'))\n        False\n        >>> print(user_db.validate_user_login('nonexistent_user', 'any_pass'))\n        False\n        >>> user_db.close()\n        >>> if os.path.exists(db_file): os.remove(db_file)\n        \"\"\"\n        try:\n            # Note: Storing passwords in plain text is insecure.\n            # In a real application, passwords should be hashed and salted.\n            self.cursor.execute(\"SELECT id FROM users WHERE username = ? AND password = ?\", (username, password))\n            row = self.cursor.fetchone()\n            return row is not None\n        except sqlite3.Error as e:\n            print(f\"Error validating user: {e}\")\n            return False\n\n# Example usage (outside the class definition, can be used for testing)\nif __name__ == \"__main__\":\n    import doctest\n    # Clean up database files created by doctests before running\n    for f in [\"insert_test.db\", \"search_test.db\", \"delete_test.db\", \"validate_test.db\", \"user_database.db\"]:\n         if os.path.exists(f):\n             os.remove(f)\n\n    print(\"Running doctests...\")\n    # The original doctests are slightly modified to include necessary setup/cleanup\n    # within the test itself, as the original ones assumed a pre-existing table/db state.\n    # Also added print statements to make doctest verification easier.\n    # The provided doctests in the instruction are examples, not executable code blocks.\n    # The doctests below are adjusted to be runnable.\n    # Note: The original doctests implied a create_table() call and potentially cleanup.\n    # The code now includes create_table() in __init__ and adds cleanup to doctests.\n\n    # Test 1: insert_user (modified from original)\n    print(\"Testing insert_user...\")\n    db_file_insert = \"user_database_insert.db\"\n    if os.path.exists(db_file_insert): os.remove(db_file_insert)\n    user_db = UserLoginDB(db_file_insert)\n    user_db.insert_user('user1', 'pass1')\n    # Verify insertion\n    inserted_user = user_db.search_user_by_username('user1')\n    print(f\"Insert Test - User 'user1' found: {len(inserted_user) == 1}\") # Expect True\n    user_db.close()\n    if os.path.exists(db_file_insert): os.remove(db_file_insert)\n\n    # Test 2: search_user_by_username (modified from original)\n    print(\"\\nTesting search_user_by_username...\")\n    db_file_search = \"user_database_search.db\"\n    if os.path.exists(db_file_search): os.remove(db_file_search)\n    user_db = UserLoginDB(db_file_search)\n    user_db.insert_user('user1', 'pass1')\n    result = user_db.search_user_by_username('user1')\n    print(f\"Search Test - Result length for 'user1': {len(result)}\") # Expect 1\n    user_db.close()\n    if os.path.exists(db_file_search): os.remove(db_file_search)\n\n\n    # Test 3: delete_user_by_username (modified from original)\n    print(\"\\nTesting delete_user_by_username...\")\n    db_file_delete = \"user_database_delete.db\"\n    if os.path.exists(db_file_delete): os.remove(db_file_delete)\n    user_db = UserLoginDB(db_file_delete)\n    user_db.insert_user('user1', 'pass1')\n    user_db.delete_user_by_username('user1')\n    result_after_delete = user_db.search_user_by_username('user1')\n    print(f\"Delete Test - Result length for 'user1' after deletion: {len(result_after_delete)}\") # Expect 0\n    user_db.close()\n    if os.path.exists(db_file_delete): os.remove(db_file_delete)\n\n\n    # Test 4: validate_user_login (modified from original)\n    print(\"\\nTesting validate_user_login...\")\n    db_file_validate = \"user_database_validate.db\"\n    if os.path.exists(db_file_validate): os.remove(db_file_validate)\n    user_db = UserLoginDB(db_file_validate)\n    user_db.insert_user('user1', 'pass1')\n    print(f\"Validate Test - 'user1', 'pass1' is valid: {user_db.validate_user_login('user1', 'pass1')}\") # Expect True\n    print(f\"Validate Test - 'user1', 'wrong_pass' is valid: {user_db.validate_user_login('user1', 'wrong_pass')}\") # Expect False\n    user_db.close()\n    if os.path.exists(db_file_validate): os.remove(db_file_validate)\n\n    # You can also run doctest on the actual docstrings if they were written in standard doctest format\n    # import doctest\n    # doctest.testmod()\n\n    print(\"\\nCompleted tests.\")\n\n```"
    ]
  }
]